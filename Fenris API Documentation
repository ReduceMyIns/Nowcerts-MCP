{
  "openapi": "3.1.0",
  "info": {
    "contact": {
      "email": "info@fenrisd.com",
      "name": "Fenris",
      "url": "https://www.fenrisd.com"
    },
    "description": "## Getting Started\n\nFenris is an API-driven service for the modern insurance company. The Fenris suite of APIs provides the data and scores that inform insurance coverage  decisions, evaluate risk, and improve the experience of applying for, rating, and servicing insurance accounts. The APIs save research time and minimize fillable form content errors by returning applicant data completed form fields for a client (applicant) to confirm, instead of requiring the client to manually complete forms.\n\nThis documentation has been used with the OpenAPI 3 specification. Definitions of the response fields are included under each individual service endpoint. Example requests and responses can be seen in the right-hand panel for each endpoint. The example request json can be collapsed and expanded using the minus and plus signs that appear on the right side of the JSON objects. For help getting authentication set up, **please see our <a href=\"https://documentation.fenrisd.com/authentication.html\" rel=\"noopener noreferrer\" target=\"_blank\">authentication documentation</a> <img style=\"width:10px;\" src=\"./arrow-up-right-from-square.svg\">.** \nWe also provide [example code](fenris_auth_examples.txt.zip) in many popular programming languages. \n\nOnce you have your authentication set up, please **note that access lasts only 24 hours per generated token**. You can make a request for any service you have access to with an example request for that service, found in the right-hand panel of the documentation.\n\nDo you need an account to get started? Click [here](https://fenrisd.com/contact-us/) <img style=\"width:10px;\" src=\"./arrow-up-right-from-square.svg\"> to request credentials.\n\nIf you are stuck or have a question not convered in our documentation, please **send us an email at hello@fenrisd.com**.\n\n\n## Developer Data\nThe Fenris Developer Data Collection is a set of artificial data records that can be used to test the Fenris services. \nThe serviceâ€™s responses to records from the artificial data are guaranteed to be constant, so that your integration tests will not break. \nSince the data in the set is synthetically generated, no personally identifying information (PII) is present and the data can be shared openly. \nBest of all, your account is never charged for requests made with the developer data.\n\nYou can **download our developer data** here:\n\n* [Personal Developer Data](./personal_developer_data.csv)\n* [Business Developer Data](./business_developer_data.csv)\n\n## Postman\n<a href=\"https://www.postman.com/product/what-is-postman/\" rel=\"noopener noreferrer\" target=\"_blank\">Postman</a> <img style=\"width:10px;\" src=\"./arrow-up-right-from-square.svg\"> is a third \nparty all-in-one API platform that can be helpful for testing and working with APIs. We host \na <a href=\"https://documenter.getpostman.com/view/28683214/2sB2qXmP1X\" rel=\"noopener noreferrer\" target=\"_blank\">Postman collection</a> <img style=\"width:10px;\" src=\"./arrow-up-right-from-square.svg\"> \nthat uses the Fenris Developer Data to make example requests. For help getting started with Postman, please see the <a href=\"https://learning.postman.com/docs/getting-started/first-steps/sending-the-first-request/\" rel=\"noopener noreferrer\" target=\"_blank\">Postman documentation</a> <img style=\"width:10px;\" src=\"./arrow-up-right-from-square.svg\">\n\n## Making a Request\nThe Fenris suite of services are all REST APIs. Representational State Transfer (REST) is a set of guidelines to manage communications on networks, including the internet. One of the many benefits of using this pattern is that most development teams will be familiar with the protocol. You can read more about RESTful APIs [here](https://www.freecodecamp.org/news/how-to-use-rest-api/).\n\n### The Components of a RESTful API Client Request\nThe first component of a RESTful API request is the **unique resource identifier**. For all Fenris Services, this is the URL (Uniform Resource Locator). This is what allows the request to be routed to the correct service. This is also known as the request endpoint. The url for each service can be found in the right-hand column of the documentation.\n\nThe next component of the request is the **Method**. The method lets the service know what the request needs to do. The current Fenris services support GET and POST requests, depending on the particular endpoint and desired process. GET allows for the access of resources at a specified URL. POST is used to send data to the service. POST requests are used to prevent information from being exposed in the URL. \n\nThe appropriate method for each request is described in the right-hand column of the documentation, to the left of the service endpoint, or in the left-hand navigation menu, next to the highlighted service. \n\nThe **Request Headers** component of a request are the metadata sent from the client to the server. This contains information about authentication and the format of the request and the response.\n\nThe data used to create the request is provided in the body of the request.\n\nAdditional parameters can give the service additional details, such as query of path parameters.\n\n### Using the Submission Id in a Request\nEvery Fenris API request has an optional `submission-id` parameter. This parameter is echoed directly back in the response. This value may be used to track your internal processes or systems associated with the request. For example, lets say you have multiple lead scores and want to use Fenris Profile+ to evaluate the contact information and quality of the leads without losing the ability to route the lead back to its original source. While making a request to the Fenris Profile+, you can include the `submission-id` parameter in your request's header to specify the original source, and that same string will be returned back in the response's `submissionId` field.\n\n#### Sending Test Requests\nThe `submission-id` parameter can also be used to mark a request as a test request by using the prefix `test` in the value of the submission id.\n",
    "license": {
      "name": "Fenris Commercial License",
      "url": "https://fenrisd.com/terms-and-conditions/"
    },
    "title": "Fenris API Documentation",
    "version": "",
    "x-logo": {
      "altText": "Fenris logo",
      "url": "./fenrisdigitallogo.png"
    }
  },
  "servers": [
    {
      "url": "https://api.fenrisd.com"
    }
  ],
  "tags": [
    {
      "name": "Property Details",
      "description": "Test the Property Details service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Property Details"
    },
    {
      "name": "Property Replacement Cost",
      "description": "Test the Property Replacement Cost service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Property Replacement Cost"
    },
    {
      "name": "Property Hazards and Perils",
      "description": "Test the Property Hazards and Perils service with our\n[**Personal Developer Data**](./personal_developer_data.csv). The developer data is synthetically generated\nand contains no PII. Requests made with developer data are not charged to your account.\n",
      "x-displayName": "Property Hazards and Perils"
    },
    {
      "name": "Submit an outcome",
      "x-displayName": "Submit an outcome"
    },
    {
      "name": "Auto Prefill",
      "description": "Test the Auto Prefill service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data are synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n\n## The Enhanced Auto Prefill Response\n\nThere are two return options for the Auto Prefill endpoint; a base response and an enhanced response. The\nenhanced response includes everything in the based response along with additional enhanced vehicle\ninformation. The response types are toggled with the _responseType_ parameter in the request body.\n\nSetting the _responseType_ to **M** returns only the base data. This is the default. Setting the\n_responseType_ to **C** returns both the base data and the enhanced vehicle information. A license is\nrequired for the enhanced vehicle information.\n\nThe enhanced vehicle information is returned in the _vehiclesEnhanced_ field in the response. This field is\na list of vehicles found for the request, with each item in the list containing details for the vehicle,\nincluding the vehicle's vin number and registration.\n\nExamples of each type of response can be seen in the right-hand panel, under **Response samples**, by\ntoggling the options under Example. Additional details of the response fields can be seen in the\n**Responses** section below under the 200 Response Schema. The _vehiclesEnhanced_ details can be seen by\nclicking the expansion carrot.\n",
      "x-displayName": "Auto Prefill"
    },
    {
      "name": "Driver Record",
      "description": "The Fenris Digital Driver Record service provides summary information of potential violations on a driver's\nrecord. This includes a summary status of the driver's record, counts of the found minor and major\nviolations, the dates of the latest minor and major violations found, and a calculated rating factor for the\ndriver based on the found incidents. The rating factor is priority to Fenris, generated with industry\nexperts, and gives an estimate of how the driver's rates for different tiers of insurance policies may be\nimpacted. The Fenris Driver Record service provides invaluable insights for streamlining applications and\nquoting auto insurance policies.\n\nTest the Driver Record service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data are synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Driver Record"
    },
    {
      "name": "VIN Decoder",
      "x-displayName": "VIN Decoder"
    },
    {
      "name": "Drivers License",
      "description": "Test the Drivers License service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data are synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Drivers License"
    },
    {
      "name": "Score a Commercial Applicant",
      "description": "Many smaller and medium-sized companies don't have access to data science resources and the breadth of data\nneeded to create effective machine-learning models. The Fenris Commercial Scoring API Suite hosts a set of both\nindustry generic and tailored machine learning models to give our customers a competitive edge when it comes\nto understanding their leads and prospective customers.\n\nFor a model trained with your data, our data scientists tailor our machine learning algorithms to the\ncriteria that you use in your business to define a high-quality lead. Once a model is trained and deployed,\nwhen a request to score a lead is sent to the service we match the lead to our proprietary database to\ncreate an enriched prospect profile. This improves the predictive power of the model by augmenting your lead\ndata with our own attributes. The enriched data is scored using your tailored model to segment the lead\nbased on predicted propensity to buy your insurance product.\n",
      "x-displayName": "Score a Commercial Applicant"
    },
    {
      "name": "Commercial Lines Prefill",
      "description": "Test the Commercial Lines Prefill service with our [**Business Developer Data**](./business_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Commercial Lines Prefill"
    },
    {
      "name": "Commercial Lines Financial Information",
      "description": "Test the Commercial Lines Financial Information service with our [**Business Developer Data**](./business_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Commercial Lines Financial Information"
    },
    {
      "name": "Customer 360",
      "description": "Test the Customer 360 service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
      "x-displayName": "Customer 360"
    },
    {
      "name": "Fenris Profile+",
      "x-displayName": "Fenris Profile+"
    },
    {
      "name": "Echo a Message",
      "x-displayName": "Echo a Message"
    },
    {
      "name": "Score an Anonymous Lead (Ping)",
      "description": "The Fenris Lead Insight Service designed to insure that the leads you are buying meet your parameters of\nquality before they are purchased. Using anonymous data, the Fenris Lead Insight Service generates a\nscore indicating the probability of a lead will convert. This insight allows you to route the request to\nthe appropriate channel or return the lead to the seller.\n\nHighly customizable, the Fenris Lead Insight service houses both generic line of business models for\nprobability to convert as well as tailored customer models for assessing the quality of a lead.\n\nFor a model trained with your data, our data scientists tailor our machine learning algorithms to the\ncriteria that you use in your business to define a high-quality lead. Once the tailored model is trained and\ndeployed, the new lead information can be seamlessly scored in a matter of milliseconds.\n",
      "x-displayName": "Score an Anonymous Lead (Ping)"
    },
    {
      "name": "Score a Consumer Applicant",
      "description": "Many smaller and medium-sized companies don't have access to data science resources and the breadth of data\nneeded to create effective machine-learning models. The Fenris Scoring API Suite hosts a set of both\nindustry generic and tailored machine learning models to give our customers a competitive edge when it comes\nto understanding their leads and prospective customers.\n\nThe generic propensity to buy models housed in this suite can identify applicants in your sales funnel\nthe leads who are 10x more likely to make a purchase, with the models be tuned by line of business or product\nline.\n\nFor a model trained with your data, our data scientists tailor our machine learning algorithms to the\ncriteria that you use in your business to define a high-quality lead. Once a model is trained and deployed,\nwhen a request to score a lead is sent to the service we match the lead to our proprietary database to\ncreate an enriched prospect profile. This improves the predictive power of the model by augmenting your lead\ndata with our own attributes. The enriched data is scored using your tailored model to segment the lead\nbased on predicted propensity to buy your insurance product.\n",
      "x-displayName": "Score a Consumer Applicant"
    }
  ],
  "paths": {
    "/services/property/v1/details/search": {
      "post": {
        "tags": [
          "Property Details"
        ],
        "summary": "Access details about a property",
        "description": "The Fenris Digital Property - Assessment Details API quickly and accurately provides a summary of\nreported information on building characteristics, valuation, and mortgages.\n",
        "operationId": "propertyDetails",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through header field containing a client-specified identifier to tieback to client data and systems. If the client does not define, processing relies on an auto-generated field to set the value.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyDetailsRequest"
              },
              "examples": {
                "Old Aldrin Highway - Address": {
                  "description": "Old Aldrin Highway - Address",
                  "value": {
                    "addressLine1": "18595 Old Aldrin Highway",
                    "city": "Highlands Ranch",
                    "state": "CO",
                    "zipCode": "80126"
                  }
                },
                "Old Aldrin Highway - Latitude and Longitude": {
                  "description": "Old Aldrin Highway - Latitude and Longitude",
                  "value": {
                    "longitude": -77.6499,
                    "latitude": 37.46439
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyResponse"
                },
                "examples": {
                  "Old Aldrin Highway": {
                    "description": "Old Aldrin Highway",
                    "value": {
                      "requestId": "59c97ade-66e5-4086-99ee-a638fac845e4",
                      "submissionId": "59c97ade-66e5-4086-99ee-a638fac845e4",
                      "status": "SUCCESS",
                      "matchDescription": "Artificial match",
                      "document": {
                        "buildingCharacteristics": {
                          "useType": "Single Family Residential",
                          "airConditioning": "Central",
                          "basement": "Unfinished Basement",
                          "totalArea": 2345,
                          "buildingClass": "null",
                          "buildingCondition": "Good",
                          "buildingQuality": "C",
                          "garageType": "Garage",
                          "garageNumCars": 0,
                          "lotSize": 7536,
                          "bathrooms": 3,
                          "partialBathrooms": 1,
                          "bedrooms": 4,
                          "totalRooms": 4,
                          "stories": 0,
                          "pool": null,
                          "roofType": "GABLE",
                          "roofCovering": "Composition Shingle",
                          "yearBuilt": 1996,
                          "heatingType": "Central",
                          "heatingFuelType": null,
                          "construction": "Frame",
                          "units": 1,
                          "ownerOccupied": "Owner-occupied property (SFR/Condo)",
                          "ownerName": "MURDOCK, KYLE & SHARON",
                          "buildings": 0,
                          "exteriorWall": null,
                          "foundation": null,
                          "architecturalStyle": null
                        },
                        "valuation": {
                          "apn": "12354678",
                          "marketValueMin": 558909,
                          "marketValueMax": 657562,
                          "landValue": 6920,
                          "improvementValue": 29650,
                          "assessmentYear": 2020,
                          "assessedValue": 36570,
                          "assessedMarketValue": 511457,
                          "lastSalePrice": 0,
                          "lastSaleDate": "2019-08-30"
                        },
                        "mortgage": {
                          "loanToValue": 57.0058,
                          "balance": 351113,
                          "totalLienBalance": 351113,
                          "loanAmount": 365400,
                          "lender": "THE MORTGAGE CO",
                          "loanType": "New Conventional",
                          "titleCompany": "NONE AVAILABLE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/property/v1/risks/search": {
      "post": {
        "tags": [
          "Property Hazards and Perils"
        ],
        "summary": "Access details about the geographic risks for a property",
        "description": "The Fenris Digital Property - Hazards and Perils API quickly and accurately\nprovides a targeted assessment of geographic risks for property policy underwriting.\nThe categories covered by this service are:\n* **Climate**\n* **Geology**\n* **Fire**\n* **Man-made**\n* **Coastal**\n* **Weather**\n* **Crime**\n* **Wildfire**\n* **Flood**\n\nIn addition to the categories above, you can obtain information on insurance premium taxes\nin applicable states, such as Kentucky.\n",
        "operationId": "propertyHazards",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through header field containing a client-specified identifier to tieback to client data and systems. If the client does not define, processing relies on an auto-generated field to set the value.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyRequest"
              },
              "examples": {
                "Old Aldrin Highway - Address": {
                  "description": "Old Aldrin Highway - Address",
                  "value": {
                    "addressLine1": "18595 Old Aldrin Highway",
                    "city": "Highlands Ranch",
                    "state": "CO",
                    "zipCode": "80126"
                  }
                },
                "Old Aldrin Highway - Latitude and Longitude": {
                  "description": "Old Aldrin Highway - Latitude and Longitude",
                  "value": {
                    "longitude": -77.6499,
                    "latitude": 37.46439
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyResponsePropertyRisk"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/property/v1/replacementcost/search": {
      "post": {
        "tags": [
          "Property Replacement Cost"
        ],
        "summary": "Access details about a property's replacement cost.",
        "description": "The Fenris Digital Property - Replacement Cost API quickly and accurately provides a\nsummary of replacement cost information on a given building.\n",
        "operationId": "propertyReplacementCost",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through header field containing a client-specified identifier to tieback to client data and systems. If the client does not define, processing relies on an auto-generated field to set the value.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyRequest"
              },
              "examples": {
                "Old Aldrin Highway - Address": {
                  "description": "Old Aldrin Highway - Address",
                  "value": {
                    "addressLine1": "18595 Old Aldrin Highway",
                    "city": "Highlands Ranch",
                    "state": "CO",
                    "zipCode": "80126"
                  }
                },
                "Old Aldrin Highway - Latitude and Longitude": {
                  "description": "Old Aldrin Highway - Latitude and Longitude",
                  "value": {
                    "longitude": -77.6499,
                    "latitude": 37.46439
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplacementCost"
                },
                "examples": {
                  "Old Aldrin Highway": {
                    "description": "Old Aldrin Highway",
                    "value": {
                      "status": "SUCCESS",
                      "requestId": "c203665b-de49-412e-a8ea-9b8084ef1dae",
                      "submissionId": "c203665b-de49-412e-a8ea-9b8084ef1dae",
                      "matchDescription": "Default match logic",
                      "architecturalStyle": "California Ranch",
                      "constructionQuality": "above average / upgraded",
                      "physicalShape": "rectangular",
                      "constructionType": "framing, wood",
                      "exterior": "vinyl siding",
                      "roofCovering": "metal other than standing seam",
                      "roofConfiguration": "hip",
                      "foundationType": "poured concrete",
                      "numStories": 1,
                      "siteSlope": null,
                      "locale": "suburban",
                      "yearBuilt": "1964",
                      "livingAreaSqFt": 888,
                      "costBreakdown": {
                        "architectFeesAndPermits": 17000,
                        "houseMaterialsAndLabor": 150000,
                        "overhead": 21000,
                        "profit": 21000,
                        "costWithoutDebrisRemoval": 209000,
                        "debrisRemoval": 10000,
                        "costIncludingDebrisRemoval": 219000
                      },
                      "costDetails": null,
                      "replacementCost": 209000,
                      "locationType": "Residential"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/analytics/v1/outcomes": {
      "post": {
        "tags": [
          "Submit an outcome"
        ],
        "summary": "Submit an outcome",
        "description": "Submit an outcome after requesting a score or prefill. The request must include only one of the following: a\nrequestId from the previous request or a submissionId from the previous request.\n",
        "operationId": "addOutcome",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutcomeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Outcome submitted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/personal/v1/vindecoder": {
      "get": {
        "tags": [
          "VIN Decoder"
        ],
        "summary": "Decode a VIN",
        "description": "The VIN Decoder service provides automobile information for a requested VIN (Vehicle Identification Number).\n",
        "operationId": "decodeVIN",
        "parameters": [
          {
            "name": "vin",
            "in": "query",
            "description": "VIN to decode.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "JN8AS5MV0CW000000"
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "A Bearer token for authentication.",
            "schema": {
              "type": "string"
            },
            "example": "Bearer <<token>>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VinDecoderResponse"
                },
                "examples": {
                  "Kyle Murdock": {
                    "description": "Kyle Murdock",
                    "value": {
                      "requestId": "ef13d6eb-a903-4587-9fa5-7f9ef4591ee9",
                      "submissionId": "ef13d6eb-a903-4587-9fa5-7f9ef4591ee9",
                      "status": "Success",
                      "matchDescription": "VIN decoded clean. Check Digit (9th position) is correct",
                      "make": "OLDSMOBILE",
                      "model": "Alero",
                      "modelYear": "1999",
                      "trim": "GLS",
                      "vehicleType": "Passenger Car",
                      "bodyClass": "Sedan/Saloon",
                      "vinDetails": {
                        "manufacturerName": "GENERAL MOTORS LLC",
                        "engineNumberofCylinders": "6",
                        "errorCode": "0",
                        "windows": "4",
                        "displacement(L)": "3.4",
                        "otherEngineInfo": "Name Plate: Chevrolet, Pontiac, Oldsmobile",
                        "plantCountry": "UNITED STATES (USA)",
                        "plantCompanyName": "NA-GM Corp",
                        "doors": "4",
                        "engineManufacturer": "LAN",
                        "plantCity": "LANSING - SOUTH PLANT",
                        "displacement(CC)": "3400.0",
                        "frontAirBagLocations": "1st Row (Driver and Passenger)",
                        "vehicleDescriptor": "1G3NF52E*XC",
                        "fuelDelivery/FuelInjectionType": "Sequential Fuel Injection (SFI)",
                        "engineConfiguration": "V-Shaped",
                        "seatBeltType": "Manual",
                        "displacement(CI)": "207.48072992208",
                        "plantState": "MICHIGAN"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/personal/v1/driverrecord/search": {
      "post": {
        "tags": [
          "Driver Record"
        ],
        "summary": "Check for violations on driver's record",
        "description": "A request for a driver's record needs to include _**either**_ the address on the license of the person of\ninterest, _**or**_ the driver's license number and license state. The address component of the request is\nnot required if the driver's license is provided.\n\nThis information is primarily based on a search of court records and is not a replacement for a\ncomplete Motor Vehicle Records (MVR) search. Because regulations vary across the United States, some states\nprovide more limited access to data. Driver record data is more limited in the following states; AR, CA, CO,\nDC, DE, GA, HI, KS, LA, ME, MI, MN, MO, MT, NV, NH, NY, OH, OR, TN, WV, WY.\n",
        "operationId": "searchDriverRecord",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverRecordRequest"
              },
              "examples": {
                "Minor Violations": {
                  "description": "Minor Violations",
                  "value": {
                    "person": {
                      "firstName": "Jenny",
                      "lastName": "Everywhere",
                      "dateOfBirth": "11/10/1962",
                      "licenseNumber": "510395035146",
                      "licenseState": "TX"
                    }
                  }
                },
                "No Evidence": {
                  "description": "No Evidence",
                  "value": {
                    "person": {
                      "firstName": "Hugo",
                      "lastName": "Danner",
                      "dateOfBirth": "11/12/1964",
                      "licenseNumber": "451984099141",
                      "licenseState": "TX"
                    }
                  }
                },
                "Not Attempted": {
                  "description": "Not Attempted",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DriverRecordResponse"
                },
                "examples": {
                  "Minor Violations": {
                    "description": "Minor Violations",
                    "value": {
                      "requestId": "1fb4c776-bb61-4c37-9240-4c40dec7a8a8",
                      "submissionId": "1fb4c776-bb61-4c37-9240-4c40dec7a8a8",
                      "status": "Minor Violations Found - Developer Data",
                      "licenseSearchStatus": "Supplied",
                      "minorCount": 2,
                      "minorLatest": "12/15/2023",
                      "majorCount": 0,
                      "majorLatest": null,
                      "accidentCount": 0,
                      "accidentLatest": null,
                      "duiCount": 0,
                      "duiLatest": null,
                      "ratingFactor": {
                        "preferred": 2.3,
                        "standard": 1.48,
                        "nonStandard": 1.44,
                        "fullSpectrum": 1.29
                      }
                    }
                  },
                  "No Evidence": {
                    "description": "No Evidence",
                    "value": {
                      "requestId": "10c04741-da9a-4d9d-b9bf-047389eab622",
                      "submissionId": "10c04741-da9a-4d9d-b9bf-047389eab622",
                      "status": "No Evidence Found - Developer Data",
                      "licenseSearchStatus": "Supplied",
                      "minorCount": 0,
                      "minorLatest": null,
                      "majorCount": 0,
                      "majorLatest": null,
                      "accidentCount": 0,
                      "accidentLatest": null,
                      "duiCount": 0,
                      "duiLatest": null,
                      "ratingFactor": {
                        "preferred": 0,
                        "standard": 0,
                        "nonStandard": 0,
                        "fullSpectrum": 0
                      }
                    }
                  },
                  "Not Attempted": {
                    "description": "Not Attempted",
                    "value": {
                      "requestId": "d7f89a3a-d2b9-4988-b1e3-965edf67d2fe",
                      "submissionId": "d7f89a3a-d2b9-4988-b1e3-965edf67d2fe",
                      "status": "Not Attempted",
                      "licenseSearchStatus": "Not Attempted",
                      "minorCount": 0,
                      "minorLatest": null,
                      "majorCount": 0,
                      "majorLatest": null,
                      "accidentCount": 0,
                      "accidentLatest": null,
                      "duiCount": 0,
                      "duiLatest": null,
                      "ratingFactor": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/personal/v1/autoprefill/search": {
      "post": {
        "tags": [
          "Auto Prefill"
        ],
        "summary": "Prefill an auto insurance application.",
        "description": "The Fenris Digital Auto Prefill service provides information that can be used to quickly and\naccurately populate an auto insurance application, such as drivers and vehicle information.\n",
        "operationId": "searchAuto",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The body of the request is in JSON format, using UTF-8 character encoding",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token returned from authentication. See Authentication for more detail.",
            "schema": {
              "type": "string"
            },
            "example": "Bearer <<token>>"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoPrefillRequest"
              },
              "examples": {
                "Response Type M": {
                  "description": "Response Type M",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    },
                    "responseType": "M"
                  }
                },
                "Response Type C": {
                  "description": "Response Type C",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    },
                    "responseType": "C"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AutoPrefillResponse"
                },
                "examples": {
                  "Response Type M": {
                    "summary": "Response Type M.",
                    "description": "This is a **synthetic** data response for **M** Response Type.",
                    "value": {
                      "requestId": "75c193b6-0dc5-4b63-a484-f9fef538c610",
                      "submissionId": "75c193b6-0dc5-4b63-a484-f9fef538c610",
                      "status": "Success",
                      "matchDescription": "Artificial match",
                      "addressDescription": "Artificial address matched",
                      "primary": {
                        "gender": "Male",
                        "maritalStatus": "Married",
                        "memberCode": "Primary Household Member",
                        "parsedAddress": {
                          "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                          "city": "HIGHLANDS RANCH",
                          "state": "CO",
                          "zipCode": "80126",
                          "addressType": "Street Address"
                        },
                        "homeOwnerStatus": "Definite Owner",
                        "lengthOfResidence": "6-10 yrs",
                        "numberOfGenerations": 2,
                        "presenceOf16Or17YearOlds": true,
                        "babyBoomer": false,
                        "dualIncomeNoKids": false,
                        "millennial": false,
                        "vehicleHouseholdNum": 3
                      },
                      "drivers": [
                        {
                          "firstName": "KYLE",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "05/20/1970",
                          "age": 53,
                          "gender": "Male",
                          "maritalStatus": "Married",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        },
                        {
                          "firstName": "SHARON",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "12/08/1971",
                          "age": 51,
                          "gender": "Female",
                          "maritalStatus": "Married",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        },
                        {
                          "firstName": "ANDY",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "03/10/2003",
                          "age": 20,
                          "gender": "Male",
                          "maritalStatus": "Single",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        }
                      ],
                      "vehicles": [
                        {
                          "confidence": 90,
                          "description": "2019 GMC SIERRA",
                          "year": "2019",
                          "make": "GMC",
                          "model": "SIERRA",
                          "type": "Truck",
                          "fuelType": "Gas",
                          "mileage": "40,001 - 50,000",
                          "marketValue": 21217
                        },
                        {
                          "confidence": 70,
                          "description": "2016 HONDA ODYSSEY",
                          "year": "2016",
                          "make": "HONDA",
                          "model": "ODYSSEY",
                          "type": "Passenger Car",
                          "fuelType": "Gas",
                          "mileage": "40,001 - 50,000",
                          "marketValue": 11588
                        },
                        {
                          "confidence": 70,
                          "description": "2012 NISSAN ROGUE",
                          "year": "2012",
                          "make": "NISSAN",
                          "model": "ROGUE",
                          "type": "Passenger Car",
                          "fuelType": "Gas",
                          "mileage": "90,001 - 100,000",
                          "marketValue": 7774
                        }
                      ],
                      "vehiclesEnhanced": []
                    }
                  },
                  "Response Type C": {
                    "summary": "Response Type C.",
                    "description": "This is a **synthetic** data response for **C** Response Type.",
                    "value": {
                      "requestId": "89b8ba5a-c85d-490f-85cc-10fcb61ca8aa",
                      "submissionId": "89b8ba5a-c85d-490f-85cc-10fcb61ca8aa",
                      "status": "Success",
                      "matchDescription": "Artificial match",
                      "addressDescription": "Artificial address matched",
                      "primary": {
                        "gender": "Male",
                        "maritalStatus": "Married",
                        "memberCode": "Primary Household Member",
                        "parsedAddress": {
                          "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                          "city": "HIGHLANDS RANCH",
                          "state": "CO",
                          "zipCode": "80126",
                          "addressType": "Street Address"
                        },
                        "homeOwnerStatus": "Definite Owner",
                        "lengthOfResidence": "6-10 yrs",
                        "numberOfGenerations": 2,
                        "presenceOf16Or17YearOlds": true,
                        "babyBoomer": false,
                        "dualIncomeNoKids": false,
                        "millennial": false,
                        "vehicleHouseholdNum": 3
                      },
                      "drivers": [
                        {
                          "firstName": "KYLE",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "05/20/1970",
                          "age": 53,
                          "gender": "Male",
                          "maritalStatus": "Married",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        },
                        {
                          "firstName": "SHARON",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "12/08/1971",
                          "age": 51,
                          "gender": "Female",
                          "maritalStatus": "Married",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        },
                        {
                          "firstName": "ANDY",
                          "middleName": "",
                          "lastName": "MURDOCK",
                          "dateOfBirth": "03/10/2003",
                          "age": 20,
                          "gender": "Male",
                          "maritalStatus": "Single",
                          "memberCode": "Primary Household Member",
                          "verificationDate": "06/04/2021"
                        }
                      ],
                      "vehicles": [
                        {
                          "confidence": 90,
                          "description": "2019 GMC SIERRA",
                          "year": "2019",
                          "make": "GMC",
                          "model": "SIERRA",
                          "type": "Truck",
                          "fuelType": "Gas",
                          "mileage": "40,001 - 50,000",
                          "marketValue": 21217
                        },
                        {
                          "confidence": 70,
                          "description": "2016 HONDA ODYSSEY",
                          "year": "2016",
                          "make": "HONDA",
                          "model": "ODYSSEY",
                          "type": "Passenger Car",
                          "fuelType": "Gas",
                          "mileage": "40,001 - 50,000",
                          "marketValue": 11588
                        },
                        {
                          "confidence": 70,
                          "description": "2012 NISSAN ROGUE",
                          "year": "2012",
                          "make": "NISSAN",
                          "model": "ROGUE",
                          "type": "Passenger Car",
                          "fuelType": "Gas",
                          "mileage": "90,001 - 100,000",
                          "marketValue": 7774
                        }
                      ],
                      "vehiclesEnhanced": [
                        {
                          "vin": "1GTU9FEL1KZ000000",
                          "make": "GMC",
                          "model": "SIERRA",
                          "year": 2019,
                          "color": "",
                          "trim": "",
                          "registeredState": "CO",
                          "expirationDate": "2021-12-31",
                          "plateType": "Unknown",
                          "leaseIndicator": false,
                          "brandedTitleIndicator": false,
                          "price": 26900,
                          "manufacturerBasePrice": 36500,
                          "driveSystem": "",
                          "registeredOwners": [
                            {
                              "surname": "MURDOCK",
                              "givenName": "KYLE",
                              "suffix": "",
                              "businessName": "",
                              "entityType": "Person",
                              "ownerType": "Owner"
                            },
                            {
                              "surname": "",
                              "givenName": "",
                              "suffix": "",
                              "businessName": "AUTO FINANCE",
                              "entityType": "Organization",
                              "ownerType": "Lien Holder"
                            }
                          ],
                          "vinChangeIndicator": "S",
                          "bodyStyle": "TRUCK",
                          "transactionDate": "2020-11-30",
                          "plateNumber": "CO1234",
                          "brandedTitleCode": "",
                          "addressType": "Street Address",
                          "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                          "city": "HIGHLANDS RANCH",
                          "state": "CO",
                          "zipCode": "80126",
                          "weight": 5250,
                          "type": "Truck",
                          "confidence": 50
                        },
                        {
                          "vin": "5FNRL5H22GB000000",
                          "make": "HONDA",
                          "model": "ODYSSEY",
                          "year": 2016,
                          "color": "",
                          "trim": "",
                          "registeredState": "CO",
                          "expirationDate": "2021-12-31",
                          "plateType": "Unknown",
                          "leaseIndicator": false,
                          "brandedTitleIndicator": false,
                          "price": 12590,
                          "manufacturerBasePrice": 32573,
                          "driveSystem": "",
                          "registeredOwners": [
                            {
                              "surname": "MURDOCK",
                              "givenName": "KYLE",
                              "suffix": "",
                              "businessName": "",
                              "entityType": "Person",
                              "ownerType": "Owner"
                            }
                          ],
                          "vinChangeIndicator": "S",
                          "bodyStyle": "Minivan",
                          "transactionDate": "2020-11-30",
                          "plateNumber": "CO1235",
                          "brandedTitleCode": "",
                          "addressType": "Street Address",
                          "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                          "city": "HIGHLANDS RANCH",
                          "state": "CO",
                          "zipCode": "80126",
                          "weight": 5000,
                          "type": "Passenger Car",
                          "confidence": 77
                        },
                        {
                          "vin": "JN8AS5MV0CW000000",
                          "make": "NISSAN",
                          "model": "ROGUE",
                          "year": 2012,
                          "color": "",
                          "trim": "",
                          "registeredState": "CO",
                          "expirationDate": "2021-12-31",
                          "plateType": "Unknown",
                          "leaseIndicator": false,
                          "brandedTitleIndicator": false,
                          "price": 5999,
                          "manufacturerBasePrice": 21530,
                          "driveSystem": "",
                          "registeredOwners": [
                            {
                              "surname": "MURDOCK",
                              "givenName": "KYLE",
                              "suffix": "",
                              "businessName": "",
                              "entityType": "Person",
                              "ownerType": "Owner"
                            }
                          ],
                          "vinChangeIndicator": "S",
                          "bodyStyle": "SUV",
                          "transactionDate": "2020-11-30",
                          "plateNumber": "CO1236",
                          "brandedTitleCode": "",
                          "addressType": "Street Address",
                          "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                          "city": "HIGHLANDS RANCH",
                          "state": "CO",
                          "zipCode": "80126",
                          "weight": 4000,
                          "type": "Passenger Car",
                          "confidence": 100
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/driverslicense/v1/search": {
      "post": {
        "tags": [
          "Drivers License"
        ],
        "summary": "Search for a drivers license number",
        "description": "The Fenris Digital Driver's License search service provides a driver's license number and state\nfor an input person.\n",
        "operationId": "searchDriversLicense",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriversLicenseSearchRequest"
              },
              "examples": {
                "Kyle Murdock": {
                  "description": "Kyle Murdock",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DriversLicenseSearchResponse"
                },
                "examples": {
                  "Kyle Murdock": {
                    "description": "Kyle Murdock",
                    "value": {
                      "requestId": "9c19139d-77c3-426c-aff4-00090b41900c",
                      "submissionId": "9c19139d-77c3-426c-aff4-00090b41900c",
                      "status": "Success",
                      "licenseState": "CO",
                      "licenseNumber": "349370820846",
                      "maskedLicenseNumber": "********0846"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/commercialscores/v1/scoreprospect/{outcome}/{lineOfBusiness}/{productLine}": {
      "post": {
        "tags": [
          "Score a Commercial Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested business.",
        "operationId": "commercialScoreProspect",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineOfBusiness",
            "in": "path",
            "description": "The insurance line of business for this model.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productLine",
            "in": "path",
            "description": "The product line within the line of business for the model to consider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommercialScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/commercialscores/v1/scoreprospect/{outcome}/{lineOfBusiness}": {
      "post": {
        "tags": [
          "Score a Commercial Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested business.",
        "operationId": "commercialScoreProspect_1",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineOfBusiness",
            "in": "path",
            "description": "The insurance line of business for this model.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommercialScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/commercialscores/v1/scoreprospect/{outcome}": {
      "post": {
        "tags": [
          "Score a Commercial Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested business.",
        "operationId": "commercialScoreProspect_2",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommercialScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/smb/v1/search": {
      "post": {
        "tags": [
          "Commercial Lines Prefill"
        ],
        "summary": "Prefill information about a business.\n",
        "description": "Using only a business name and address, the Fenris Digital Business Insurance Prefill API locates and\nreturns extensive business details. This API leverages the Fenris best-in-class match rates to return a\nrobust set of data fields in a matter of seconds.\n\nOur client's tell us that if they are the first to quote a business, they will have greater than 60% chance\nof closing that lead. Business Insurance Prefill provides crucial time-saving results for agents and brokers\nwho are trying to gather applicant information and for underwriters who are key in the quote/close policy\nphase.\n\n## Business Search Details\nThe Commercial Insurance Prefill service works by matching a request including one or more business names,\nand one or more business addresses to several data repositories.\n\nWhen a request is received, the provided business name(s) are cleansed by removing common business terms\nthat are often swapped or abbreviated (e.g., Ltd, LLC, Inc.), and the address(es) are standardized to USPS\nform using the Fenris address standardization service.\n\nThe cleansed names and addresses are then used to search the Fenris Commercial Reference Data.\nThis search attempts to find the business at the location(s) entered using fuzzy matching on the name(s).\n\nIf no match is found for the name _and_ address, the search is expanded by looking across the state for\nbusinesses that match the input name (Note: many businesses have multiple names, and this is reflected in\nthe reference data that is searched).\n\nIf no match is found in the commercial reference data with either approach, then the same names and\naddresses are used to search the Fenris consumer reference data.\n\nWhile the Fenris reference data is being searched, the service also queries the Secretary of State data for\nthe state in the address field of the request. This search is based only on the business name and\nthe input state.\n\nOnce the searches are complete, the service aggregates all of the matched data from the sources and returns\nit. There are three fields in the return that provide information about the results of the searches. They\nare [`status`](#smb-status), [`matchDescription`](#smb-match-logic), and\n[`addressDescription`](#smb-address-description)`.\n",
        "operationId": "smbPrefill",
        "parameters": [
          {
            "name": "fenris-match-logic",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "FAST",
                "DEFAULT"
              ]
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRequest"
              },
              "examples": {
                "Cherry on Top Cupcake": {
                  "description": "Cherry on Top Cupcake",
                  "value": {
                    "names": [
                      "Cherry on Top Cupcake",
                      "Cherry on Top Bakery",
                      "Cherry Cupcake Midtown",
                      "Cherry Cupcakes"
                    ],
                    "address": {
                      "addressLine1": "32301 Juergensen ST NW",
                      "city": "Washington",
                      "state": "DC",
                      "zipCode": "20007"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessResponse"
                },
                "examples": {
                  "Cherry on Top Cupcake": {
                    "description": "Cherry on Top Cupcake",
                    "value": {
                      "requestId": "ca63610a-255c-4948-9574-974835cb1672",
                      "submissionId": "ca63610a-255c-4948-9574-974835cb1672",
                      "status": "Success",
                      "matchDescription": "Default match logic",
                      "addressDescription": "Address verified",
                      "name": "Cherry on Top Cupcake",
                      "address": {
                        "addressLine1": "32301 Juergensen ST NW",
                        "city": "Washington",
                        "state": "DC",
                        "zipCode": "20007",
                        "addressType": "Street Address"
                      },
                      "phone": "8002236862",
                      "country": "United States",
                      "headquarters": true,
                      "employees": "1-20",
                      "estimatedEmployees": 15,
                      "estimatedPayroll": 1200000,
                      "revenue": "$1 - 9.99 Million",
                      "estimatedRevenue": 2556000,
                      "operatingHours": "",
                      "areaSquareMeters": 150,
                      "parent": {
                        "linkedInUrl": "https://www.linkedin.com/company/cherry-on-top-cupcake",
                        "domain": "cherryontopcupcake.com",
                        "website": "http://www.cherryontopcupcake.com",
                        "alternateDomains": [],
                        "alternateNames": [
                          "Cherry on Top Cupcake",
                          "Cherry on Top Bakery",
                          "Cherry Cupcake Midtown",
                          "Cherry Cupcakes"
                        ],
                        "numberOfContacts": 80,
                        "primaryIndustry": "retail bakeries",
                        "primaryNAICSCode": "311811",
                        "otherNAICSCodes": [],
                        "primarySICCode": "54610000",
                        "otherSICCodes": [],
                        "employees": "101-500",
                        "estimatedEmployees": 120,
                        "revenue": "$10 - 49.99 Million",
                        "estimatedRevenue": 23000000,
                        "yearEstablished": "2009",
                        "entityType": "LLC",
                        "normalizedIndustry": "Food and Beverages",
                        "numberOfLocations": 9,
                        "estimatedPayroll": 1700000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/smb/v1/financial/search": {
      "post": {
        "tags": [
          "Commercial Lines Financial Information"
        ],
        "summary": "Retrieve information about the financial health of a business.\n",
        "description": "The Fenris Digital Business Financial Information API locates and returns details on the financial health\nof the searched business, including scores estimating the businesses' risk of becoming severely delinquent\nor filing for bankruptcy.\n\nThis API leverages the Fenris best-in-class match rates to return a robust set of data fields in a matter\nof seconds.\n",
        "operationId": "smbPrefill_1",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRequest"
              },
              "examples": {
                "Cherry on Top Cupcake": {
                  "description": "Cherry on Top Cupcake",
                  "value": {
                    "names": [
                      "Cherry on Top Cupcake",
                      "Cherry on Top Bakery",
                      "Cherry Cupcake Midtown",
                      "Cherry Cupcakes"
                    ],
                    "address": {
                      "addressLine1": "32301 Juergensen ST NW",
                      "city": "Washington",
                      "state": "DC",
                      "zipCode": "20007"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreditResponse"
                },
                "examples": {
                  "Cherry on Top Cupcake": {
                    "description": "Cherry on Top Cupcake",
                    "value": {
                      "requestId": "7c344ebd-7f5e-4be9-864f-c9e478d71da9",
                      "submissionId": "7c344ebd-7f5e-4be9-864f-c9e478d71da9",
                      "status": "Success",
                      "matchDescription": "Default match logic",
                      "addressDescription": "Address verified",
                      "name": "Cherry on Top Cupcake",
                      "address": {
                        "addressLine1": "32301 Juergensen ST NW",
                        "city": "Washington",
                        "state": "DC",
                        "zipCode": "20007",
                        "addressType": "Street Address"
                      },
                      "primaryNAICSCode": "311811",
                      "otherNAICSCodes": [],
                      "failRate": 5,
                      "failLevel": 2,
                      "failReasons": [],
                      "creditScore": 420,
                      "creditClass": 4,
                      "creditPercentile": 30,
                      "creditReasons": [
                        "Insufficient Information on or Lack of Non-Financial Accounts",
                        "Number of Non-Financial Trades",
                        "Years Company has Been in Business in Database",
                        "Industry"
                      ],
                      "bankruptcy": "N"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/lifeprefill/v1/search": {
      "post": {
        "tags": [
          "Customer 360"
        ],
        "summary": "Access general information about an individual or household.",
        "description": "The Customer 360 API quickly and accurately populates household information into\napplication forms, making the insurance application process seamless.\n\nThe Customer 360 service returns information that can also be used to advise an agent or system about the\nfinancial and family status of the applicant. This includes information such as the presence of children\nand mortgage data. This information can be used to make sure that the applicant has the coverage that\nfits their needs.\n",
        "operationId": "customer360",
        "parameters": [
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LifePrefillRequest"
              },
              "examples": {
                "Kyle Murdock": {
                  "description": "Kyle Murdock",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LifePrefillResponse"
                },
                "example": {
                  "requestId": "2eb08998-e8f9-45ec-985a-1d28130ce173",
                  "submissionId": "2eb08998-e8f9-45ec-985a-1d28130ce173",
                  "status": "Success",
                  "matchDescription": "Artificial match",
                  "addressDescription": "Artificial address matched",
                  "primary": {
                    "firstName": "KYLE",
                    "lastName": "MURDOCK",
                    "dateOfBirth": "05/20/1970",
                    "age": 53,
                    "gender": "Male",
                    "maritalStatus": "Married",
                    "memberCode": "Primary Household Member",
                    "address": {
                      "addressLine1": "18595 OLD ALDRIN HIGHWAY",
                      "city": "HIGHLANDS RANCH",
                      "state": "CO",
                      "zipCode": "80126",
                      "addressType": "Street Address"
                    },
                    "homeOwnerStatus": "Definite Owner",
                    "lengthOfResidence": "6-10 yrs",
                    "occupation": "Professional/Technical"
                  },
                  "householdInfo": {
                    "numberOfGenerations": 2,
                    "babyBoomer": false,
                    "dualIncomeNoKids": false,
                    "genX": true,
                    "millennial": false,
                    "numberOfAdults": 3,
                    "presenceChildren": true,
                    "children": {
                      "totalChildren": 2,
                      "children0to2": 0,
                      "children3to5": 0,
                      "children6to10": 0,
                      "children11to15": 1,
                      "children16to17": 1,
                      "childrenUnknownAge": 0
                    },
                    "hobbies": [
                      "Baking",
                      "Scrapbooking",
                      "Woodworking"
                    ]
                  },
                  "financialInfo": {
                    "income": "$150,000 - $174,999",
                    "netWorth": "$250,000 - $499,999",
                    "wealthResources": "$25,000 - $49,999",
                    "investmentResources": "Less than $4,999",
                    "liquidResources": "$15,000 - $19,999",
                    "shortTermLiability": "$5,000 - $9,999",
                    "mortgageData": {
                      "firstMortgageAmount": 500000,
                      "secondMortgageAmount": null,
                      "originalMortgageAmount": 500000,
                      "homeEquityLoan": null,
                      "interestRate": "3.80%",
                      "interestRateType": "Fixed Rate Loan",
                      "loanType": "Conventional",
                      "loanDate": "04/20/2013",
                      "refiIndicator": false
                    },
                    "equityInfo": {
                      "salePrice": 450000,
                      "marketValue": 600000,
                      "assessedValue": 550000,
                      "currentLoanToValue": "",
                      "equity": 250000,
                      "saleDate": "04/20/2013"
                    },
                    "investments": []
                  },
                  "householdMembers": [
                    {
                      "firstName": "KYLE",
                      "lastName": "MURDOCK",
                      "dateOfBirth": "05/20/1970",
                      "age": 53,
                      "gender": "Male",
                      "maritalStatus": "Married",
                      "memberCode": "Primary Household Member"
                    },
                    {
                      "firstName": "SHARON",
                      "lastName": "MURDOCK",
                      "dateOfBirth": "12/08/1971",
                      "age": 51,
                      "gender": "Female",
                      "maritalStatus": "Married",
                      "memberCode": "Primary Household Member"
                    },
                    {
                      "firstName": "ANDY",
                      "lastName": "MURDOCK",
                      "dateOfBirth": "03/10/2003",
                      "age": 20,
                      "gender": "Male",
                      "maritalStatus": "Single",
                      "memberCode": "Primary Household Member"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/truprofile/v1/profile": {
      "post": {
        "tags": [
          "Fenris Profile+"
        ],
        "summary": "Assess contact quality",
        "description": "When dealing with internet lead generation, you can expect invalid contacts containing errors due to\ntypos on forms or intentionally false information. What if you could practically ensure valid leads with\naccurate contact information? The Fenris Digital (\"Fenris\") Profile+ service validates the contact\ninformation on leads to ensure that you are contacting real people instead of wasting time trying to\ncontact people who don't exist, at fake addresses, with autogenerated, made-up email addresses. The\nfirst chance a client has to evaluate whether they can contact a lead occurs when they first receive the\nPOST data. By using **Fenris Profile+** service, clients get instant feedback on the quality of the contact\ninformation so that they can route the request to the appropriate channel or return the lead to the seller.\n\n## How does it work?\nThe **Fenris Profile+** Service works by comparing the input contact information such as person's\nname, postal address, e-mail address, phone number to Fenris' reference database of more than 250\nmillion individuals and 130 million households to determine whether the input person exists in its\nreference data to determine the viability of making contact with the lead. These results are also passed\nto Fenris' proprietary Profile+ scoring engine to compute a score that enables quick assessment on\nthe viability of outreach to each lead based on all of the input contact data submitted.\n\n## What are the benefits?\nWe match each lead to our proprietary, multi-sourced database covering more than 97% of the US\npopulation, evaluating validity for each element so you can sift out fraudulent entries. You can decide at\nthat point to purchase or return the lead, or you can run validated leads through the Fenris data\nenrichment and lead scoring APIs for an even more granular assessment of lead quality and likelihood to\nbuy.\n\n## Usage\nThe Fenris Profile+ endpoint receives a lead's contact data and returns information on the validity of the\nelements submitted. Note that **all items in the request are optional**. Information will be provided only for\nthe submitted elements.\n\n## Developer Data\nTest the Fenris Profile+ service with our [**Personal Developer Data**](./personal_developer_data.csv).\nThe developer data is synthetically generated and contains no PII. Requests made with developer\ndata are not charged to your account.\n",
        "operationId": "profilePerson",
        "parameters": [
          {
            "name": "fenris-model-type",
            "in": "header",
            "description": "Allows users with a deployed tailored model to use the generic Fenris Profile+ model by specify generic as\nthe value.\n",
            "schema": {
              "type": "string"
            },
            "example": "generic"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileRequest"
              },
              "examples": {
                "Kyle Murdock": {
                  "description": "Kyle Murdock",
                  "value": {
                    "person": {
                      "firstName": "Kyle",
                      "lastName": "Murdock",
                      "dateOfBirth": "05/20/1970"
                    },
                    "address": {
                      "addressLine1": "18595 Old Aldrin Highway",
                      "city": "Highlands Ranch",
                      "state": "CO",
                      "zipCode": "80126"
                    },
                    "email": "hello@fenrisd.com",
                    "phone": "123-123-4567",
                    "ipAddress": "1.2.3.4",
                    "lineOfBusiness": "auto"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                },
                "examples": {
                  "Kyle Murdock": {
                    "description": "Kyle Murdock",
                    "value": {
                      "requestId": "dd6dfe57-0b92-4319-8bfc-7c6ab6823b84",
                      "submissionId": "dd6dfe57-0b92-4319-8bfc-7c6ab6823b84",
                      "status": "Success - Developer Data",
                      "address": {
                        "standardized": true,
                        "singleDeliveryPoint": true,
                        "residential": true,
                        "addressFound": true,
                        "householdFound": true,
                        "personAtAddress": true
                      },
                      "person": {
                        "recognizedFirstName": true,
                        "recognizedLastName": true,
                        "personFound": true,
                        "dateOfBirthVerified": true
                      },
                      "phone": {
                        "valid": false,
                        "mobileOrLandline": false
                      },
                      "email": {
                        "valid": true
                      },
                      "ipAddress": {
                        "valid": true,
                        "notKnownProxy": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/echo/v1/echo": {
      "post": {
        "tags": [
          "Echo a Message"
        ],
        "summary": "Echo a Message",
        "description": "The echo API is a simple \"Hello World!\" service that echoes the message sent to it.\nIt is designed to assist developers in testing authentication and connectivity to the Fenris API\nplatform.\n",
        "operationId": "echoMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EchoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EchoResponse"
                },
                "example": {
                  "requestId": "3800a4cd-1372-48ce-a6fa-2b7fe5888258",
                  "submissionId": "3800a4cd-1372-48ce-a6fa-2b7fe5888258",
                  "status": "SUCCESS",
                  "message": "I think you're great!"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/leadinsight/v1/home/{type}": {
      "post": {
        "tags": [
          "Score an Anonymous Lead (Ping)"
        ],
        "summary": "Score a Home Insurance Lead.",
        "description": "Score a Home Insurance lead with the specified model type specified, e.g. returnlikelihood, sellability, quotability.",
        "operationId": "ReturnHomeInsight",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomeLeadInsightRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInsightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/leadinsight/v1/commercial/{type}": {
      "post": {
        "tags": [
          "Score an Anonymous Lead (Ping)"
        ],
        "summary": "Score a Commercial Insurance Lead.",
        "description": "Score a Commercial Insurance lead with the specified model type specified, e.g. .",
        "operationId": "ReturnCommercialInsight",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommercialLeadInsightRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInsightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/leadinsight/v1/auto/{type}": {
      "post": {
        "tags": [
          "Score an Anonymous Lead (Ping)"
        ],
        "summary": "Score an Auto Insurance Lead.",
        "description": "Score an Auto Insurance lead with the specified model type specified, e.g. returnlikelihood, sellability, quotability.",
        "operationId": "ReturnAutoInsight",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoLeadInsightRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInsightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/leadinsight/v1/life/{type}": {
      "post": {
        "tags": [
          "Score an Anonymous Lead (Ping)"
        ],
        "summary": "Score a Life Insurance Lead.",
        "description": "Score a Life Insurance lead with the specified model type specified, e.g. returnlikelihood, sellability, quotability.",
        "operationId": "ReturnLifeInsight",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LifeLeadInsightRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInsightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/leadinsight/v1/health/{type}": {
      "post": {
        "tags": [
          "Score an Anonymous Lead (Ping)"
        ],
        "summary": "Score a Health Insurance Lead.",
        "description": "Score a Health Insurance lead with the specified model type specified, e.g. returnlikelihood, sellability, quotability.",
        "operationId": "ReturnHealthInsight",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthLeadInsightRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LeadInsightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/scores/v1/scoreprospect/{outcome}/{lineOfBusiness}/{productLine}": {
      "post": {
        "tags": [
          "Score a Consumer Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested person and address.",
        "operationId": "scoreProspect",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineOfBusiness",
            "in": "path",
            "description": "The insurance line of business for this model.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productLine",
            "in": "path",
            "description": "The product line within the line of business for the model to consider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProspectScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProspectScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/scores/v1/scoreprospect/{outcome}/{lineOfBusiness}": {
      "post": {
        "tags": [
          "Score a Consumer Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested person and address.",
        "operationId": "scoreProspect_1",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineOfBusiness",
            "in": "path",
            "description": "The insurance line of business for this model.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProspectScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProspectScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/services/scores/v1/scoreprospect/{outcome}": {
      "post": {
        "tags": [
          "Score a Consumer Applicant"
        ],
        "summary": "Generate a score",
        "description": "Return a score for the requested person and address.",
        "operationId": "scoreProspect_2",
        "parameters": [
          {
            "name": "outcome",
            "in": "path",
            "description": "The outcome to be predicted (i.e., the target variable of the model).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Submission-Id",
            "in": "header",
            "description": "A pass through field from the request header containing a client-specified identifier to tieback to client data and systems. If the client does not define this value, an auto-generated field is used.",
            "schema": {
              "type": "string"
            },
            "example": "cafe-item-123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProspectScoringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProspectScoringResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "403": {
            "description": "Unauthenticated Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/403"
                }
              }
            }
          },
          "404": {
            "description": "Wrong Endpoint",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "405": {
            "description": "Method not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/405"
                }
              }
            }
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/415"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/504"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oAuthNoScopes": {
        "description": "Fenris restricts access to its APIs and manages access tokens through an OAuth2 authorization server. The Client Credentials workflow defined by the OAuth 2 specification is the principal token manager.  You will receive a Client Id and Client Secret used to obtain an access token from the Authorization Server. See [authentication](./authentication.html) for more details.",
        "flows": {
          "clientCredentials": {
            "scopes": {},
            "tokenUrl": "https://auth.fenrisd.com/realms/fenris/protocol/openid-connect/token"
          }
        },
        "type": "oauth2"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.fenrisd.com/realms/fenris/protocol/openid-connect/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "400": {
        "type": "object",
        "description": "The body of the request failed validation. The request might be missing a required field or an unsupported date format was used.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "description": "The title of the error.",
                "example": "Method argument not valid"
              },
              "status": {
                "type": "integer",
                "enum": [
                  400
                ],
                "description": "The error code."
              }
            }
          },
          {
            "$ref": "#/components/schemas/generalError"
          },
          {
            "type": "object",
            "properties": {
              "fieldErrors": {
                "type": "array",
                "description": "A list of specific validation errors."
              }
            }
          }
        ]
      },
      "401": {
        "type": "object",
        "description": "The request made was unauthorized.",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2023-12-06T16:37:14.101+00:00",
            "description": "The timestamp of the original request."
          },
          "status": {
            "type": "integer",
            "enum": [
              401
            ],
            "description": "The error code."
          },
          "error": {
            "type": "string",
            "enum": [
              "Unauthorized"
            ]
          },
          "path": {
            "type": "string",
            "description": "The path of the request."
          }
        }
      },
      "403": {
        "type": "object",
        "description": "There was a problem with authentication. This could be due to not having a license for the product, the license being expired, or exceeding a demo quota.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "description": "The title of the error.",
                "example": "Unsupported Media Type"
              },
              "status": {
                "type": "integer",
                "enum": [
                  403
                ],
                "description": "The error code."
              },
              "detail": {
                "type": "string",
                "description": "Additional information on the error.",
                "example": "Content type 'application/text;charset=UTF-8' not supported"
              }
            }
          },
          {
            "$ref": "#/components/schemas/generalError"
          }
        ]
      },
      "404": {
        "type": "object",
        "description": "Wrong endpoint",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2023-12-06T16:37:14.101+00:00",
            "description": "The timestamp of the original request."
          },
          "status": {
            "type": "integer",
            "enum": [
              404
            ],
            "description": "The error code."
          },
          "error": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          },
          "path": {
            "type": "string",
            "description": "The path of the request."
          }
        }
      },
      "405": {
        "type": "object",
        "description": "The method is not allowed. This could be due to a service restarting, using the incorrect REST method, or incorrect url.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "description": "The title of the error."
              },
              "status": {
                "type": "integer",
                "enum": [
                  405
                ],
                "description": "The error code."
              },
              "detail": {
                "type": "string",
                "description": "Additional information on the error.",
                "example": "Content type 'application/text;charset=UTF-8' not supported"
              }
            }
          },
          {
            "$ref": "#/components/schemas/generalError"
          }
        ]
      },
      "415": {
        "type": "object",
        "description": "The Content-Type value is not supported; application/json is required.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "description": "The title of the error.",
                "example": "Unsupported Media Type"
              },
              "status": {
                "type": "integer",
                "enum": [
                  415
                ],
                "description": "The error code."
              },
              "detail": {
                "type": "string",
                "description": "Additional information on the error.",
                "example": "Content type 'application/text;charset=UTF-8' not supported"
              }
            }
          },
          {
            "$ref": "#/components/schemas/generalError"
          }
        ]
      },
      "500": {
        "type": "object",
        "description": "An unexpected error occured.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "description": "The title of the error."
              },
              "status": {
                "type": "integer",
                "enum": [
                  500
                ],
                "description": "The error code."
              },
              "detail": {
                "type": "string",
                "description": "Additional information on the error.",
                "example": "Content type 'application/text;charset=UTF-8' not supported"
              }
            }
          },
          {
            "$ref": "#/components/schemas/generalError"
          }
        ]
      },
      "504": {
        "type": "object",
        "description": "Gateway Timeout",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2023-12-06T16:37:14.101+00:00",
            "description": "The timestamp of the original request."
          },
          "status": {
            "type": "integer",
            "enum": [
              504
            ],
            "description": "The error code."
          },
          "error": {
            "type": "string",
            "enum": [
              "Gateway timeout"
            ]
          },
          "path": {
            "type": "string",
            "description": "The path of the request."
          }
        }
      },
      "PropertyRequest": {
        "type": "object",
        "description": "Request object used to retrieve risk or other information about a property. The request **must** include a valid address block **or** a longitude/latitude pair. For most use cases, the address block is recommended.",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Street address for a location, may also include secondary (e.g. apartment) information. This field is required for an address block to be valid.",
            "example": 18595,
            "minLength": 1
          },
          "addressLine2": {
            "type": "string",
            "description": "This field will be appended to addressLine1",
            "writeOnly": true
          },
          "city": {
            "type": "string",
            "description": "Name of the city in which the address is located. A city or a ZIP Code must be present for an address block to be valid.",
            "example": "Highlands Ranch"
          },
          "state": {
            "type": "string",
            "description": "Standard two-character state abbreviation. A state abbreviation is required for an address block to be valid",
            "example": "CO",
            "minLength": 1
          },
          "zipCode": {
            "type": "string",
            "description": "Five-digit ZIP Code for the input address. A city or a ZIP Code must be present for an address block to be valid.",
            "example": 80126
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "Longitude, in signed, decimal degrees for the input location. A longitude is required for a geocode block to be valid.",
            "example": -77.6499
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude, in signed, decimal degrees for the input location. A latitude is required for a geocode block to be valid.",
            "example": 37.46439
          },
          "addressType": {
            "type": "string",
            "description": "Calculated type for the returned address. ",
            "enum": [
              "General Delivery",
              "High-rise",
              "PO Box",
              "Rural route/Highway contract",
              "Street Address",
              "Address type indeterminable",
              "Address incomplete",
              "Not Available",
              "Overseas Military Address"
            ],
            "readOnly": true
          }
        }
      },
      "AAIS": {
        "type": "object",
        "properties": {
          "protectionClass": {
            "type": "string",
            "description": "The protection class using AAIS methodology."
          },
          "protectionText": {
            "type": "string",
            "description": "A string description of the protection class."
          },
          "availableWaterType": {
            "type": "string",
            "description": "The available water type at this location."
          },
          "hydrantAndFireStationText": {
            "type": "string",
            "description": "The nearest hydrant and fire station for this location."
          }
        }
      },
      "BuildingCharacteristics": {
        "type": "object",
        "description": "Details of property and improvements based on county tax assessor data.",
        "properties": {
          "useType": {
            "type": "string",
            "description": "The property use classification.",
            "enum": [
              "Miscellaneous (General)",
              "Pipeline or Right-of-Way",
              "Rail (Right-of-way & track)",
              "Road (Right-of-way)",
              "Utilities (Right-of-way ONLY)",
              "Sub-Surface Rights (mineral)",
              "Surface Rights (Grazing, timber, coal, etc.)",
              "Leasehold Rights (misc.)",
              "Possessory Interest (misc.)",
              "Petroleum & Gas Wells (misc.)",
              "Water Rights (misc.)",
              "Right-of-Way (not rail, road or utility)",
              "Easement (misc.)",
              "Homestead (Misc.)",
              "Common Area (misc.)",
              "Royalty Interest",
              "Working Interest",
              "Parcels with improvements, Use Not Specified",
              "Personal property (general)",
              "Vehicles (general)",
              "Motor vehicles (cars, trucks, etc.)",
              "Recreational Vehicles / Travel Trailers",
              "Watercraft (ships, boats, PWCs, etc.)",
              "Aircraft",
              "Rolling stock (railroad)",
              "Spacecraft",
              "Misc vehicles not otherwise classed (antiques, etc.)",
              "Business personal property (general)",
              "Equipment / supplies",
              "Inventory",
              "Goods in transit",
              "Livestock (animals, fish, birds, etc.)",
              "Crops (in ground)",
              "Crops (harvested)",
              "Misc. Business Personal Property not otherwise classed",
              "Structures (general)",
              "Structures on Leased Land",
              "Temporary structures",
              "Misc structures not otherwise classed (billboards, etc.)",
              "Intangible personal property",
              "Misc personal property not otherwise classed",
              "Residential (General) (Single)",
              "Single Family Residential",
              "Townhouse (Residential)",
              "Cluster home (Residential)",
              "Condominium Unit (Residential)",
              "Cooperative Unit (Residential)",
              "Mobile/Manufactured Home (regardless of Land ownership)",
              "Row House (Residential)",
              "Rural/Agricultural Residence",
              "Planned Unit Development (PUD) (Residential)",
              "Residential Common Area (Condo/PUD/etc.)",
              "Timeshare (Residential)",
              "Seasonal, Cabin, Vacation Residence",
              "Bungalow (Residential)",
              "Zero Lot Line (Residential)",
              "Misc Residential Improvement",
              "Modular/Pre-Fabricated Homes",
              "Patio Home",
              "Garden Home",
              "Landominium",
              "Barndominium",
              "Tiny House",
              "Residential Income (General) (Multi-Family)",
              "Duplex (2 units, any combination)",
              "Triplex (3 units, any combination)",
              "Quadruplex (4 units, any combination)",
              "Apartment House (5+ units)",
              "Apartment House (100+ units)",
              "Garden Apt, Court Apt (5+ units)",
              "Highrise Apartments",
              "Boarding House, Rooming House, Apt Hotel, Transient Lodgings, Hostel",
              "Mobile Home Park, Trailer Park",
              "Multi-Family Dwellings (Generic, any combination 2+)",
              "Fraternity House, Sorority House",
              "Apartments (generic)",
              "Dormitory, Group Quarters (Residential)",
              "Residential Condominium Development (Association Assessment)",
              "Condominium Building (Residential)",
              "Cooperative Building (Residential)",
              "Residential Parking Garage",
              "Residential Storage Space",
              "Single Family Residential (Assumed)",
              "Commercial (General)",
              "Retail Stores ( Personal Services, Photography, Travel)",
              "Store (multi-story)",
              "Store/Office (mixed use)",
              "Department Store (apparel, household goods, furniture)",
              "Department Store (multi-story)",
              "Grocery, Supermarket",
              "Regional: Shopping Center, Mall (w/Anchor)",
              "Community: Shopping Plaza, Shopping Center, Mini-Mall",
              "Neighborhood: Shopping Center, Strip Center, Enterprise Zone",
              "Shopping Center COMMON AREA (parking, etc.)",
              "Veterinary, Animal Hospital",
              "Restaurant",
              "Fast Food Restaurant / Drive-thru",
              "Take-out Restaurant (food preparation)",
              "Bakery",
              "Bar, Tavern",
              "Liquor Store",
              "Convenience store (7-11)",
              "Convenience Store (w/fuel pump)",
              "Service station (full service)",
              "Service station w/convenience store (food mart)",
              "Truck stop (fuel and diner)",
              "Vehicle Rentals, Vehicle Sales (auto/truck/RV/boat/etc.)",
              "Auto repair (& related), Garage",
              "Car wash",
              "Dry Cleaner, Laundry Service",
              "Service Shop (TV, radio, electric, plumbing)",
              "Florist, Nursery, Greenhouse (retail/wholesale)",
              "Wholesale Outlet, Discount Store",
              "Printer/Delivery - Retail (Kinkos, UPS, FedEx, etc.)",
              "Mini-Warehouse, Self-Storage",
              "Day care, Pre-school (Commercial)",
              "Motel",
              "Hotel",
              "Parking Garage, Parking Structure",
              "Parking Lot",
              "Funeral Home, Mortuary (Commercial)",
              "Casino",
              "Hotel-Resort",
              "Hotel/Motel",
              "Gas Station",
              "Retail/Residential (mixed use)",
              "Commercial Building, Mail Order, Show Room (non-auto), Commercial Whse",
              "Commercial/Office/Residential (mixed use)",
              "Appliance Store (Best Buy, HH Gregg)",
              "Kennel",
              "Laundromat (self-service)",
              "Nightclub (Cocktail Lounge)",
              "Farm Supply & Equipment (retail)",
              "Home Improvement, Garden Center (Home Depot, Lowe's)",
              "Commercial Condominium (not offices)",
              "Drug Store / Pharmacy (CVS, Walgreens)",
              "Bed & Breakfast",
              "Barber/Hair Salon",
              "Pet Boarding & Grooming",
              "Roadside Market",
              "Car Wash - Automated",
              "Car Wash - Self-Serve",
              "Cannabis Dispensary",
              "Commercial Office (General)",
              "Professional Bldg (legal; insurance; real estate; business)",
              "Professional Bldg (multi-story)",
              "Office Bldg (General)",
              "Office Bldg (multi-story)",
              "Dental Bldg",
              "Medical Bldg/Clinic",
              "Financial Bldg (Bank, S&L; Mtge; Loan; Credit)",
              "Condominium Offices",
              "Skyscraper/Highrise (Commercial Offices)",
              "Commercial/Industrial (mixed use)",
              "Common Area (commercial, not shopping center or Association Asmnt.)",
              "Mobile Commercial Units",
              "Recreational/Entertainment (General)",
              "Recreation Center",
              "Public Swimming Pool",
              "Boat Slips, Marina, Yacht Club (recreation/pleasure), Boat Landing",
              "Bowling Alley",
              "Arcades (Amusement)",
              "Skating rink, Ice Skating, Roller Skating",
              "Clubs, Lodges, Professional Associations",
              "Museums, Library, Art Gallery (Recreational)",
              "Country Club",
              "Stadiums",
              "Arenas, Convention Center",
              "Auditoriums",
              "Driving Range (Golf)",
              "Race track (auto; dog; horse)",
              "Gym, Health Spa",
              "Dance Hall",
              "Riding Stable, Trails",
              "Campground, RV Park",
              "Fairgrounds",
              "Theater",
              "Drive-In Theater",
              "Amusement Park, Tourist Attraction",
              "Piers, Wharf (Recreation)",
              "Fish Camps, Game Club, Target Shooting",
              "Outdoor Recreation: Beach, Mountain, Desert",
              "Pool Hall, Billiard Parlor",
              "Park, Playground, Picnic Area",
              "Golf Course",
              "Racquet Court, Tennis Court",
              "Zoo",
              "Go-carts, Miniature Golf, Water slides",
              "Sports Complex",
              "Industrial (General)",
              "Manufacturing (light)",
              "Light Industrial (10% improved office space; Machine Shop)",
              "Warehouse (Industrial)",
              "Storage yard, Open Storage (light equipment, material)",
              "Food Packing, Packing Plant (fruit; vegetable; meat, dairy)",
              "Assembly (light industrial)",
              "Food Processing (candy; bakery; potato chips)",
              "Recycling (metal; paper; glass; etc.)",
              "Communications (see 6500 series)",
              "Condominiums (Industrial)",
              "R&D Facility, Laboratory, Research Facility, Cosmetics, Pharmaceutical",
              "Industrial Park",
              "Multi-Tenant Industrial Bldg.",
              "Marine Facility/Boat Repairs (small craft or sailboat)",
              "Lumber & Wood Product Manufacturing (including furniture)",
              "Paper Product Manufacturing & related products",
              "Printing & Publishing (Light Industrial)",
              "Industrial Loft Building, Loft Building",
              "Construction/Contracting Services (Industrial)",
              "Common Area (Industrial)",
              "Heavy Industrial (General)",
              "Transportation",
              "Distribution Warehouse (Regional)",
              "Mining facility (oil; gas; mineral, precious metals)",
              "Storage yard (junk; auto wrecking, salvage)",
              "Distillery, Brewery, Bottling",
              "Refinery, Petroleum Products",
              "Mill (feed; grain; paper; lumber; textile; pulp)",
              "Factory (apparel, textile products, leather, medium mfg.)",
              "Processing Plant (minerals; cement; rock; gravel; glass; clay)",
              "Lumberyard, Building Materials",
              "Shipyard/Storage - Built or Repaired (seagoing vessels)",
              "Slaughter House, Stockyard",
              "Waste Disposal, Sewage (processing; disposal; storage; treatment)",
              "Quarries (sand; gravel; rock)",
              "Heavy Manufacturing",
              "Labor Camps (Industrial)",
              "Winery",
              "Chemical",
              "Foundry, Industrial Plant (metal; rubber; plastic)",
              "Cannery",
              "Bulk Storage, Tanks (gasoline, fuel, etc.)",
              "Grain Elevator",
              "Dump Site",
              "Cold Storage",
              "Sugar Refinery",
              "Transportation & Communications (General)",
              "Airport & related",
              "Railroad & related",
              "Freeways, State Hwys",
              "Roads, Streets, Bridges",
              "Bus Terminal",
              "Telegraph, Telephone",
              "Radio or TV Station",
              "Truck Terminal (Motor Freight)",
              "Cable TV Station",
              "Harbor & Marine Transportation",
              "Microwave",
              "Commercial Auto Transportation/Storage",
              "Pollution Control",
              "Cellular",
              "Agricultural / Rural (General)",
              "Farm (Irrigated or Dry)",
              "Ranch",
              "Range land (grazing)",
              "Crop land, Field Crops, Row Crops (all soil classes)",
              "Orchard (fruit; nut)",
              "Vineyard (Agricultural)",
              "Poultry Farm (chicken; turkey; fish; bees; rabbits)",
              "Dairy Farm",
              "Timberland, Forest, Trees (Agricultural)",
              "Wildlife (Refuge)",
              "Desert or Barren Land",
              "Pasture, Meadow",
              "Misc. Structures - Ranch, Farm, Fixtures",
              "Grove (Agricultural)",
              "Feedlots",
              "Livestock parcel",
              "Horticulture, Growing Houses, Ornamental (Agricultural)",
              "Well Site (Agricultural)",
              "Truck Crops (tobacco; cash crops)",
              "Reservoir, Water Supply",
              "Irrigation, Flood Control",
              "Natural Resources",
              "Rural Improved / Non-Residential",
              "Cannabis Grow Facility",
              "Vacant Land (General)",
              "Residential-Vacant Land",
              "Commercial-Vacant Land",
              "Industrial-Vacant Land",
              "Private Preserve, Open Space-Vacant Land (Forest Land, Conservation)",
              "Institutional-Vacant Land",
              "Government-Vacant Land",
              "Multi-Family-Vacant Land",
              "Rural/Agricultural-Vacant Land",
              "Waste Land, Marsh, Swamp, Submerged-Vacant Land",
              "Recreational-Vacant Land",
              "Water Area (Lakes; River; Shore)-Vacant Land",
              "Unusable Land (Remnant, Steep, etc.)",
              "Abandoned Site, Contaminated Site",
              "Under Construction",
              "Vacant Land - Destroyed/Uninhabitable Improvement",
              "Vacant Land - Unspecified Improvement",
              "Vacant Land - Exempt",
              "Special Purpose",
              "State Board of Equalization - Special Assessments",
              "Regulating Districts & Assessments; Tax Abatement",
              "Redevelopment Agency or Zone",
              "Centrally Assessed",
              "Exempt (full or partial)",
              "Native American Lands / American Indian Lands",
              "Institutional (General)",
              "Religious, Church, Worship (Synagogue, Temple, Parsonage)",
              "Parochial School, Private School",
              "College, University, Vocational school-PRIVATE",
              "Hospital-PRIVATE",
              "Medical Clinic",
              "Homes (retired; handicap, rest; convalescent; nursing)",
              "Children's Home, Orphanage",
              "Cemetery (Exempt)",
              "Crematorium, Mortuary (Exempt)",
              "Charitable organization, Fraternal",
              "Recreational Non-Taxable (Camps, Boy/Girl Scouts)",
              "Private Utility (electric, water, gas, nuclear, solar, wind, etc.)",
              "Governmental/Public Use (General)",
              "Military (office; base; post; port; reserve; weapon range; test sites)",
              "Forest (park; reserve; recreation, conservation)",
              "Public School (administration; campus; dorms; instruction)",
              "Colleges, University-PUBLIC",
              "Post Office",
              "Cultural, Historical (monuments; homes; museums; other)",
              "Govt. Administrative Office (Federal; State; Local; Court House)",
              "Emergency (Police; Fire; Rescue; Shelters, Animal Shelter)",
              "Other exempt property",
              "City, Municipal, Town, Village Owned (Exempt)",
              "County Owned (Exempt)",
              "State Owned (Exempt)",
              "Federal Property (Exempt)",
              "Public Health Care Facility (Exempt)",
              "Community Center (Exempt)",
              "Public Utility (electric, water, gas, nuclear, solar, wind, etc.)",
              "Welfare, Social Service, Low Income Housing (Exempt)",
              "Correctional Facility, Jails, Prisons, Insane Asylum",
              "Hospital-PUBLIC",
              "Historical-PRIVATE (General)",
              "Historical Residence",
              "Historical Retail",
              "Historical Warehouse",
              "Historical Office",
              "Historical Transient Lodging (hotel/motel)",
              "Historical Recreation, Entertainment",
              "Historical Park / Site",
              "Historical District"
            ],
            "example": "Single Family Residential"
          },
          "airConditioning": {
            "type": "string",
            "description": "The type of air conditioning system on the property. Returns null if unknown or no air conditioning is present.",
            "enum": [
              "Central",
              "Evaporative Cooler",
              "Office only",
              "Geo-Thermal",
              "Packaged Unit",
              "Window Unit",
              "None",
              "Other",
              "Partial",
              "Chilled Water",
              "Refrigeration",
              "Ventilation",
              "Wall",
              "Yes"
            ],
            "example": "Central"
          },
          "basement": {
            "type": "string",
            "description": "The type of basement of the property. Returns null if unknown or no basement is present.",
            "enum": [
              "Basement (not specified)",
              "Daylight, Full",
              "Full Basement",
              "Improved Basement (Finished)",
              "Daylight, Partial",
              "No Basement",
              "Partial Basement",
              "Unfinished Basement",
              "Daylight / Walkout"
            ],
            "example": "Unfinished Basement"
          },
          "totalArea": {
            "type": "number",
            "format": "double",
            "description": "The total area of all buildings on this property in square feet.",
            "example": 4145
          },
          "buildingClass": {
            "type": "string",
            "description": "The construction class for the buildings on this property. Note that \"Building Class\" is returned for developer data only.",
            "enum": [
              "Buildings having fireproofed structural steel frames carrying all wall, floor and roof loads.  Wall, floor and roof structures are built of non-combustible materials.",
              "Buildings having fireproofed reinforced concrete frames carrying all wall, floor and roof loads which are all non-combustible.",
              "Buildings having exterior walls built of a non-combustible material such as brick, concrete, block or poured concrete.  Interior partitions and roof structure are built of combustible materials.  Floor may be concrete or wood frame.",
              "Buildings having wood or wood and steel frames.",
              "Specialized buildings that do not fit in any of the above categories.",
              "Building Class"
            ],
            "example": "Buildings having wood or wood and steel frames."
          },
          "buildingCondition": {
            "type": "string",
            "description": "The known qualitative condition of the building(s) at this location.",
            "enum": [
              "Excellent",
              "Fair",
              "Good",
              "Poor",
              "Unsound",
              "Average"
            ],
            "example": "Good"
          },
          "buildingQuality": {
            "type": "string",
            "description": "The quality of construction and finishes as a letter grade (A-F).",
            "enum": [
              "A",
              "A-",
              "A+",
              "B",
              "B-",
              "B+",
              "C",
              "C-",
              "C+",
              "D",
              "D-",
              "D+",
              "E",
              "E-",
              "E+"
            ],
            "example": "B+"
          },
          "garageType": {
            "type": "string",
            "description": "The type of garage.",
            "enum": [
              "Attached Garage",
              "Built-in",
              "Carport",
              "Detached Garage",
              "Pole",
              "Offsite",
              "Garage",
              "Heated",
              "Unfinished - Attached",
              "Unfinished - Detached",
              "Unimproved",
              "Parking Lot",
              "Mixed",
              "None",
              "Open",
              "Paved/Surfaced",
              "Ramp",
              "Parking Structure",
              "Tuckunder",
              "Underground/Basement",
              "Covered",
              "Finished - Attached",
              "Finished - Detached",
              "Finished"
            ],
            "example": "Attached Garage"
          },
          "garageNumCars": {
            "type": "number",
            "format": "double",
            "description": "The number of spaces for cars in the garage.",
            "example": 2
          },
          "lotSize": {
            "type": "number",
            "format": "double",
            "description": "The size of the lot in square feet.",
            "example": 7096
          },
          "bathrooms": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of full bathrooms.",
            "example": 2
          },
          "partialBathrooms": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of partial bathrooms.",
            "example": 1
          },
          "bedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of bedrooms.",
            "example": 4
          },
          "totalRooms": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of rooms.",
            "example": 11
          },
          "stories": {
            "type": "integer",
            "format": "int32",
            "description": "The number of floors.",
            "example": 2
          },
          "pool": {
            "type": "string",
            "description": "The type of pool, if a pool is present on the property. Returns null if no pool is present, or unknown.",
            "enum": [
              "Above-Ground Pool",
              "Pool & Spa (both)",
              "Community Pool or Spa",
              "Enclosed",
              "In-Ground Pool",
              "Heated Pool",
              "Indoor Swimming Pool",
              "Solar Heated",
              "Pool (yes)",
              "Spa or Hot Tub (only)",
              "Vinyl In-Ground Pool",
              "Pool, historical value, no longer in use (refer to code P). Code phased out 2017."
            ],
            "example": "Heated Pool"
          },
          "roofType": {
            "type": "string",
            "description": "The shape, style, or construction of the roof.",
            "enum": [
              "Gable",
              "Bowstring Truss",
              "Reinforced Concrete",
              "Dome",
              "Steel Frame/Truss",
              "Flat",
              "Gable or Hip",
              "Hip",
              "IRR/Cathedral",
              "Gambrel",
              "Mansard",
              "Prestress Concrete",
              "Rigid Frame Bar Joist",
              "Shed",
              "Sawtooth",
              "Wood Truss"
            ],
            "example": "Hip"
          },
          "roofCovering": {
            "type": "string",
            "description": "The material used to cover the roof.",
            "enum": [
              "Ceramic tile",
              "Clay tile",
              "Concrete tile",
              "Copper",
              "Tin",
              "Asbestos",
              "Built-Up",
              "Composition Shingle",
              "Concrete",
              "Metal",
              "Slate",
              "Rock / Gravel",
              "Tar & Gravel",
              "Bermuda",
              "Masonite/ Cement Shake",
              "Fiberglass",
              "Aluminum",
              "Wood Shake/ Shingles",
              "Other",
              "Asphalt",
              "Roll Composition",
              "Steel",
              "Tile",
              "Urethane",
              "Shingle (Not Wood)",
              "Wood",
              "Gypsum",
              "Solar"
            ],
            "example": "Solar"
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "description": "The year of occupation certificate.",
            "example": 2003
          },
          "heatingType": {
            "type": "string",
            "description": "The type of heating and/or heating fuel.",
            "enum": [
              "Baseboard",
              "Electric",
              "Central",
              "Forced Air Unit",
              "Oil",
              "Floor/Wall",
              "Gravity",
              "Heat Pump",
              "Geo-Thermal",
              "Hot Water",
              "Gas",
              "Partial",
              "Radiant",
              "None",
              "Other",
              "Steam",
              "Coal",
              "Space/Suspended",
              "Convection",
              "Solar",
              "Vent",
              "Wood Burning",
              "Propane",
              "Yes",
              "Zone"
            ],
            "example": "Baseboard"
          },
          "heatingFuelType": {
            "type": "string",
            "description": "The type of fuel used for heating.",
            "enum": [
              "Butane",
              "Coal",
              "Electric",
              "Gas",
              "Geo-Thermal",
              "None",
              "Oil",
              "Propane",
              "Solar",
              "Wood"
            ],
            "example": "Geo-Thermal"
          },
          "construction": {
            "type": "string",
            "description": "The construction type.",
            "enum": [
              "Adobe",
              "Brick",
              "Concrete",
              "Concrete Block",
              "Dome",
              "Frame",
              "Heavy",
              "Light",
              "Log",
              "Manufactured",
              "Other",
              "Masonry",
              "Metal",
              "Steel",
              "Stone",
              "Tilt-Up (pre-cast concrete)",
              "Wood",
              "Mixed"
            ],
            "example": "Frame"
          },
          "units": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of units.",
            "example": 2
          },
          "ownerOccupied": {
            "type": "string",
            "description": "The status of owner occupation. Returns null if the property is not owner occupied.",
            "enum": [
              "Probable owner-occupied property - no property address and mailing address within County. (Improved Residential)",
              "Owner-occupied property (SFR/Condo)"
            ],
            "example": "Owner-occupied property (SFR/Condo)"
          },
          "ownerName": {
            "type": "string",
            "description": "The name(s) of current owners(s) of this property.",
            "example": "SMITH, VANESSA THOMAS; LOPEZ, MARIA"
          },
          "buildings": {
            "type": "integer",
            "format": "int32",
            "description": "The number of buildings on the property. A return of 0 indicates an unknown number.",
            "example": 1
          },
          "exteriorWall": {
            "type": "string",
            "description": "The exterior wall material",
            "enum": [
              "EIFS / Synthetic Stucco",
              "Fiber cement siding (Hardi-board/Hardi-plank)",
              "Aluminum siding",
              "Vinyl siding",
              "Concrete tile",
              "Clay tile",
              "Ceramic tile",
              "Asbestos Shingle",
              "Brick",
              "Brick Veneer",
              "Block",
              "Composition/Composite",
              "Concrete",
              "Concrete Block",
              "Glass",
              "Log",
              "Metal",
              "Rock, Stone",
              "Stucco",
              "Tile",
              "Tilt-up (pre-cast concrete)",
              "Other",
              "Wood Shingle",
              "Wood",
              "Wood Siding",
              "Siding (Alum/Vinyl)",
              "Adobe",
              "Shingle (Not Wood)",
              "Marble",
              "Combination",
              "Masonry",
              "Siding (not specified)"
            ],
            "example": "Wood"
          },
          "foundation": {
            "type": "string",
            "description": "The construction type of the building foundation.",
            "enum": [
              "Concrete",
              "Crawl/Raised",
              "Crossed Walls",
              "Masonry",
              "Earth",
              "Mud Sill",
              "Stone",
              "Brick",
              "Concrete Block",
              "Piling",
              "Other",
              "Piers",
              "Open Piers",
              "Retaining Wall",
              "Slab",
              "Footing",
              "Wood",
              "Closed Piers"
            ],
            "example": "Slab"
          },
          "architecturalStyle": {
            "type": "string",
            "description": "The architectural style of the building.",
            "enum": [
              "Traditional/Old",
              "European",
              "Mobile/Manufactured",
              "Tiny House",
              "A-Frame",
              "Bungalow",
              "Cape Cod",
              "Colonial",
              "English",
              "French Provincial",
              "Georgian",
              "High-rise",
              "Modern",
              "Ranch/Rambler",
              "Spanish",
              "Tudor",
              "Mediterranean",
              "Conventional",
              "Other",
              "Prefab, Modular",
              "Mansion",
              "Raised Ranch",
              "Dome",
              "Contemporary",
              "Unfinished/Under Construction",
              "Victorian",
              "Cottage",
              "Custom",
              "Log Cabin/Rustic",
              "Historical"
            ],
            "example": "Ranch/Rambler"
          }
        }
      },
      "ClimateRisk": {
        "type": "object",
        "properties": {
          "temperatureProfile": {
            "$ref": "#/components/schemas/TemperatureProfile",
            "description": "Data on the annual and seasonal expected temperatures at this location."
          },
          "snowProfile": {
            "$ref": "#/components/schemas/SnowProfile",
            "description": "Data on the annual and seasonal expected snowfall at this location."
          },
          "averageAnnualPrecipitationInches": {
            "type": "number",
            "format": "double",
            "description": "The average annual precipitation in inches (up to two decimal places of precision) at this location."
          },
          "potentialMaxPrecipitationInches": {
            "type": "number",
            "format": "double",
            "description": "The potential maximum precipitation in inches in a given year."
          },
          "hardinessZone": {
            "type": "string",
            "description": "The USDA-determined categorization for the range of climate conditions that determine plant growth and survival at this location."
          },
          "hardinessZoneSegment": {
            "type": "string",
            "description": "The precise definition of the segment of the hardiness zone (returned as hardinessZone) at this location.",
            "enum": [
              "a",
              "b"
            ]
          },
          "moldIndex": {
            "type": "number",
            "format": "double",
            "description": "The representative composite rating of the level of mold occurring at this location. Returns a value within the range of 0 to 5000, with higher values indicating higher mold risk."
          },
          "moldRisk": {
            "type": "string",
            "description": "The likelihood of a mold issue occurring, based on geographic and climatic conditions, at this location.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "frozenPipeIndex": {
            "type": "number",
            "format": "double",
            "description": "The representative composite rating for the level of freezing plumbing occurring at this location. Returns a value within the range of 0 to 200, with higher numbers indicating a higher risk for frozen pipes."
          },
          "frozenPipeRisk": {
            "type": "string",
            "description": "The likelihood that the subject address would experience frozen plumbing pipes based on geographic and climatic conditions.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "iceDamIndex": {
            "type": "number",
            "format": "double",
            "description": "The representative composite rating for the level of ice dam issues occurring at this location. Returns a value within the range of 0 to 400, with higher numbers indicating higher risk."
          },
          "iceDamRisk": {
            "type": "string",
            "description": "The likelihood that the subject address would experience ice dams, based on geographic and climatic conditions.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "snowLoadScale": {
            "type": "integer",
            "format": "int32",
            "description": "The scale of snow load at this location. Returns a value within the range of 0 to 100, with higher numbers indicating a higher snow load."
          },
          "snowLoadRisk": {
            "type": "string",
            "description": "The likelihood that the subject address would experience a snow load risk, based on geographic and climatic conditions.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "snowLoadDescription": {
            "type": "string",
            "description": "The description of the snow load."
          }
        }
      },
      "CoastalBarrierResourcesSystem": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "One of two values, IN or OUT, describing if the location is within a CBRS unit.",
            "enum": [
              "IN",
              "OUT",
              "Unknown"
            ]
          },
          "unitDesignation": {
            "type": "string",
            "description": "The CBRS unit number in _AAnna_ format."
          },
          "unitName": {
            "type": "string",
            "description": "The name of the CBRS unit."
          },
          "type": {
            "type": "string",
            "description": "The type of the CBRS unit.",
            "enum": [
              "System Unit",
              "Otherwise Protected Area",
              "Unknown"
            ]
          },
          "floodInsuranceProhibitionDate": {
            "type": "string",
            "format": "date",
            "description": "The CBRS insurance prohibition date. Structures built and permitted after this date cannot purchase or renew federal flood insurance."
          },
          "unitEstablishmentDate": {
            "type": "string",
            "format": "date",
            "description": "The date that the CBRA established the unit on which the property of interest is located."
          },
          "fastAcres": {
            "type": "number",
            "format": "double",
            "description": "The total acres of dry land in the CBRS unit."
          },
          "wetAcres": {
            "type": "number",
            "format": "double",
            "description": "The total acres of land underwater in the CBRS unit."
          },
          "shoreLineMiles": {
            "type": "number",
            "format": "double",
            "description": "The total number of shoreline miles for the CBRS unit."
          }
        }
      },
      "CoastalRisk": {
        "type": "object",
        "properties": {
          "hurricane": {
            "type": "string"
          },
          "tsunami": {
            "type": "string"
          },
          "windPoolZone": {
            "type": "string"
          },
          "windPoolRisk": {
            "type": "string"
          },
          "windBorneDebrisZone": {
            "type": "string"
          },
          "coastDistanceFeet": {
            "type": "number",
            "format": "double"
          },
          "beachDistanceFeet": {
            "type": "number",
            "format": "double"
          },
          "surgeMax": {
            "$ref": "#/components/schemas/SurgeMax"
          },
          "cbrs": {
            "$ref": "#/components/schemas/CoastalBarrierResourcesSystem"
          },
          "enhancedHurricane": {
            "$ref": "#/components/schemas/EnhancedHurricane"
          }
        }
      },
      "CrimeRisk": {
        "type": "object",
        "description": "Information about the likelihood of the occurrence of specific crimes associated with the location of interest. Numerical values are based on projected FBI crime statistics and represent a percentage of the median expected rate of crime occurrence. Scores are from 0 - 200, with higher numbers representing a higher crime rate. The US median crime rate is 100 for all scores.",
        "properties": {
          "crimeScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for overall crime. Returns an integer value within the range of 0 to 200."
          },
          "murderRisk": {
            "type": "string",
            "description": "A text description of the likelihood of murder in this area. Values are graded into; Very low murder rate, Low murder rate, Average murder rate, High murder rate, Medium high murder rate, Very high murder rate."
          },
          "murderScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for murder crime. Returns an integer value within the range of 0 to 200."
          },
          "forcibleRapeRisk": {
            "type": "string",
            "description": "A text description of the likelihood of forcible rape in this area. Values are graded into Very low forcible rape rate, Low forcible rape rate, Average forcible rape rate, High forcible rape rate, Medium high forcible rape rate, Very high forcible rape rate."
          },
          "forcibleRapeScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for forcible rape crime. Returns an integer value within the range of 0 to 200."
          },
          "forcibleRobberyRisk": {
            "type": "string",
            "description": "A text description of the likelihood of forcible robbery in this area. Values are graded into Very low forcible robbery rate, Low forcible robbery rate, Average forcible robbery rate, High forcible robbery rate, Medium high forcible robbery rate, Very high forcible robbery rate."
          },
          "forcibleRobberyScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for forcible robbery crime. Returns an integer value within the range of 0 to 200."
          },
          "aggravatedAssaultRisk": {
            "type": "string",
            "description": "A text description of the likelihood of aggravated assault in this area. Values are graded into Very low aggravated assault rate, Low aggravated assault rate, Average aggravated assault rate, High aggravated assault rate, Medium high aggravated assault rate, Very high aggravated assault rate."
          },
          "aggravatedAssaultScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for aggravated assault crime."
          },
          "burglaryRisk": {
            "type": "string",
            "description": "A text description of the likelihood of burglary in this area. Values are graded into Very low burglary rate, Low burglary rate, Average burglary rate, High burglary rate, Medium high burglary rate, Very high burglary rate."
          },
          "burglaryScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for burglary crime."
          },
          "larcenyRisk": {
            "type": "string",
            "description": "A text description of the likelihood of larceny in this area. Values are graded into Very low larceny rate, Low larceny rate, Average larceny rate, High larceny rate, Medium high larceny rate, Very high larceny rate."
          },
          "larcenyScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for larceny crime. Returns an integer value within the range of 0 to 200."
          },
          "motorVehicleTheftRisk": {
            "type": "string",
            "description": "A text description of the likelihood of motor vehicle theft in this area. Values are graded into Very low motor vehicle theft rate, Low motor vehicle theft rate, Average motor vehicle theft rate, High motor vehicle theft rate, Medium high motor vehicle theft rate, Very high motor vehicle theft rate."
          },
          "motorVehicleTheftScore": {
            "type": "integer",
            "format": "int32",
            "description": "The score for motor vehicle theft crime. Returns an integer value within the range of 0 to 200."
          },
          "drugAlcoholDeathsRisk": {
            "type": "string",
            "description": "A text description of the frequency of alcohol and drug related deaths within the location's county per 100,000 people. Values are graded into VERY LOW, LOW, BELOW AVERAGE, ABOVE AVERAGE, HIGH, VERY HIGH."
          },
          "numDrugAlcoholDeaths": {
            "type": "integer",
            "format": "int32",
            "description": "Number of alcohol- and drug-related deaths in the location's county."
          },
          "drugAlcoholDeathsRate100k": {
            "type": "number",
            "format": "double",
            "description": "The rate of drug and alcohol deaths per 100,000 people in the location's county."
          },
          "crimeRisk": {
            "type": "string",
            "description": "A text description of the relative overall likelihood of crime in this area. Values graded into Very low crime rate, Low crime rate, Average crime rate, High crime rate, Medium high crime rate, Very high crime rate."
          }
        }
      },
      "Earthquake": {
        "type": "object",
        "description": "The earthquake risk and input to risk models related to earthquakes.",
        "properties": {
          "risk": {
            "type": "string",
            "description": "A qualitative description of the expected damage from an earthquake at this location.",
            "enum": [
              "None",
              "Very Light Damage",
              "Light Damage",
              "Moderate Damage",
              "Moderate/Heavy Damage",
              "Heavy Damage",
              "Very Heavy Damage"
            ],
            "example": "Moderate/Heavy Damage"
          },
          "mmi": {
            "type": "integer",
            "format": "int32",
            "description": "The modified Mercalli Intensity value of potential earthquake at this location.",
            "example": 8,
            "maximum": 12,
            "minimum": 1
          },
          "mmiText": {
            "type": "string",
            "description": "The text description of the Modified Mercalli Intensity value in `mmi`.",
            "enum": [
              "Not felt",
              "Weak",
              "Light",
              "Moderate",
              "Strong",
              "Very strong",
              "Severe",
              "Violent",
              "Extreme",
              "Catastrophe",
              "Enormous Catastrophe"
            ],
            "example": "Severe"
          },
          "richterRange": {
            "type": "string",
            "description": "The range of Richter values for potential earthquakes at this location",
            "example": 5.2
          },
          "faultDistance": {
            "type": "string",
            "description": "The distance to the nearest fault (including units) from this location.",
            "example": 0.95
          },
          "faultName": {
            "type": "string",
            "description": "The name of the nearest fault to this location.",
            "example": "Unknown Fault in CA"
          },
          "usgsFaultZone": {
            "type": "string",
            "description": "Whether this location is in or out of a USGS Designated Fault Zone in the eastern US, such as the Eastern Tennessee Seismic Zone",
            "enum": [
              "In USGS Designated Eastern Fault Zone",
              "Not in USGS Designated Eastern Fault Zone"
            ],
            "example": "Not in USGS Designated Eastern Fault Zone"
          },
          "frackingEarthquakeZone": {
            "type": "string",
            "description": "A text description of if the location is in an area prone to earthquakes from hydraulic fracturing activity. Returns null if this location is outside areas of such activity",
            "example": "Potential for Induced Earthquake"
          }
        }
      },
      "EnhancedHurricane": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The overall risk of hurricane occurrences at this location."
          },
          "eventsSince1980": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of named hurricanes occurring at this location since 1980."
          },
          "averageWindSpeedKnots": {
            "type": "number",
            "format": "double",
            "description": "The average wind speed, in knots, of hurricanes occurring at this location."
          },
          "maxWindSpeedKnots": {
            "type": "number",
            "format": "double",
            "description": "The maximum recorded barometric pressure, in millibars, occurring during a hurricane at this location."
          },
          "averageBarometricPressureMb": {
            "type": "number",
            "format": "double",
            "description": "The average barometric pressure, in millibars, occurring at this location."
          },
          "minBarometricPressureMb": {
            "type": "number",
            "format": "double",
            "description": "The minimum recorded barometric pressure, in millibars, occurring during a hurricane at this location."
          },
          "eventsWindGreaterThan50Knots": {
            "type": "integer",
            "format": "int32",
            "description": "The total recorded number of wind events over 50 knots at this location."
          },
          "eventsPressureLessThan950Mb": {
            "type": "integer",
            "format": "int32",
            "description": "The total recorded number of wind events with a barometric pressure less than 950 millibars at this location."
          },
          "tropicalWaves": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of tropical wave weather events occurring at this location."
          },
          "disturbances": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of tropical weather system events occurring at this location."
          },
          "extratropicalSystems": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of extra-tropical weather system events occurring at this location."
          },
          "lows": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of low barometric pressure weather events occurring at this location."
          },
          "subtropicalDepressions": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of subtropical depression weather events occurring at this location."
          },
          "subtropicalStorms": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of subtropical storms occurring at this location."
          },
          "tropicalDepressions": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of tropical depression weather events occurring at this location."
          },
          "tropicalStorms": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of storms occurring at this location."
          },
          "hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The yearly number of hurricanes occurring at this location."
          },
          "cat0Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 0 occurring at this location."
          },
          "cat1Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 1 occurring at this location."
          },
          "cat2Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 2 occurring at this location."
          },
          "cat3Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 3 occurring at this location."
          },
          "cat4Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 4 occurring at this location."
          },
          "cat5Hurricanes": {
            "type": "integer",
            "format": "int32",
            "description": "The average annual number of hurricanes of category 5 occurring at this location."
          },
          "maxWindEvent": {
            "$ref": "#/components/schemas/Event",
            "description": "The hurricane event with the highest wind speeds recorded at this location since 1980."
          },
          "minPressureEvent": {
            "$ref": "#/components/schemas/Event",
            "description": "The hurricane event with the lowest barometric pressure recorded at this location since 1980."
          },
          "eventsWindGreaterThan50KnotsPerYear": {
            "type": "number",
            "format": "double",
            "description": "The yearly average number of weather events having speeds over 50 knots at this location."
          },
          "eventsPressureLessThan950MbPerYear": {
            "type": "number",
            "format": "double",
            "description": "The yearly average number of weather events having barometric pressure of fewer than 950 milibars at this location."
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The hurricane's name"
          },
          "date": {
            "type": "integer",
            "format": "int32",
            "description": "The year of the named hurricane in YYYY format."
          }
        }
      },
      "FemaFlood": {
        "type": "object",
        "description": "Flood data based on FEMA Flood maps for the location of interest.",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The text description of the flood risk at this location based on FEMA flood maps.",
            "example": "Covered by FEMA digital maps. Minimal to No Risk of Flooding"
          },
          "zone": {
            "type": "string",
            "description": "The FEMA flood zone classification for this location.",
            "example": "X"
          },
          "mapId": {
            "type": "string",
            "description": "The FEMA flood map identifier for this location.",
            "example": "08013C"
          },
          "areaId": {
            "type": "string",
            "description": "The FEMA flood area identifier for this location.",
            "example": "08013C-2530"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "The effective date for this location's FEMA flood map.",
            "example": "2019-05-01"
          },
          "claimsInTract": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of FEMA claims by year for the Census Tract containing this location."
          },
          "floodMapUrl": {
            "type": "string",
            "description": "URL for [FEMA Flood map](https://msc.fema.gov/portal/home) for this location"
          }
        }
      },
      "FireRisk": {
        "type": "object",
        "properties": {
          "protectionClass": {
            "type": "string",
            "description": "The rating of fire protection for this location based on the AAIS methodology. The trailing integer of the returned value represents the distance in miles to the nearest responding fire station.",
            "enum": [
              "P1",
              "P2",
              "P3",
              "P4",
              "P5",
              "PP1",
              "PP2",
              "PP3",
              "PP4",
              "PP5",
              "U"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the inputs used to determine the protection class."
          },
          "propertyFireScore": {
            "type": "string",
            "description": "A measurement of risk to an individual property based on a proprietary methodology. Returns a value ranging from HH1 to HH12, with HH1 indicating the the property has the best protection from fire damage."
          },
          "waterScore": {
            "type": "string",
            "description": "A score of water supply reliability at this location. Returns a value of HX 1-5 or PX 1-5, indicating the water source type (hydrant or perennial, respectively) and the distance to the water source. Lower numbers indicate a closer water source."
          },
          "averagePercentLoss": {
            "type": "number",
            "format": "double",
            "description": "The expected fire loss expressed as a percentage of the building's value for this location."
          },
          "expectedLoss": {
            "type": "number",
            "format": "double",
            "description": "The expected loss from a fire at this location based on the building's value and the average percent loss for a fire at this location (buildingValue * averagePercentLoss)."
          },
          "perennialWaterStatus": {
            "type": "string",
            "description": "The availability of running water in lakes, perennial streams, and large rivers."
          },
          "perennialWaterName": {
            "type": "string",
            "description": "The type of the perennial water source for this location, e.g., stream, river, lake, pond"
          },
          "availableWaterType": {
            "type": "string",
            "description": "The type of available water for this location.",
            "enum": [
              "Hydrant",
              "Incorporated Place",
              "Perennial water",
              "null"
            ]
          },
          "hydrantStatus": {
            "type": "string",
            "description": "The status of the hydrant data collection for this location."
          },
          "hydrantsWithin1KFeet": {
            "type": "integer",
            "format": "int32",
            "description": "The number of hydrants within 1,000 feet."
          },
          "fireStationsWithin5Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of fire stations located within 5 miles of the property."
          },
          "fireStationsWithin10Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of fire stations located within 10 miles of the property."
          },
          "aais": {
            "$ref": "#/components/schemas/AAIS",
            "description": "The data used to determine the fire protection class using the AAIS methodology."
          },
          "fireStations": {
            "type": "array",
            "description": "An array of the three closest fire stations to the location, in order from nearest to furthest.",
            "items": {
              "$ref": "#/components/schemas/FireStation"
            }
          }
        }
      },
      "FireStation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the fire department and fire station at the location."
          },
          "type": {
            "type": "string",
            "description": "The type of staffing at this fire station.",
            "enum": [
              "paid",
              "volunteer",
              "blended"
            ]
          },
          "responseArea": {
            "type": "string",
            "description": "The geographical area covered by this fire station"
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "The longitude, in degrees, minutes, and seconds for this fire station."
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "The latitude, in degrees, minutes, and seconds for this fire station."
          },
          "distanceMiles": {
            "type": "number",
            "format": "double",
            "description": "The number of miles from the location of interest to this fire station."
          },
          "driveDistanceMiles": {
            "type": "number",
            "format": "double",
            "description": "The number of miles from the location to this fire station using roads."
          },
          "driveTimeMinutes": {
            "type": "number",
            "format": "double",
            "description": "The average number of minutes it takes to travel from the location of interest to this fire station."
          }
        }
      },
      "FloodRisk": {
        "type": "object",
        "properties": {
          "femaFlood": {
            "$ref": "#/components/schemas/FemaFlood",
            "description": "Information about the location of interest, based on FEMA flood information."
          },
          "floodGrade": {
            "type": "string",
            "description": "The letter grade for flood risk based on a proprietary methodology. A value of \"A\" is the lowest risk, \"F\" ie the highest",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "F"
            ],
            "example": "C"
          },
          "floodDescription": {
            "type": "string",
            "description": "The text description of the `floodGrade` value",
            "example": "Moderate risk of flood damage"
          },
          "hundredYearFloodPlainDistance": {
            "type": "string",
            "description": "The distance from this location to the closest 100-year flood plain, including units. The value is null if no 100 year flood plain is within range.",
            "example": 285
          },
          "hundredYearFloodPlainElevationFeet": {
            "type": "number",
            "format": "double",
            "description": "the elevation of the closest 100-year flood plain to this location, in feet. The value is 0 if no 100 year flood plain is within range.",
            "example": 285
          },
          "baseFloodElevation": {
            "type": "string",
            "description": "The description of the distance to and elevation of the base flood elevation for this location. The base flood elevation is a FEMA term that represents the elevation of surface water resulting from a flood that has a 1% chance of equaling or exceeding that level in any given year",
            "example": 0.068
          },
          "potentialMaximumPrecipitation": {
            "type": "number",
            "format": "double",
            "description": "The maximum 24 hour rainfall amount in inches, based on 500-year model",
            "example": 7.07
          },
          "catastrophicFloodGrade": {
            "type": "string",
            "description": "The grade for catastrophic flood risk based on a proprietary methodology. A value of \"A\" is the lowest risk, \"F\" ie the highest",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "F"
            ],
            "example": "C"
          },
          "catastrophicFloodDescription": {
            "type": "string",
            "description": "The text description of the `catastrophicFloodGrade` value",
            "example": "Moderate risk of flood damage"
          },
          "potentialMaximumCatastrophicPrecipitation": {
            "type": "number",
            "format": "double",
            "description": "The maximum catastrophic 24 hour rainfall amount in inches, based on 1000-year model",
            "example": 14.14
          }
        }
      },
      "GeologyRisk": {
        "type": "object",
        "description": "Information about the likelihood of different geological phenomena.",
        "properties": {
          "earthquake": {
            "$ref": "#/components/schemas/Earthquake",
            "description": "The on an earthquake risk at the location."
          },
          "mudslide": {
            "type": "string",
            "description": "A text description of the risk from mudslides.",
            "example": "< 500 feet from area of increased mudslide risk on steep slopes"
          },
          "landslide": {
            "type": "string",
            "description": "A text description of the risk from landslides.",
            "example": "In area where steep slopes have a moderate landslide incidence (1.5 - 15% of the area has landslide potential)."
          },
          "radon": {
            "type": "string",
            "description": "A text description of the risk due to radon.",
            "example": "Predicted average indoor radon screening levels greater than 4 pCi/L"
          },
          "sinkhole": {
            "$ref": "#/components/schemas/Sinkhole",
            "description": "The risk of a sinkhole at the location of interest."
          },
          "volcano": {
            "type": "string",
            "description": "A qualitative risk assessment of damage from volcanic activity.",
            "enum": [
              "Very Low",
              "Low",
              "Moderate",
              "High",
              "Very High"
            ],
            "example": "Very High"
          },
          "nearestVolcano": {
            "$ref": "#/components/schemas/Volcano",
            "description": "Information about the nearest volcano to this location."
          },
          "lavaFlow": {
            "type": "string",
            "description": "A qualitative risk assessment of damage from lava flow.",
            "enum": [
              "Very Low",
              "Low",
              "Moderate",
              "High",
              "Very High"
            ],
            "example": "High"
          },
          "lavaZone": {
            "type": "integer",
            "format": "int32",
            "description": "The numeric classification of the USGS Lava Flow Hazards Zones for this location. Non-zero only in Hawaii.",
            "example": 3,
            "externalDocs": {
              "description": "USGS website",
              "url": "https://www.usgs.gov/observatories/hawaiian-volcano-observatory/lava-flow"
            }
          },
          "lavaFlowDescription": {
            "type": "string",
            "description": "A text description of the USGS Lava Flow Hazards Zones for this location. Non-null only in Hawaii.",
            "example": "Areas less hazardous than zone 2 because of greater distance from recently active vents and (or) because of topography. 1-5% of zone 3 has been covered since 1800, and 15-75% has been covered within the past 750 years",
            "externalDocs": {
              "description": "USGS website",
              "url": "https://www.usgs.gov/observatories/hawaiian-volcano-observatory/lava-flow"
            }
          }
        }
      },
      "KentuckyPremiumTax": {
        "type": "object",
        "properties": {
          "countyId": {
            "type": "string",
            "description": "A proprietary County ID."
          },
          "countyName": {
            "type": "string",
            "description": "The County name."
          },
          "countyFips": {
            "type": "string",
            "description": "The Federal information Processing Standard county code."
          },
          "countyTaxAuthority": {
            "type": "string",
            "description": "The name of the County taxing authority."
          },
          "countyTaxAuthorityFips": {
            "type": "string",
            "description": "The unique Federal information Processing Standard county taxing authority code."
          },
          "countyTaxParameters": {
            "$ref": "#/components/schemas/TaxParameters",
            "description": "Additional tax parameter details for the county."
          },
          "municipalId": {
            "type": "string",
            "description": "A unique proprietary municipal ID code."
          },
          "municipalName": {
            "type": "string",
            "description": "The municipality name."
          },
          "municipalNotes": {
            "type": "string",
            "description": "The applicable notes for the municipality."
          },
          "municipalCounty": {
            "type": "string",
            "description": "The county that encompasses the municipality."
          },
          "stateCountyPlaceFips": {
            "type": "string",
            "description": "The unique Federal Information Processing Standard code for the state and county."
          },
          "municipalTaxAuthority": {
            "type": "string",
            "description": "The name of the applicable the municipal taxing authority name."
          },
          "municipalTaxAuthorityFips": {
            "type": "string",
            "description": "The unique Federal information Processing Standard municipal taxing authority code."
          },
          "municipalTaxParameters": {
            "$ref": "#/components/schemas/TaxParameters",
            "description": "Additional tax parameter details for the municipal area."
          }
        }
      },
      "Lightning": {
        "type": "object",
        "description": "Object that holds lightning-related risk parameters",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32",
            "description": "The numerical score representing risk from lightning strikes. Higher scores indicate higher risk of damage from lightning strikes. Possible values for the score range from **0 to 50**",
            "example": 35
          },
          "risk": {
            "type": "string",
            "description": "A qualitative ranking of the risk score.",
            "enum": [
              "Very Low",
              "Low",
              "Moderate",
              "High",
              "Very High"
            ],
            "example": "Moderate"
          },
          "predictedFutureEvents": {
            "type": "string",
            "description": "A statement containing the probability of lightning strikes in the future",
            "example": "95% chance of 6.238217 ground strikes in 1 year per square mile"
          },
          "strikesLastYear": {
            "type": "string",
            "description": "A statement containing the density of lightning strikes at this location in the past year",
            "example": 1958
          },
          "percentAnnualLikelihood": {
            "type": "number",
            "format": "double",
            "description": "The percentage value of the probability of lightning ground strike near this location in a one year period",
            "example": ".9876"
          }
        }
      },
      "Location": {
        "type": "object",
        "description": "General information about the input location",
        "properties": {
          "municipality": {
            "type": "string",
            "description": "The name of the municipality or place for the input location according to the US Census."
          },
          "placeCode": {
            "type": "string",
            "description": "The census code for the location."
          },
          "placeType": {
            "type": "string",
            "description": "The type of the place.",
            "example": "Incorporated"
          },
          "censusBlock": {
            "type": "string",
            "description": "The 15-digit Census Block identifier."
          },
          "stateName": {
            "type": "string",
            "description": "The full spelling of the state's name."
          },
          "countyName": {
            "type": "string",
            "description": "The county name for the location."
          },
          "schoolDistrict": {
            "type": "string",
            "description": "The school district associated with the location."
          },
          "elevationFeet": {
            "type": "number",
            "format": "double",
            "description": "The elevation, in feet, of the location."
          },
          "slope": {
            "type": "string",
            "description": "The ground incline of the property in degrees."
          },
          "aspectDirection": {
            "type": "string",
            "description": "The compass direction of the slope of the property."
          },
          "texasTerritory": {
            "type": "string",
            "description": "A two-digit territory code for locations in the state of Texas."
          },
          "texasName": {
            "type": "string",
            "description": "The territory name for locations in the state of Texas (if the location is is Texas)."
          },
          "floridaTerritory": {
            "type": "string",
            "description": "The territory name for the location in the state of Florida (if the location is in Flordia)."
          },
          "floridaName": {
            "type": "string",
            "description": "The territory name for the location in the state of Florida (if the location is in Flordia)."
          },
          "googleMapsUrl": {
            "type": "string",
            "format": "url",
            "description": "The Google Maps URL for the input address location."
          }
        }
      },
      "ManMadeRisk": {
        "type": "object",
        "properties": {
          "superfund": {
            "$ref": "#/components/schemas/RiskLocation",
            "description": "The distance to the nearest EPA-designated superfund site."
          },
          "brownfield": {
            "$ref": "#/components/schemas/RiskLocation",
            "description": "The location of the nearest EPA-designated brownfield site."
          },
          "mineSubsidence": {
            "type": "string",
            "description": "The number of earth depressions caused by mining."
          },
          "airportNoise": {
            "type": "string",
            "description": "A noise measurement from commercial and regional airports (not military facilities)."
          },
          "airportNoiseDecibels": {
            "type": "number",
            "format": "double",
            "description": "The decibel measurement of airplane noise at the location."
          },
          "nearestTankLocation": {
            "$ref": "#/components/schemas/StorageTank",
            "description": "The distance to the nearest underground storage tank."
          },
          "numTanksWithinQuarterMile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of underground storage tanks within one quarter-mile."
          },
          "numTanksWithinHalfMile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of underground storage tanks within one-half mile."
          },
          "numTanksWithinOneMile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of underground storage tanks within one mile."
          },
          "nearestLeakingTankLocation": {
            "$ref": "#/components/schemas/StorageTank",
            "description": "Information on the nearest leaking UST facility within one mile."
          },
          "nuclearSite": {
            "$ref": "#/components/schemas/NuclearSite",
            "description": "The distance to the nearest nuclear facility in miles."
          },
          "toxicReleaseFacility": {
            "$ref": "#/components/schemas/ToxicRelease",
            "description": "The distance to the nearest toxic release facility in miles."
          },
          "policeStationName": {
            "type": "string",
            "description": "The name of the closest police station."
          },
          "policeStationDistance": {
            "type": "string",
            "description": "The distance to the nearest police station in miles."
          },
          "numPoliceStationsWithin5Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of police stations within 5 miles of the subject address."
          },
          "numClandestineLabsWithin5Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of clandestine drug labs that have been closed down within 5 miles of the location of interest."
          }
        }
      },
      "Mortgage": {
        "type": "object",
        "description": "Details about the mortgage for the property, based on county records.",
        "properties": {
          "loanToValue": {
            "type": "number",
            "format": "double",
            "description": "The current estimated loan to value ratio, in percent.",
            "example": 35.67
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "The estimated balance on the property's first mortgage.",
            "example": 123456.78
          },
          "totalLienBalance": {
            "type": "number",
            "format": "double",
            "description": "The balance of the mortgage plus any other outstanding liens on the property.",
            "example": 150000
          },
          "loanAmount": {
            "type": "number",
            "format": "double",
            "description": "The original loan amount for the first mortgage.",
            "example": 300000
          },
          "lender": {
            "type": "string",
            "description": "The name of lender for first mortgage.",
            "example": "Big Bank of Mortgages"
          },
          "loanType": {
            "type": "string",
            "description": "The type of loan for the first mortgage. Note that \"Fannie Mae/Freddie Mac\" is returned for devloper data only.",
            "enum": [
              "Stand Alone First",
              "Stand Alone Second",
              "ARM (Adjustable Rate Mortgage as of August, 2009)",
              "Amount keyed is an Aggregate amount",
              "USDA",
              "Closed-end Mortgage",
              "Non Purchase Money Mortgage",
              "SBA Participation Trust Deed",
              "Internal only, do not use.",
              "Assumption",
              "Building or Construction Loan",
              "2nd Mortgage made to cover Down Payment",
              "Credit Line (Revolving)",
              "FHA",
              "Balloon",
              "Farmers Home Administration",
              "Negative Amortization",
              "Loan Amount $1-9 billion - only first 9-digits of Loan Amount entered due to field length limitations.  Need to multiply Loan Amount Field by 10 for the actual amount.",
              "Land Contract (Argmt. Of Sale)",
              "Modification - Originally designated to capture Hula Mae loans in Hawaii.  As with Fannie Mae/Freddie Mac, Hula Mae does not originate loans directly to borrowers.  This code now designates Mortgage Modifications which make a change to the Interest Rate, Loan Balance (except credit lines), Type Financing, or other Rate Rider terms.  Effective as of December 2008.",
              "New Conventional",
              "Commercial",
              "Purchase Money Mortgage",
              "Undefined / Multiple Amounts",
              "Stand Alone Refi (Refinance of Original Loan)",
              "Seller take-back",
              "Loan Amount $10-99 billion - only first 9-digits of Loan Amount entered due to field length limitations.  Need to multiply Loan Amount Field by 100 for the actual amount.",
              "Unknown (DEFAULT)",
              "VA",
              "Future Advance Clause / Open End Mortgage",
              "Trade",
              "Reverse Mortgage (Home Equity Conversion Mortgage)",
              "Fannie Mae/Freddie Mac"
            ],
            "example": "New Conventional"
          },
          "titleCompany": {
            "type": "string",
            "description": "The name of the title company for the mortgage.",
            "example": "Bad Wolf Title Company"
          }
        }
      },
      "NuclearSite": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The risk rating based on nuclear plant proximity."
          },
          "name": {
            "type": "string",
            "description": "The name of the nuclear site."
          },
          "type": {
            "type": "string",
            "description": "Describes the nuclear plant."
          },
          "numReactors": {
            "type": "integer",
            "format": "int32",
            "description": "The number of reactors at the nuclear site."
          },
          "distanceMiles": {
            "type": "number",
            "format": "double",
            "description": "The distance, in miles, ot the nearest nuclear site."
          }
        }
      },
      "PremiumTax": {
        "type": "object",
        "properties": {
          "kentuckyPremiumTax": {
            "$ref": "#/components/schemas/KentuckyPremiumTax"
          },
          "premiumTax": {
            "$ref": "#/components/schemas/StatePremiumTax"
          }
        }
      },
      "PropertyInfo": {
        "type": "object",
        "example": {
          "requestId": "e1438186-a3f2-4a82-a861-c5db62f14d0f",
          "submissionId": "e1438186-a3f2-4a82-a861-c5db62f14d0f",
          "status": "SUCCESS",
          "matchDescription": "Artificial match",
          "document": {
            "buildingCharacteristics": {
              "useType": "Single Family Residential",
              "airConditioning": "Central",
              "basement": "Unfinished Basement",
              "totalArea": 2345,
              "buildingClass": "null",
              "buildingCondition": "Good",
              "buildingQuality": "C",
              "garageType": "Garage",
              "garageNumCars": 0,
              "lotSize": 7536,
              "bathrooms": 3,
              "partialBathrooms": 1,
              "bedrooms": 4,
              "totalRooms": 4,
              "stories": 0,
              "pool": null,
              "roofType": "GABLE",
              "roofCovering": "Composition Shingle",
              "yearBuilt": 1996,
              "heatingType": "Central",
              "heatingFuelType": null,
              "construction": "Frame",
              "units": 1,
              "ownerOccupied": "Owner-occupied property (SFR/Condo)",
              "ownerName": "MURDOCK, KYLE & SHARON",
              "buildings": 0,
              "exteriorWall": null,
              "foundation": null,
              "architecturalStyle": null
            },
            "valuation": {
              "apn": "12354678",
              "marketValueMin": 558909,
              "marketValueMax": 657562,
              "landValue": 6920,
              "improvementValue": 29650,
              "assessmentYear": 2020,
              "assessedValue": 36570,
              "assessedMarketValue": 511457,
              "lastSalePrice": 0,
              "lastSaleDate": "2019-08-30"
            },
            "mortgage": {
              "loanToValue": 57.0058,
              "balance": 351113,
              "totalLienBalance": 351113,
              "loanAmount": 365400,
              "lender": "THE MORTGAGE CO",
              "loanType": "New Conventional",
              "titleCompany": "NONE AVAILABLE"
            }
          }
        },
        "properties": {
          "buildingCharacteristics": {
            "$ref": "#/components/schemas/BuildingCharacteristics"
          },
          "valuation": {
            "$ref": "#/components/schemas/Valuation"
          },
          "mortgage": {
            "$ref": "#/components/schemas/Mortgage"
          }
        }
      },
      "PropertyResponsePropertyRisk": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/PropertyInfo"
          },
          {
            "$ref": "#/components/schemas/PropertyRisk"
          }
        ],
        "example": "    {\n        \"requestId\": \"719408ea-59bf-46b1-a411-9d65c159db64\",\n        \"submissionId\": \"719408ea-59bf-46b1-a411-9d65c159db64\",\n        \"status\": \"SUCCESS\",\n        \"matchDescription\": \"Artificial match\",\n    }\n",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search.",
            "enum": [
              "SUCCESS",
              "NOT FOUND"
            ]
          },
          "matchDescription": {
            "type": "string",
            "description": "How the search matched to given address or geocode.",
            "enum": [
              "Default match logic",
              "Artificial match",
              "Not Found"
            ],
            "example": "Default match logic"
          },
          "document": {
            "$ref": "#/components/schemas/PropertyRisk",
            "description": "The data returned based on the search. Null is returned if the search failed to find any data"
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PropertyRisk": {
        "type": "object",
        "example": {
          "document": {
            "location": {
              "municipality": null,
              "placeCode": null,
              "placeType": null,
              "censusBlock": "080350141361015",
              "stateName": "Colorado",
              "countyName": "Artificial County",
              "schoolDistrict": "Douglas County School District RE-1",
              "elevationFeet": 5931.73,
              "slope": "2.27 degrees",
              "aspectDirection": "316.56 degrees",
              "texasTerritory": null,
              "texasName": null,
              "floridaTerritory": null,
              "floridaName": null,
              "googleMapsUrl": "https://www.google.com/maps/search/?api=1&query=39.537924,-104.933621"
            },
            "climateRisk": {
              "temperatureProfile": {
                "annualDaysLessThan0": 4.4,
                "annualDaysLessThan10": 18,
                "annualDaysLessThan20": 59.9,
                "annualDaysMoreThan40": 320.1,
                "annualDaysMoreThan50": 266.2,
                "annualDaysMaxLessThan32": 19.8,
                "fallProfile": {
                  "daysLessThan0": 0.4,
                  "daysLessThan10": 1.8,
                  "daysLessThan20": 8.9,
                  "daysLessThan32": 33,
                  "daysMaxLessThan32": 3.2,
                  "diurnalRange": 27.5
                },
                "winterProfile": {
                  "daysLessThan0": 4.4,
                  "daysLessThan10": 15.4,
                  "daysLessThan20": 44.3,
                  "daysLessThan32": 71.47999999999999,
                  "daysMaxLessThan32": 14.1,
                  "diurnalRange": 25.2
                },
                "springProfile": {
                  "daysLessThan0": 0.1,
                  "daysLessThan10": 0.8,
                  "daysLessThan20": 6.7,
                  "daysLessThan32": 38.3,
                  "daysMaxLessThan32": 2.4,
                  "diurnalRange": 26.2
                },
                "coolingDegreeDays": 561,
                "heatingDegreeDays": 6194
              },
              "snowProfile": {
                "snowfallInches": 61.8,
                "daysSnowfallGreater1Inch": 51.5,
                "daysSnowfallGreater10Inches": 5,
                "fallSnowProfile": {
                  "snowfallInches": 10.8,
                  "daysSnowDepthGreater1Inch": 6.5,
                  "daysSnowDepthGreater3Inches": 3.3,
                  "daysSnowDepthGreater5Inch": 1.8,
                  "daysSnowDepthGreater10Inches": 0.4
                },
                "winterSnowProfile": {
                  "snowfallInches": 26.4,
                  "daysSnowDepthGreater1Inch": 35.3,
                  "daysSnowDepthGreater3Inches": 21.1,
                  "daysSnowDepthGreater5Inch": 10.5,
                  "daysSnowDepthGreater10Inches": 3.9
                },
                "springSnowProfile": {
                  "snowfallInches": 24.6,
                  "daysSnowDepthGreater1Inch": 9.7,
                  "daysSnowDepthGreater3Inches": 4.7,
                  "daysSnowDepthGreater5Inch": 2.1,
                  "daysSnowDepthGreater10Inches": 0.7
                }
              },
              "averageAnnualPrecipitationInches": 17.4,
              "potentialMaxPrecipitationInches": 6.24,
              "hardinessZone": "5",
              "hardinessZoneSegment": "5b",
              "moldIndex": 2181.1,
              "moldRisk": "Low",
              "frozenPipeIndex": 148.2,
              "frozenPipeRisk": "High",
              "iceDamIndex": 236.4,
              "iceDamRisk": "Very High",
              "snowLoadScale": 2,
              "snowLoadRisk": "Very Low",
              "snowLoadDescription": "Extremely unlikely to have structural roof failure due to snow load"
            },
            "coastalRisk": {
              "hurricane": null,
              "tsunami": "",
              "windPoolZone": null,
              "windPoolRisk": null,
              "windBorneDebrisZone": null,
              "coastDistanceFeet": 0,
              "beachDistanceFeet": 0,
              "surgeMax": {
                "risk": "N/A",
                "category5": "N/A",
                "inundationLevel5": "N/A",
                "category4": "N/A",
                "inundationLevel4": "N/A",
                "category3": "N/A",
                "inundationLevel3": "N/A",
                "category2": "N/A",
                "inundationLevel2": "N/A",
                "category1": "N/A",
                "inundationLevel1": "N/A"
              },
              "cbrs": {
                "status": "OUT",
                "unitDesignation": null,
                "unitName": null,
                "type": null,
                "floodInsuranceProhibitionDate": null,
                "unitEstablishmentDate": null,
                "fastAcres": 0,
                "wetAcres": 0,
                "shoreLineMiles": 0
              },
              "enhancedHurricane": {
                "risk": null,
                "eventsSince1980": 0,
                "averageWindSpeedKnots": 0,
                "maxWindSpeedKnots": 0,
                "averageBarometricPressureMb": 0,
                "minBarometricPressureMb": 0,
                "eventsWindGreaterThan50Knots": 0,
                "eventsPressureLessThan950Mb": 0,
                "tropicalWaves": 0,
                "disturbances": 0,
                "extratropicalSystems": 0,
                "lows": 0,
                "subtropicalDepressions": 0,
                "subtropicalStorms": 0,
                "tropicalDepressions": 0,
                "tropicalStorms": 0,
                "hurricanes": 0,
                "cat0Hurricanes": 0,
                "cat1Hurricanes": 0,
                "cat2Hurricanes": 0,
                "cat3Hurricanes": 0,
                "cat4Hurricanes": 0,
                "cat5Hurricanes": 0,
                "maxWindEvent": null,
                "minPressureEvent": null,
                "eventsWindGreaterThan50KnotsPerYear": 0,
                "eventsPressureLessThan950MbPerYear": 0
              }
            },
            "crimeRisk": {
              "crimeScore": 52,
              "murderRisk": "Low murder rate",
              "murderScore": 69,
              "forcibleRapeRisk": "Very low forcible rape rate",
              "forcibleRapeScore": 19,
              "forcibleRobberyRisk": "Very low forcible robbery rate",
              "forcibleRobberyScore": 38,
              "aggravatedAssaultRisk": "Very low aggravated assault rate",
              "aggravatedAssaultScore": 31,
              "burglaryRisk": "Very low burglary rate",
              "burglaryScore": 39,
              "larcenyRisk": "Average larceny rate",
              "larcenyScore": 85,
              "motorVehicleTheftRisk": "Low motor vehicle theft rate",
              "motorVehicleTheftScore": 79,
              "drugAlcoholDeathsRisk": "VERY LOW",
              "numDrugAlcoholDeaths": 1379,
              "drugAlcoholDeathsRate100k": 419.6,
              "crimeRisk": "Low crime rate"
            },
            "fireRisk": {
              "protectionClass": "PP1",
              "description": "Outside of Municipality & <= 1 Drive Miles from Fire Station",
              "propertyFireScore": "HH1",
              "waterScore": "HX2",
              "averagePercentLoss": 27.41,
              "expectedLoss": 144522,
              "perennialWaterStatus": "Less than 1000 feet from Perennial Water",
              "perennialWaterName": null,
              "availableWaterType": "Hydrant",
              "hydrantStatus": "> 250 feet AND <= 500 feet from Reported Hydrant",
              "hydrantsWithin1KFeet": 19,
              "fireStationsWithin5Miles": 9,
              "fireStationsWithin10Miles": 44,
              "aais": {
                "protectionClass": "PP1",
                "protectionText": "P1, PROTECTED 1",
                "availableWaterType": "Hydrant",
                "hydrantAndFireStationText": "<= 1000' from Hydrant or <= 1000' from Perennial water & <= 1 Drive Miles from Fire Station"
              },
              "fireStations": [
                {
                  "name": "Littleton Fire Protection District Station 17",
                  "type": "Full Time",
                  "responseArea": "Littleton Fire Protection Zone",
                  "longitude": -104.93897,
                  "latitude": 39.54289,
                  "distanceMiles": 0.45,
                  "driveDistanceMiles": 0.67,
                  "driveTimeMinutes": 2
                },
                {
                  "name": "South Metro Fire Rescue Station 20",
                  "type": "Full Time",
                  "responseArea": "South Metro Fire Rescue",
                  "longitude": -104.9659,
                  "latitude": 39.525125,
                  "distanceMiles": 1.93,
                  "driveDistanceMiles": 2.32,
                  "driveTimeMinutes": 5
                },
                {
                  "name": "Littleton Fire Protection District Station 15",
                  "type": "Full Time",
                  "responseArea": "Littleton Fire Protection Zone",
                  "longitude": -104.9574,
                  "latitude": 39.58018,
                  "distanceMiles": 3.2,
                  "driveDistanceMiles": 3.94,
                  "driveTimeMinutes": 9
                }
              ]
            },
            "floodRisk": {
              "femaFlood": {
                "risk": "Covered by FEMA digital maps. Minimal to No Risk of Flooding",
                "zone": "X",
                "mapId": "mapId",
                "areaId": "areaId",
                "effectiveDate": "2020-05-01",
                "claimsInTract": {
                  "1999": 0,
                  "2000": 0,
                  "2001": 0,
                  "2002": 0,
                  "2003": 0,
                  "2004": 0,
                  "2005": 0,
                  "2006": 0,
                  "2007": 0,
                  "2008": 0,
                  "2009": 0,
                  "2010": 0,
                  "2011": 0,
                  "2012": 0,
                  "2013": 0,
                  "2014": 0,
                  "2015": 1,
                  "2016": 0,
                  "2017": 0,
                  "2018": 0,
                  "2019": 0,
                  "2020": 0,
                  "total": 1
                },
                "floodMapUrl": "https://msc.fema.gov/portal/search?AddressQuery=-104.9336212%2C%2039.5379241#searchresultsanchor"
              },
              "floodGrade": "A",
              "floodDescription": "Extremely Low risk of flood damage",
              "hundredYearFloodPlainDistance": "2334 ft",
              "hundredYearFloodPlainElevationFeet": 5867.13,
              "baseFloodElevation": "0.445 MILES from BFE = 5870 feet",
              "potentialMaximumPrecipitation": 6.24,
              "catastrophicFloodGrade": "A",
              "catastrophicFloodDescription": "Extremely Low risk of flood damage",
              "potentialMaximumCatastrophicPrecipitation": 12.48
            },
            "geologyRisk": {
              "earthquake": {
                "risk": "Light Damage",
                "mmi": 0,
                "mmiText": "Strong",
                "richterRange": "4.1-4.6",
                "faultDistance": "12.42 miles",
                "faultName": "Golden fault",
                "usgsFaultZone": "Not in USGS Designated Eastern Fault Zone",
                "frackingEarthquakeZone": "Potential for Induced Earthquake"
              },
              "mudslide": null,
              "landslide": null,
              "radon": "Predicted average indoor radon screening levels greater than 4 pCi/L",
              "sinkhole": {
                "susceptibility": "Minimal Sinkhole Risk",
                "karstType": null,
                "climate": null,
                "rockType": null,
                "closedDepression": null,
                "distanceFeet": 0,
                "numWithin1Mile": 0,
                "numWithin2Miles": 0,
                "numWithin3Miles": 0,
                "numWithin4Miles": 0,
                "numWithin5Miles": 0
              },
              "volcano": null,
              "nearestVolcano": {
                "name": null,
                "status": null,
                "type": null,
                "elevationFeet": 0,
                "distanceMiles": 0
              },
              "lavaFlow": null,
              "lavaZone": 0,
              "lavaFlowDescription": null
            },
            "manMadeRisk": {
              "superfund": null,
              "brownfield": null,
              "mineSubsidence": null,
              "airportNoise": null,
              "airportNoiseDecibels": 0,
              "nearestTankLocation": {
                "risk": "2453 Feet from Underground Storage Tank Facility",
                "name": "Highlands Ranch Fire Station #17",
                "address": "9554 S University Blvd, Highlands Ranch, CO 80126",
                "registryNumber": "registryNumber",
                "numTanks": 2,
                "leaking": "Yes"
              },
              "numTanksWithinQuarterMile": 0,
              "numTanksWithinHalfMile": 2,
              "numTanksWithinOneMile": 7,
              "nearestLeakingTankLocation": {
                "risk": "2453 Feet from Leaking Underground Storage Tank Facility",
                "name": "Highlands Ranch Fire Station #17",
                "address": "9554 S University Blvd, Highlands Ranch, CO 80126",
                "registryNumber": "registryNumber",
                "numTanks": 2,
                "leaking": "Yes"
              },
              "nuclearSite": null,
              "toxicReleaseFacility": null,
              "policeStationName": "DOUGLAS COUNTY SHERIFFS OFFICE - SUBSTATION",
              "policeStationDistance": "2.8 miles",
              "numPoliceStationsWithin5Miles": 2,
              "numClandestineLabsWithin5Miles": 2
            },
            "weatherRisk": {
              "wind": {
                "score": 33,
                "risk": "Moderate",
                "predictedFutureEvents": "95% chance of damaging wind occurrence in 10 years in a 2.44 mile radius",
                "incidentsWithin25MilesLastDecade": 105,
                "incidentsWithin25MilesSince1996": 153,
                "nearestIncident": {
                  "year": 2014,
                  "type": "Thunderstorm Wind",
                  "injuries": 0,
                  "deaths": 0,
                  "cropDamage": "N/R",
                  "propertyDamage": "N/R",
                  "distanceMiles": 1.03,
                  "characteristicLabel": "Wind Speed",
                  "characteristicValue": "50"
                },
                "percentAnnualLikelihood": 3.2513,
                "severeEvents": {
                  "numWithin1Mile": 0,
                  "numWithin2Miles": 1,
                  "numWithin3Miles": 1,
                  "numWithin4Miles": 3,
                  "numWithin5Miles": 10
                }
              },
              "hail": {
                "score": 48,
                "risk": "Very High",
                "predictedFutureEvents": "95% chance of damaging hail occurrence in 10 years in 0.99 mile radius",
                "incidentsWithin25MilesLastDecade": 635,
                "incidentsWithin25MilesSince1996": 1074,
                "nearestIncident": {
                  "year": 2016,
                  "type": "Hail",
                  "injuries": 0,
                  "deaths": 0,
                  "cropDamage": "0.00K",
                  "propertyDamage": "0.00K",
                  "distanceMiles": 1.03,
                  "characteristicLabel": "Inches",
                  "characteristicValue": "0.75"
                },
                "percentAnnualLikelihood": 22.8225,
                "severeEvents": {
                  "numWithin1Mile": 0,
                  "numWithin2Miles": 4,
                  "numWithin3Miles": 24,
                  "numWithin4Miles": 30,
                  "numWithin5Miles": 35
                }
              },
              "tornado": {
                "score": 35,
                "risk": "Low",
                "predictedFutureEvents": "50% chance of damaging tornado occurrence in 10 years in 7.22 mile radius",
                "incidentsWithin25MilesLastDecade": 12,
                "incidentsWithin25MilesSince1996": 33,
                "nearestIncident": {
                  "year": 2019,
                  "type": "Tornado",
                  "injuries": 0,
                  "deaths": 0,
                  "cropDamage": "0.00K",
                  "propertyDamage": "0.00K",
                  "distanceMiles": 2.89,
                  "characteristicLabel": "F Scale",
                  "characteristicValue": "EF0"
                },
                "percentAnnualLikelihood": 0.7013,
                "severeEvents": {
                  "numWithin1Mile": 0,
                  "numWithin2Miles": 0,
                  "numWithin3Miles": 1,
                  "numWithin4Miles": 1,
                  "numWithin5Miles": 1
                }
              },
              "lightning": {
                "score": 41,
                "risk": "Moderate",
                "predictedFutureEvents": "95% chance of 9.821656 ground strikes in 1 year per square mile",
                "strikesLastYear": "3084 ground lightning strikes within 10 miles last year",
                "percentAnnualLikelihood": 1.53463
              },
              "convectionStormsLastDecade": 72
            },
            "wildfireRisk": {
              "risk": "Low",
              "description": "Med_Dens_Interface",
              "fuelLoadScore": 8,
              "compositeScore": 19,
              "housingDensity": 578.62,
              "currentDroughtGrade": null,
              "currentDroughtDescription": null,
              "droughtFrequency": "Moderate",
              "percentDroughtFrequency": 47,
              "droughtFrequencyDescription": "513 weeks of drought over the past 21 years",
              "historicStatus": "> 1 mile from historic wildfire perimeter",
              "numWildfiresHere": 0,
              "numWildfiresNear": 0,
              "distanceToVeryHighRisk": "3664 ft",
              "distanceToHighRisk": null,
              "distanceToModerateRisk": "0",
              "inchesFireSeasonPrecipitation": 10.33,
              "inchesFireSeasonMonthlyPrecipitation": 0,
              "scoreFireSeasonPrecipitation": 8,
              "vegetationBurnPointsHalfMile": 0,
              "vegetationBurnPointsOneMile": 0
            },
            "premiumTax": {
              "kentuckyPremiumTax": null,
              "premiumTax": null
            }
          }
        },
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "climateRisk": {
            "$ref": "#/components/schemas/ClimateRisk"
          },
          "coastalRisk": {
            "$ref": "#/components/schemas/CoastalRisk"
          },
          "crimeRisk": {
            "$ref": "#/components/schemas/CrimeRisk"
          },
          "fireRisk": {
            "$ref": "#/components/schemas/FireRisk"
          },
          "floodRisk": {
            "$ref": "#/components/schemas/FloodRisk"
          },
          "geologyRisk": {
            "$ref": "#/components/schemas/GeologyRisk"
          },
          "manMadeRisk": {
            "$ref": "#/components/schemas/ManMadeRisk"
          },
          "weatherRisk": {
            "$ref": "#/components/schemas/WeatherRisk"
          },
          "wildfireRisk": {
            "$ref": "#/components/schemas/WildfireRisk"
          },
          "premiumTax": {
            "$ref": "#/components/schemas/PremiumTax"
          }
        }
      },
      "RingRisk": {
        "type": "object",
        "description": "Number of identified events in concentric rings around this location",
        "properties": {
          "numWithin1Mile": {
            "type": "integer",
            "format": "int32",
            "description": "Number of events within one mile of this location",
            "example": 5
          },
          "numWithin2Miles": {
            "type": "integer",
            "format": "int32",
            "description": "Number of events within two miles of this location",
            "example": 10
          },
          "numWithin3Miles": {
            "type": "integer",
            "format": "int32",
            "description": "Number of events within three miles of this location",
            "example": 20
          },
          "numWithin4Miles": {
            "type": "integer",
            "format": "int32",
            "description": "Number of events within four miles of this location",
            "example": 35
          },
          "numWithin5Miles": {
            "type": "integer",
            "format": "int32",
            "description": "Number of events within five miles of this location",
            "example": 50
          }
        }
      },
      "RiskLocation": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The overall risk of an underground tank leak for the location of interest."
          },
          "name": {
            "type": "string",
            "description": "The name of the nearest facility with underground storage tanks."
          },
          "address": {
            "type": "string",
            "description": "The address of the nearest facility with underground storage tanks."
          },
          "registryNumber": {
            "type": "string",
            "description": "The UST facility nation registry identification number."
          }
        }
      },
      "SeasonalSnowProfile": {
        "type": "object",
        "properties": {
          "snowfallInches": {
            "type": "number",
            "format": "double"
          },
          "daysSnowDepthGreater1Inch": {
            "type": "number",
            "format": "double"
          },
          "daysSnowDepthGreater3Inches": {
            "type": "number",
            "format": "double"
          },
          "daysSnowDepthGreater5Inch": {
            "type": "number",
            "format": "double"
          },
          "daysSnowDepthGreater10Inches": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SeasonalTemperatureProfile": {
        "type": "object",
        "properties": {
          "daysLessThan0": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-zero-degrees Fahrenheit days that the subject address may experience in a given season."
          },
          "daysLessThan10": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-10-degrees Fahrenheit days that the subject address may experience in a given season."
          },
          "daysLessThan20": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-20-degrees Fahrenheit days that the subject address may experience in a given season."
          },
          "daysLessThan32": {
            "type": "number",
            "format": "double",
            "description": "The expected number of below-freezing days that the subject address may experience in a given season."
          },
          "daysMaxLessThan32": {
            "type": "number",
            "format": "double",
            "description": "The maximum number of below-freezing days that the subject address may experience in a given season."
          },
          "diurnalRange": {
            "type": "number",
            "format": "double",
            "description": "The typical high- and low-temperature range that occurs in one day for a given season."
          }
        }
      },
      "Sinkhole": {
        "type": "object",
        "description": "Information related to the risk of sinkhole formation for the location of interest.",
        "properties": {
          "susceptibility": {
            "type": "string",
            "description": "A text description of sinkhole susceptibility.",
            "example": "High Risk of Sinkhole Occurrence"
          },
          "karstType": {
            "type": "string",
            "description": "A description of karst topography in this region. Null is returned if no karst features are present.",
            "example": "Carbonate rocks at or near the land surface in a humid climate"
          },
          "climate": {
            "type": "string",
            "description": "A qualitative description of the local climate. May be null if the climate is not relevant to the sinkhole risk.",
            "example": "humid"
          },
          "rockType": {
            "type": "string",
            "description": "The type of rock making up karst formations, if present. May be null if no karst structures are present.",
            "example": "Limestone"
          },
          "closedDepression": {
            "type": "string",
            "description": "Returns value if in closed depression/subsurface drainage, null otherwise",
            "example": null
          },
          "distanceFeet": {
            "type": "number",
            "format": "double",
            "description": "The distance to the nearest known sinkhole from this location in feet",
            "example": 2668
          },
          "numWithin1Mile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known sinkholes within one mile of this location",
            "example": 3
          },
          "numWithin2Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known sinkholes within two miles of this location",
            "example": 8
          },
          "numWithin3Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known sinkholes within three miles of this location",
            "example": 40
          },
          "numWithin4Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known sinkholes within four miles of this location",
            "example": 26
          },
          "numWithin5Miles": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known sinkholes within five miles of this location",
            "example": 40
          }
        }
      },
      "SnowProfile": {
        "type": "object",
        "properties": {
          "snowfallInches": {
            "type": "number",
            "format": "double"
          },
          "daysSnowfallGreater1Inch": {
            "type": "number",
            "format": "double"
          },
          "daysSnowfallGreater10Inches": {
            "type": "number",
            "format": "double"
          },
          "fallSnowProfile": {
            "$ref": "#/components/schemas/SeasonalSnowProfile"
          },
          "winterSnowProfile": {
            "$ref": "#/components/schemas/SeasonalSnowProfile"
          },
          "springSnowProfile": {
            "$ref": "#/components/schemas/SeasonalSnowProfile"
          }
        }
      },
      "StatePremiumTax": {
        "type": "object",
        "description": "Provides tax information for states that collect Premium taxes, excluding Kentucky.",
        "properties": {
          "taxId": {
            "type": "string",
            "description": "A unique proprietary ID."
          },
          "stateCountyPlaceFips": {
            "type": "string",
            "description": "The Federal Information Processing Standard state code."
          },
          "countyName": {
            "type": "string",
            "description": "The county name."
          },
          "cityName": {
            "type": "string",
            "description": "The city name."
          },
          "cityDesignation": {
            "type": "string",
            "description": "The City Type, such as City, Town, or Village, based on Census Designation."
          },
          "taxingAuthority": {
            "type": "string",
            "description": "The lowest level applicable taxing authority, such as municipal or county."
          },
          "taxingAuthorityFips": {
            "type": "string",
            "description": "The lowest level taxing authority Federal Information Processing Standards Code."
          },
          "fireZone": {
            "type": "string",
            "description": "The fire taxing district."
          },
          "taxCode1": {
            "type": "string",
            "description": "The primary tax code."
          },
          "taxCode2": {
            "type": "string",
            "description": "For FL, returns a secondary tax code; blank for all other states."
          },
          "lastEdit": {
            "type": "string",
            "description": "The last data edit date (\"vintage\")."
          },
          "gnisCode": {
            "type": "string",
            "description": "The Geographic Names Information System code."
          }
        }
      },
      "StorageTank": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The overall risk of an underground tank leak for the location of interest."
          },
          "name": {
            "type": "string",
            "description": "The name of the nearest facility with underground storage tanks."
          },
          "address": {
            "type": "string",
            "description": "The address of the nearest facility with underground storage tanks."
          },
          "registryNumber": {
            "type": "string",
            "description": "The UST facility nation registry identification number."
          },
          "numTanks": {
            "type": "integer",
            "format": "int32",
            "description": "The number of tanks in the underground tank field at this location."
          },
          "leaking": {
            "type": "string",
            "description": "The number of known leaking underground tanks at this location."
          }
        }
      },
      "SurgeMax": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string"
          },
          "category5": {
            "type": "string"
          },
          "inundationLevel5": {
            "type": "string"
          },
          "category4": {
            "type": "string"
          },
          "inundationLevel4": {
            "type": "string"
          },
          "category3": {
            "type": "string"
          },
          "inundationLevel3": {
            "type": "string"
          },
          "category2": {
            "type": "string"
          },
          "inundationLevel2": {
            "type": "string"
          },
          "category1": {
            "type": "string"
          },
          "inundationLevel1": {
            "type": "string"
          }
        }
      },
      "TaxParameters": {
        "type": "object",
        "properties": {
          "taxCode1": {
            "type": "string",
            "description": "The primary taxing authority code."
          },
          "taxCode2": {
            "type": "string",
            "description": "The secondary taxing authority code."
          },
          "firePercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "casualtyLiabilityOnlyPercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "vehiclePercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "inlandMarinePercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "healthPercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "lifePercent": {
            "type": "string",
            "description": "The tax percentage assessed for specific insurance policy premiums."
          },
          "allOthersPercent": {
            "type": "string",
            "description": "The premium tax percentage assessed for all other insurance policy types."
          },
          "minimumTax": {
            "type": "string",
            "description": "The local base/minimum tax rate."
          },
          "lastEdit": {
            "type": "string",
            "description": "The last data edit date (\"vintage\")."
          },
          "gnisCode": {
            "type": "string",
            "description": "The unique Geographic Names Information System code."
          }
        }
      },
      "TemperatureProfile": {
        "type": "object",
        "properties": {
          "annualDaysLessThan0": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-zero-degrees Fahrenheit days that the subject address may experience in a given year."
          },
          "annualDaysLessThan10": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-10-degrees Fahrenheit days that the subject address may experience in a given year."
          },
          "annualDaysLessThan20": {
            "type": "number",
            "format": "double",
            "description": "The likely number of below-20-degrees Fahrenheit days that the subject address may experience in a given year."
          },
          "annualDaysMoreThan40": {
            "type": "number",
            "format": "double",
            "description": "The likely number of above-40-degrees Fahrenheit days that the subject address may experience in a given year."
          },
          "annualDaysMoreThan50": {
            "type": "number",
            "format": "double",
            "description": "The likely number of above-50-degrees Fahrenheit days that the subject address may experience in a given year."
          },
          "annualDaysMaxLessThan32": {
            "type": "number",
            "format": "double",
            "description": "The maximum expected number of below-freezing days that the subject address may experience in a given year."
          },
          "fallProfile": {
            "$ref": "#/components/schemas/SeasonalTemperatureProfile",
            "description": "Temperature profile data for the fall season."
          },
          "winterProfile": {
            "$ref": "#/components/schemas/SeasonalTemperatureProfile",
            "description": "Temperature profile data for the winter season."
          },
          "springProfile": {
            "$ref": "#/components/schemas/SeasonalTemperatureProfile",
            "description": "Temperature profile data for the spring season."
          },
          "coolingDegreeDays": {
            "type": "number",
            "format": "double",
            "description": "The number of expected cooling degree days for this location. One cooling degree day is the number of hours that the outside temperature is above 72 degrees Fahrenheit times the number of degrees above 72, divided by 24. It represents the expected air conditioning load on a location. [Reference](https://www.degreedays.net/introduction)"
          },
          "heatingDegreeDays": {
            "type": "number",
            "format": "double",
            "description": "The number of expected heating degree days for this location. One heating degree day is the number of hours that the outside temperature is below 68 degrees Fahrenheit times the number of degrees below 68 degrees, divided by 24. It represents the expected heating load on a location. [Reference](https://www.degreedays.net/introduction)"
          }
        }
      },
      "ToxicRelease": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The overall grade, A through F, based on the toxic release facility's proximity to the location of interest."
          },
          "name": {
            "type": "string",
            "description": "The name of the toxic release facility."
          },
          "facilityId": {
            "type": "string",
            "description": "The facility's reference ID."
          },
          "federalId": {
            "type": "string",
            "description": "The facility's federal reference ID."
          },
          "address": {
            "type": "string",
            "description": "The facility's address."
          },
          "distanceMiles": {
            "type": "number",
            "format": "double",
            "description": "The distance, in miles, from the location of interest to the facility."
          },
          "industry": {
            "type": "string",
            "description": "The facility's industry classification."
          },
          "chemical": {
            "type": "string",
            "description": "The chemical contained at the facility."
          },
          "carcinogen": {
            "type": "boolean",
            "description": "The name of any carcinogen contained at the facility."
          }
        }
      },
      "Valuation": {
        "type": "object",
        "description": "Details about the value of the property.",
        "properties": {
          "apn": {
            "type": "string",
            "description": "The Assessor Parcel Number; an identifier assigned by county for the property's parcel.",
            "example": "748-761-5174"
          },
          "marketValueMin": {
            "type": "number",
            "format": "double",
            "description": "The estimated minimum market value based on an automated valuation model.",
            "example": 123456
          },
          "marketValueMax": {
            "type": "number",
            "format": "double",
            "description": "The estimated maximum market value based on an automated valuation model.",
            "example": 234567
          },
          "landValue": {
            "type": "number",
            "format": "double",
            "description": "The assessed value of land",
            "example": 123456
          },
          "improvementValue": {
            "type": "number",
            "format": "double",
            "description": "The assessed value of improvements on the parcel.",
            "example": 123456
          },
          "assessmentYear": {
            "type": "integer",
            "format": "int32",
            "description": "The year of the assessment on which assessment values are based.",
            "example": 2019
          },
          "assessedValue": {
            "type": "number",
            "format": "double",
            "description": "The total assessed value of the property (i.e., the sum of the land and improvements values).",
            "example": 246912
          },
          "assessedMarketValue": {
            "type": "number",
            "format": "double",
            "description": "The market value of property based on an assessment when used by assessor.",
            "example": 246912
          },
          "lastSalePrice": {
            "type": "integer",
            "format": "int32",
            "description": "The selling price of the property the last time the property was sold.",
            "example": 350000
          },
          "lastSaleDate": {
            "type": "string",
            "format": "date",
            "description": "The date of last sale of the property.",
            "example": "03/14/2018"
          }
        }
      },
      "Volcano": {
        "type": "object",
        "description": "Information about a volcano",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the volcano",
            "example": "Dotsero"
          },
          "status": {
            "type": "string",
            "description": "Status of this volcano",
            "example": "Radiocarbon"
          },
          "type": {
            "type": "string",
            "description": "Type of this volcano",
            "example": "Maar"
          },
          "elevationFeet": {
            "type": "number",
            "format": "double",
            "description": "Elevation of this volcano in feet",
            "example": 2230
          },
          "distanceMiles": {
            "type": "number",
            "format": "double",
            "description": "Distance to this volcano from this location in miles",
            "example": 10.83
          }
        }
      },
      "WeatherDetails": {
        "type": "object",
        "description": "Object to hold risk information associated with different weather phenomena",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32",
            "description": "A numerical score representing risk from this weather phenomenon. Possible values for the score range from **0 to 50**. Higher scores indicate a higher risk of damage from this type of weather.",
            "example": 35
          },
          "risk": {
            "type": "string",
            "description": "A qualitative ranking of the risk score.",
            "enum": [
              "Very Low",
              "Low",
              "Moderate",
              "High",
              "Very High"
            ],
            "example": "Moderate"
          },
          "predictedFutureEvents": {
            "type": "string",
            "description": "A statement containing the probability for severe events of this type in the future.",
            "example": "95% chance of damaging hail occurrence in 10 years in 2.08 mile radius"
          },
          "incidentsWithin25MilesLastDecade": {
            "type": "integer",
            "format": "int32",
            "description": "The number of incidents of this type within 25 miles of this location in the past decade.",
            "example": 100
          },
          "incidentsWithin25MilesSince1996": {
            "type": "integer",
            "format": "int32",
            "description": "The number of incidents of this type within 25 miles of this location since 1996."
          },
          "nearestIncident": {
            "$ref": "#/components/schemas/WeatherIncident",
            "description": "Information on the nearest severe incident of this type to this location."
          },
          "percentAnnualLikelihood": {
            "type": "number",
            "format": "double",
            "description": "The probability in percent of a severe event of this type occurring near this location during a ten-year period.",
            "example": 1.23
          },
          "severeEvents": {
            "$ref": "#/components/schemas/RingRisk",
            "description": "The number of historical damaging events of this type classified by distance from this location."
          }
        }
      },
      "WeatherIncident": {
        "type": "object",
        "description": "Object that holds information related to a single weather incident.",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32",
            "description": "The occurance year of the event.",
            "example": 1999
          },
          "type": {
            "type": "string",
            "description": "The type of the weather event.",
            "enum": [
              "Hail",
              "Thunderstorm Wind",
              "Tornado"
            ],
            "example": "Hail"
          },
          "injuries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of injuries attributed to this incident.",
            "example": 4
          },
          "deaths": {
            "type": "integer",
            "format": "int32",
            "description": "The number of deaths attributed to this incident.",
            "example": 0
          },
          "cropDamage": {
            "type": "string",
            "description": "The amount of crop damage in USD reported for this incident, or \"N/R\" for None Reported.",
            "example": "900K"
          },
          "propertyDamage": {
            "type": "string",
            "description": "The amount of property damage in USD reported for this incident, or \"N/R\" for None Reported.",
            "example": "900K"
          },
          "distanceMiles": {
            "type": "number",
            "format": "double",
            "description": "The distance in miles from this location to this incident."
          },
          "characteristicLabel": {
            "type": "string",
            "description": "The label or type of value reported in the `characteristicValue` that describes the intensity of this event.",
            "enum": [
              "Inches",
              "Wind Speed",
              "F Scale"
            ],
            "example": "Wind Speed"
          },
          "characteristicValue": {
            "type": "string",
            "description": "The value that describes the intensity of this event. The meaning of this value is set by `characteristicLabel.`",
            "example": 50
          }
        }
      },
      "WeatherRisk": {
        "type": "object",
        "description": "Risk at this location from severe weather events such as hail storms and tornadoes.",
        "properties": {
          "wind": {
            "$ref": "#/components/schemas/WeatherDetails",
            "description": "Details on risk from high wind events."
          },
          "hail": {
            "$ref": "#/components/schemas/WeatherDetails",
            "description": "Details on risk from hail events."
          },
          "tornado": {
            "$ref": "#/components/schemas/WeatherDetails",
            "description": "Details on risk from tornadoes."
          },
          "lightning": {
            "$ref": "#/components/schemas/Lightning",
            "description": "Details on risk from lightning strikes."
          },
          "convectionStormsLastDecade": {
            "type": "integer",
            "format": "int32",
            "description": "The number of convection storms in the past 10 years at the location of interest.",
            "example": 10
          }
        }
      },
      "WildfireRisk": {
        "type": "object",
        "properties": {
          "risk": {
            "type": "string",
            "description": "The overall risk of wildfires at the subject address.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the property status.",
            "example": "inhabited"
          },
          "fuelLoadScore": {
            "type": "integer",
            "format": "int32",
            "description": "A score indicating the amount of brush or vegetation on the property, based on the fuel load, or percent of wild land vegetation."
          },
          "compositeScore": {
            "type": "integer",
            "format": "int32",
            "description": "A numeric risk score, calculated as the base score plus the distance to high/very high, vegetation burn points, historic wildfire perimeters, fire season precipitation, and katabatic wind zones. Returns a value within the range of 0 to 53, with higher values indicating higher risk."
          },
          "housingDensity": {
            "type": "number",
            "format": "double",
            "description": "The number of housing units within a square mile."
          },
          "currentDroughtGrade": {
            "type": "string",
            "description": "A description of the current level of drought occurring at the property of interest. "
          },
          "currentDroughtDescription": {
            "type": "string",
            "description": "A description of the current level of drought occurring at the subject property."
          },
          "droughtFrequency": {
            "type": "string",
            "description": "A description of the frequency of drought conditions occurring at the subject property.",
            "enum": [
              "Very High",
              "High",
              "Moderate",
              "Low",
              "Very Low",
              "Very Low/None",
              "None"
            ]
          },
          "percentDroughtFrequency": {
            "type": "number",
            "format": "double",
            "description": "A percentage that represents the amount of time the subject property experiences drought conditions."
          },
          "droughtFrequencyDescription": {
            "type": "string",
            "description": "A description of the amount of drought experienced at the subject property, e.g., 300 weeks of drought over the past 20 years"
          },
          "historicStatus": {
            "type": "string",
            "description": "The distance from historic wildfire lines, e.g., >1 mile from historic wildfire perimeter"
          },
          "numWildfiresHere": {
            "type": "integer",
            "format": "int32",
            "description": "The number of wildfires that have occurred at the location of interest over the last 20 years."
          },
          "numWildfiresNear": {
            "type": "integer",
            "format": "int32",
            "description": "The number of wildfires that have occurred near the subject location over the last 20 years."
          },
          "distanceToVeryHighRisk": {
            "type": "string",
            "description": "The proximity to areas considered at \"very high risk\" for wildfires."
          },
          "distanceToHighRisk": {
            "type": "string",
            "description": "The proximity to areas considered at \"high risk\" for wildfires."
          },
          "distanceToModerateRisk": {
            "type": "string",
            "description": "The proximity to areas considered at \"moderate risk\" for wildfires."
          },
          "inchesFireSeasonPrecipitation": {
            "type": "number",
            "format": "double",
            "description": "The average amount of rainfall, in inches, occurring at this location during fire season months."
          },
          "inchesFireSeasonMonthlyPrecipitation": {
            "type": "number",
            "format": "double",
            "description": "The average monthly amount of rainfall, in inches, occurring at this location during fire season months."
          },
          "scoreFireSeasonPrecipitation": {
            "type": "integer",
            "format": "int32",
            "description": "The precipitation total for a wildfire season: Note that the number of months in the fire season depends on the location. Returns a value between 1 and 10, with 10 indicating the highest risk for wildfire."
          },
          "vegetationBurnPointsHalfMile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of likely vegetation burn points within one-half mile of this location."
          },
          "vegetationBurnPointsOneMile": {
            "type": "integer",
            "format": "int32",
            "description": "The number of likely vegetation burn points within one mile of this location."
          }
        }
      },
      "CostBreakdown": {
        "type": "object",
        "properties": {
          "architectFeesAndPermits": {
            "type": "number",
            "format": "double",
            "description": "The estimated architect fees and permit costs."
          },
          "houseMaterialsAndLabor": {
            "type": "number",
            "format": "double",
            "description": "The estimated materials and labor costs."
          },
          "overhead": {
            "type": "number",
            "format": "double",
            "description": "The estimated costs of overhead components such as utilities, licenses, accounting, expenses, payroll, etc."
          },
          "profit": {
            "type": "number",
            "format": "double",
            "description": "The estimated profit component of cost."
          },
          "costWithoutDebrisRemoval": {
            "type": "number",
            "format": "double",
            "description": "The estimated replacement cost minus the cost of debris removal."
          },
          "debrisRemoval": {
            "type": "number",
            "format": "double",
            "description": "The estimated cost of debris removal. This field is only available for CA properties."
          },
          "costIncludingDebrisRemoval": {
            "type": "number",
            "format": "double",
            "description": "The estimated total replacement cost, including debris removal."
          }
        }
      },
      "CostDetails": {
        "type": "object",
        "properties": {
          "low": {
            "$ref": "#/components/schemas/Detail",
            "description": "The low end of the estimate range of the cost of the structure."
          },
          "medium": {
            "$ref": "#/components/schemas/Detail",
            "description": "The middle estimate range of the cost of the structure."
          },
          "high": {
            "$ref": "#/components/schemas/Detail",
            "description": "The high end of the estimate range of the cost of the structure."
          }
        }
      },
      "Detail": {
        "type": "object",
        "properties": {
          "costPerSquareFoot": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ReplacementCost": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "matchDescription": {
            "type": "string",
            "description": "Indicates the match strategy that provided the returned information.",
            "enum": [
              "Default match logic",
              "Artificial match",
              "Not Found"
            ],
            "example": "Default match logic"
          },
          "architecturalStyle": {
            "type": "string",
            "description": "The architectural style of the property.",
            "enum": [
              "2-Family Home",
              "3-Family Home",
              "4-Family Home",
              "A-Frame",
              "Adams",
              "Adirondack",
              "Adobe",
              "American Four Square",
              "Architecturally Unique",
              "Art Deco",
              "Art Moderne",
              "Arts and Crafts Style",
              "Basic",
              "Bay Region",
              "Beaux Arts",
              "Bi-Level",
              "Brownstone",
              "Brownstone - End Unit",
              "Brownstone, Bowfront Victorian",
              "Brownstone, Bowfront Victorian - End Unit",
              "Brownstone, Stand Alone",
              "Brownstone, Victorian",
              "Brownstone, Victorian - End Unit",
              "Bungalow",
              "California Ranch",
              "Cape Cod",
              "Carpenter Gothic",
              "Castle-Like",
              "Chalet",
              "Charleston",
              "Chateau",
              "City House",
              "City House - End Unit",
              "City House, Art Deco",
              "City House, Art Deco - End Unit",
              "City House, Art Moderne",
              "City House, Art Moderne - End Unit",
              "City House, Beaux Arts Classical",
              "City House, Beaux Arts Classical - End Unit",
              "City House, Gothic",
              "City House, Gothic - End Unit",
              "City House, International Style",
              "City House, International Style - End Unit",
              "City House, Italianate",
              "City House, Italianate - End Unit",
              "City House, Neo-Classical",
              "City House, Neo-Classical - End Unit",
              "City House, Renaissance",
              "City House, Renaissance - End Unit",
              "City House, Renaissance Revival",
              "City House, Renaissance Revival - End Unit",
              "City House, Romanesque",
              "City House, Romanesque - End Unit",
              "City House, Second Empire",
              "City House, Second Empire - End Unit",
              "City House, Sullivanesque",
              "City House, Sullivanesque - End Unit",
              "Classical Revival",
              "Co-Op",
              "Colonial",
              "Colonial, Custom",
              "Colonial, Dutch",
              "Colonial, Early American",
              "Colonial, Eclectic",
              "Colonial, French",
              "Colonial, German",
              "Colonial, Manor",
              "Colonial, New England Style",
              "Colonial, Plantation",
              "Colonial, Revival",
              "Colonial, Revival Eclectic",
              "Colonial, Southern",
              "Colonial, Spanish",
              "Colonial, Tract",
              "Completely Custom",
              "Conch",
              "Condo",
              "Contemporary",
              "Contemporary, California",
              "Contemporary, English",
              "Contemporary, French",
              "Contemporary, Tudor",
              "Contractor Modern",
              "Converted Barn",
              "Cottage",
              "Country Style",
              "Craftsman Style",
              "Deconstruction",
              "Designed by a Famous Architect",
              "Doublewide",
              "Duplex",
              "Earth Shelter, Bermed",
              "Earth Shelter, Hillside",
              "Earth Shelter, Underground",
              "Eastlake",
              "Eclectic, French",
              "Eclectic, Neoclassical",
              "English Style",
              "European Influenced",
              "Farmhouse",
              "Federal",
              "Fourplex",
              "French Provincial (also French Revival)",
              "French Style",
              "Geodesic Dome",
              "Georgian",
              "Georgian Revival",
              "German Stone",
              "Gingerbread",
              "Gothic Revival",
              "Greek Revival",
              "Gulf Coast Style",
              "High Ranch",
              "International Style",
              "Italian Villa",
              "Italianate",
              "Katrina Cottage",
              "Key West Style",
              "Log",
              "Log Kit",
              "Mansard",
              "Mansion",
              "Mediterranean",
              "Mission Style",
              "Moderne",
              "Monterey Style",
              "Neo-Classical",
              "Neo-Colonial",
              "Neo-French",
              "Neo-Mediterranean",
              "Neo-Tudor",
              "Neo-Victorian",
              "New England Colonial",
              "Normandy Style",
              "Octagon",
              "One-of-a-Kind",
              "Palatial",
              "Park Model",
              "Period",
              "Post Modern",
              "Prairie Style",
              "Public Building-Like",
              "Pueblo",
              "Queen Anne",
              "Quonset Hut",
              "Raised Cape",
              "Raised Ranch",
              "Rambler",
              "Rammed Earth",
              "Ranch",
              "Regency",
              "Renaissance Revival",
              "Richardsonian Romanesque",
              "Romanesque",
              "Saltbox",
              "Santa Barbara",
              "Santa Fe Style",
              "Second Empire",
              "Shaker",
              "Shingle Style",
              "Shotgun Style",
              "Singlewide",
              "Soil Cement",
              "Southampton Style",
              "Spanish Mission",
              "Spanish Revival",
              "Spanish Style",
              "Split Entry",
              "Split Level",
              "Stick, Eastern",
              "Stick, Western",
              "Strawbale",
              "Sullivanesque",
              "Townhouse",
              "Townhouse - End Unit",
              "Townhouse, Federal Style",
              "Townhouse, Federal Style - End Unit",
              "Townhouse, Georgian Style",
              "Townhouse, Georgian Style - End Unit",
              "Townhouse, Stand Alone",
              "Tract Home",
              "Tri-Level",
              "Triplewide",
              "Triplex",
              "Tudor",
              "Tuscan",
              "Usonian",
              "Vernacular/Folk",
              "Victorian",
              "Western Mountain",
              "Wrightian"
            ]
          },
          "constructionQuality": {
            "type": "string",
            "description": "The estimated quality of the construction and finishes.",
            "enum": [
              "basic / economic",
              "basic",
              "modest / fair",
              "average / standard",
              "average",
              "above average / upgraded",
              "above average",
              "expensive / custom",
              "expensive",
              "very expensive / luxury",
              "very expensive",
              "opulent / museum quality",
              "exceptional"
            ]
          },
          "physicalShape": {
            "type": "string",
            "description": "The physical shape of the property. Example values include rectangular, contemporary, or unique.",
            "example": "rectangular"
          },
          "constructionType": {
            "type": "string",
            "description": "The construction method used to build the property.",
            "enum": [
              "a - frame",
              "autoclaved aerated concrete",
              "brick masonry",
              "brick veneer",
              "foam form concrete",
              "framing, steel",
              "framing, wood",
              "framing, wood with elevated slab",
              "hoop arch",
              "log",
              "masonry, block",
              "masonry, brick",
              "masonry, stone",
              "metal frame",
              "metal frame (slant)",
              "milled timbers",
              "modular, wood frame",
              "pole frame",
              "post and beam",
              "poured concrete",
              "prefabricated",
              "quonset",
              "rammed earth",
              "reinforced concrete frame",
              "soil cement",
              "stick",
              "stone masonry",
              "stone veneer",
              "strawbale",
              "structural Insulated panel",
              "stucco on frame",
              "stucco on masonry",
              "timber / post & beam",
              "veneer, brick",
              "veneer, brick with wood frame",
              "veneer, stone",
              "wood framing"
            ]
          },
          "exterior": {
            "type": "string",
            "description": "The type of the exterior wall of the structure.",
            "enum": [
              "adobe",
              "aluminum siding",
              "asbestos replacement, cement fiber",
              "asphalt",
              "autoclaved aerated concrete, exposed",
              "autoclaved aerated concrete, painted",
              "board and batten",
              "brick masonry",
              "brick veneer, face brick",
              "brick veneer, glazed",
              "brick veneer, Jumbo",
              "brick veneer, large",
              "brick veneer, Norman",
              "brick veneer, roman",
              "brick veneer, standard",
              "brick wall, cavity",
              "brick wall, reinforced",
              "brick with block backup",
              "brownstone",
              "cedar siding",
              "cement fiber",
              "clapboard",
              "concrete block",
              "concrete block, glazed",
              "concrete block, slumpstone",
              "concrete block, split face",
              "concrete wall, cast in place",
              "concrete, reinforced",
              "decorative wood shingle",
              "drivit/eifs",
              "glass block",
              "glass panels",
              "half log siding",
              "hardboard",
              "limestone",
              "local stone",
              "log (>11\" diameter)",
              "log (<11\" diameter)",
              "metal siding",
              "metal siding, aluminum, simulated wood",
              "metal siding, baked enamel",
              "metal siding, corrugated aluminum",
              "metal siding, corrugated aluminum, painted",
              "metal siding, corrugated composition",
              "metal siding, corrugated fiberglass",
              "metal siding, corrugated galvanized iron",
              "metal siding, porcelain",
              "none",
              "paint",
              "panels, brick",
              "panels, cement fiber",
              "panels, concrete block",
              "panels, fiberglass",
              "panels, glass and aluminum",
              "panels, glass and metal",
              "panels, polycarbonate (greenhouse)",
              "panels, rubble",
              "panels, sandwich",
              "panels, stone",
              "panels, stucco",
              "plywood with batts",
              "polyethylene film (greenhouse)",
              "precast concrete",
              "precast concrete panel",
              "precast concrete panel, granite finish",
              "precast stone",
              "rammed earth",
              "redwood siding",
              "siding, barn board",
              "siding, board and batten",
              "siding, cedar beveled",
              "siding, cedar shingles",
              "siding, glasweld",
              "siding, hardboard",
              "siding, lap board",
              "siding, log",
              "siding, plywood",
              "siding, redwood beveled",
              "siding, spaced board",
              "siding, tongue and grove",
              "siding, vinyl",
              "solid stone",
              "steel siding",
              "stone rubble",
              "stone veneer, arizona stone",
              "stone veneer, granite",
              "stone veneer, lava stone",
              "stone veneer, limestone",
              "stone veneer, rubble",
              "stone veneer, sandstone",
              "stucco",
              "stucco over masonry",
              "stucco with half timbering",
              "stucco, slick finish",
              "stucco, smooth coat",
              "stucco, tuscan finish",
              "t1-11 siding",
              "tabby siding",
              "tilt-up, concrete wall",
              "veneer, common brick",
              "veneer, face brick",
              "veneer, rubble",
              "veneer, stone",
              "vinyl siding",
              "wood shake/shingle",
              "wood siding",
              "wood stresskin panels"
            ]
          },
          "roofCovering": {
            "type": "string",
            "description": "The type of the roof on the structure.",
            "enum": [
              "acrylic",
              "aluminum",
              "architectural shingle",
              "asbestos shingle",
              "asbestos shingle replacement",
              "asphalt shingle",
              "asphalt shingle with solar panels",
              "barrel tile",
              "bituthene, self-seal",
              "built-up composition, high rise, 3 ply",
              "built-up composition, low rise, 3 ply",
              "built-up tar and gravel",
              "cedar shingle/shake",
              "cement fiber",
              "clay tile",
              "composition roll",
              "composition shingle",
              "composition, built-up",
              "concrete tile",
              "copper clad stainless steel",
              "copper, standing seam",
              "corrugated aluminum",
              "corrugated composition",
              "corrugated fiberglass",
              "corrugated galvanized iron",
              "dibiten",
              "dibiton",
              "dimensional asphalt shingle",
              "earth covered",
              "elastomeric",
              "epdm membrane",
              "fiberglass shingle",
              "glass panels",
              "glazed tile",
              "hail proof shingle",
              "lamarite shingle",
              "ludowici tile",
              "metal other than standing seam",
              "metal, standing seam",
              "metal, corrugated",
              "metal, ribbed",
              "minera shingle",
              "mineral shingle",
              "plastic, elastomeric membrane",
              "plastic, elastomeric membrane, loose, trocal",
              "plastic, elastomeric membrane, neoprene",
              "polycarbonate panels",
              "polyethylene film",
              "polyurethane foam",
              "pvc membrane",
              "red slate",
              "rubber",
              "shakes, cedar",
              "shakes, wood",
              "shingles, aluminum tab",
              "shingles, architectural",
              "shingles, asbestos replacement",
              "shingles, asphalt",
              "shingles, cedar",
              "shingles, composition",
              "shingles, composition asphalt",
              "shingles, dimensional asphalt",
              "shingles, fiberglass tabs",
              "shingles, minera",
              "shingles, mineral",
              "shingles, porcelain enamel",
              "shingles, wood",
              "silicone, 3 ply, rolled",
              "slate",
              "slate, graduated",
              "slate, patterned",
              "slate, synthetic",
              "spanish tile",
              "standing seam copper",
              "standing seam metal",
              "steel",
              "steel with solar panels",
              "tar and gravel",
              "tile, barrel",
              "tile, clay, flat bed",
              "tile, clay, glazed, interlock",
              "tile, clay, spanish",
              "tile, concrete, flat",
              "tile, concrete, interlock",
              "tile, concrete, premium",
              "tile, ludowici",
              "tile, slate",
              "tile, slate, graduated",
              "tile, slate, patterned",
              "tile, slate, red",
              "tile, slate, synthetic",
              "tile with solar panels",
              "tpo membrane",
              "wood shake",
              "wood shingle",
              "urethane foam, silicone cover"
            ]
          },
          "roofConfiguration": {
            "type": "string",
            "description": "The roof configuration of the building. This field is only available for CA properties."
          },
          "foundationType": {
            "type": "string",
            "description": "The foundation type of the building. This field is only available for CA properties.",
            "enum": [
              "brick",
              "concrete block",
              "concrete slab",
              "fieldstone",
              "holland clay tile",
              "no permanent foundation",
              "pier",
              "pier and beam",
              "pilings",
              "poured concrete",
              "short pier",
              "stone",
              "stone rubble and mortar",
              "treated wood"
            ]
          },
          "numStories": {
            "type": "integer",
            "format": "int32",
            "description": "Number of stories in the structure. This field is only available for CA properties."
          },
          "siteSlope": {
            "type": "string",
            "description": "The slope of the building site."
          },
          "locale": {
            "type": "string",
            "description": "The location type of the property.",
            "enum": [
              "beachfront",
              "city, large",
              "city, medium",
              "city, small",
              "coastal",
              "exclusive pocket",
              "gated community",
              "island, accessible by boat only",
              "island, accessible by bridge",
              "remote, moderate",
              "remote, slight",
              "remote, very",
              "resort",
              "rural",
              "suburban",
              "town",
              "urban",
              "waterfront"
            ]
          },
          "yearBuilt": {
            "type": "string",
            "description": "The year of the occupation certificate."
          },
          "livingAreaSqFt": {
            "type": "integer",
            "format": "int64",
            "description": "The total area of all buildings on this property in square feet."
          },
          "costBreakdown": {
            "$ref": "#/components/schemas/CostBreakdown",
            "description": "A breakdown of replacement costs. This data is only available for CA properties."
          },
          "costDetails": {
            "$ref": "#/components/schemas/CostDetails",
            "description": "A range of estimates for the replacement cost of the property. This data is only available for commercial\nproperties.\n"
          },
          "replacementCost": {
            "type": "integer",
            "format": "int64",
            "description": "The total estimated replacement cost for the property."
          },
          "locationType": {
            "type": "string",
            "description": "The type of the property location.",
            "enum": [
              "Residential",
              "Commercial"
            ]
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Cacheable": {
        "type": "object"
      },
      "PropertyResponse": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/PropertyInfo"
          },
          {
            "$ref": "#/components/schemas/PropertyRisk"
          }
        ],
        "example": "    {\n        \"requestId\": \"719408ea-59bf-46b1-a411-9d65c159db64\",\n        \"submissionId\": \"719408ea-59bf-46b1-a411-9d65c159db64\",\n        \"status\": \"SUCCESS\",\n        \"matchDescription\": \"Artificial match\",\n    }\n",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search.",
            "enum": [
              "SUCCESS",
              "NOT FOUND"
            ]
          },
          "matchDescription": {
            "type": "string",
            "description": "How the search matched to given address or geocode.",
            "enum": [
              "Default match logic",
              "Artificial match",
              "Not Found"
            ],
            "example": "Default match logic"
          },
          "document": {
            "$ref": "#/components/schemas/Cacheable",
            "description": "The data returned based on the search. Null is returned if the search failed to find any data"
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Owner": {
        "type": "object",
        "description": "Object used to hold owner information for a property request. Either the last name or the firm name must be entered.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Owner's first name"
          },
          "lastName": {
            "type": "string",
            "description": "Owner's last name"
          },
          "firmName": {
            "type": "string",
            "description": "Name of the owner. This may be a business, trust or other non-personal entity"
          }
        }
      },
      "PropertyDetailsRequest": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Street address for a location, may also include secondary (e.g. apartment) information. This field is required for an address block to be valid.",
            "example": 18595,
            "minLength": 1
          },
          "addressLine2": {
            "type": "string",
            "description": "This field will be appended to addressLine1",
            "writeOnly": true
          },
          "city": {
            "type": "string",
            "description": "Name of the city in which the address is located. A city or a ZIP Code must be present for an address block to be valid.",
            "example": "Highlands Ranch"
          },
          "state": {
            "type": "string",
            "description": "Standard two-character state abbreviation. A state abbreviation is required for an address block to be valid",
            "example": "CO",
            "minLength": 1
          },
          "zipCode": {
            "type": "string",
            "description": "Five-digit ZIP Code for the input address. A city or a ZIP Code must be present for an address block to be valid.",
            "example": 80126
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "Longitude, in signed, decimal degrees for the input location. A longitude is required for a geocode block to be valid.",
            "example": -77.6499
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude, in signed, decimal degrees for the input location. A latitude is required for a geocode block to be valid.",
            "example": 37.46439
          },
          "apn": {
            "type": "string",
            "description": "Optional Assessor's Parcel Number (APN) that will be used for the parcel lookup. Note that the APN will be\ntried before the address. The address is still required, and the last line of the address will be used to\ndetermine the county in which the APN is located.\n"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner",
            "description": "Optional owner's name of the parcel. This can be the first and last name of an individual or the name of an\norganization. The name is only used to resolve multiple matches when the property cannot be uniquely identified\nfrom the input address alone.\n"
          },
          "addressType": {
            "type": "string",
            "description": "Calculated type for the returned address. ",
            "enum": [
              "General Delivery",
              "High-rise",
              "PO Box",
              "Rural route/Highway contract",
              "Street Address",
              "Address type indeterminable",
              "Address incomplete",
              "Not Available",
              "Overseas Military Address"
            ],
            "readOnly": true
          }
        }
      },
      "generalError": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the request."
          },
          "requestId": {
            "type": "string",
            "description": "The request Id."
          },
          "submissionId": {
            "type": "string",
            "description": "The submission Id."
          },
          "message": {
            "type": "string",
            "description": "The error message returned by the service."
          }
        }
      },
      "JoinField": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "The name of the field to join outcomes to request data"
          },
          "fieldValue": {
            "type": "string",
            "description": "The value of the field to join outcomes to request data"
          }
        },
        "required": [
          "fieldName",
          "fieldValue"
        ]
      },
      "OutcomeRequest": {
        "type": "object",
        "description": "An outcome to be added.",
        "properties": {
          "originalRequestId": {
            "type": "string",
            "description": "The requestId of the original request made to the Fenris service. The data from that request will have the outcome\nappended in order to train new versions of the model.\n",
            "example": "a442d998-7ffd-4e34-acba-495ec27c293b"
          },
          "originalSubmissionId": {
            "type": "string",
            "description": "The `submissionId` of the original request made to the Fenris service. The data from that request will have the outcome\nappended in order to train new versions of the model.\n",
            "example": "Poliy 1234567AB"
          },
          "joinField": {
            "$ref": "#/components/schemas/JoinField",
            "description": "The name and value of a custom field to join outcomes to request data. This field value should be unique across\nThe requests to the scoring service.\n"
          },
          "outcome": {
            "type": "string",
            "description": "The outcome of the process or value of the target variable to be used in training. The string will be coerced into\nan appropriate type (boolean, numeric, date, etc) in order to retrain the model. Standard synonyms for boolean\nvariables (Yes/No, Y/N, true/false, T/F, etc.) are accepted.\n",
            "example": "Y"
          }
        },
        "required": [
          "outcome"
        ]
      },
      "DriverRecordResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of the driver record search. One of the following values is returned:\n* **Clean**: A clean MVR was on file for this driver.\n* **No Evidence Found**: A search of court records in the state did not find any evidence of violations by this driver.\n* **Minor Violations Found**: At least one minor violation and no major violations were found for this driver.\n* **Major Violations Found**: At least one major violation, accident or DUI was found for this driver.\n* **No Results Found**: No MVR record was on file for this driver, and the state does not support searches of court records.\n* **Not Attempted**: A Driver's License was not found for this driver so no search could be carried out.\n* **Clean - Developer Data**: A clean MVR was on file for the Developer Data driver.\n* **No Evidence Found - Developer Data**: A search of court records in the state did not find any evidence of violations by the Developer Data driver.\n* **Minor Violations Found - Developer Data**: At least one minor violation and no major violations were found for the Developer Data driver.\n* **Major Violations Found - Developer Data**: At least one major violation, accident or DUI was found for the Developer Data driver.\n* **No Results Found - Developer Data**: No MVR record was on file for the Developer Data driver, and the state does not support searches of court records.\n",
            "enum": [
              "Clean",
              "No Evidence Found",
              "Minor Violations Found",
              "Major Violations Found",
              "No Results Found",
              "Not Attempted",
              "Clean - Developer Data",
              "No Evidence Found - Developer Data",
              "Minor Violations Found - Developer Data",
              "Major Violations Found - Developer Data",
              "No Results Found - Developer Data"
            ],
            "example": "No Evidence Found"
          },
          "licenseSearchStatus": {
            "type": "string",
            "description": "Status of search for driver's license number. One of the following values is returned:\n* **Supplied**: The driver's license was supplied in the request. No search for a driver's license was performed.\n* **Found**: The driver's license was not supplied in the request. A search was performed, and the a driver's\n    license was found for this driver.\n* **Not Found**: The driver's license was not supplied in the request. A search was performed, but no driver's\n    license was not found for this driver.\n",
            "enum": [
              "Supplied",
              "Found",
              "Not Found",
              "Not Attempted"
            ],
            "example": "Found"
          },
          "minorCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Number of violations of this type",
            "example": 1
          },
          "minorLatest": {
            "type": "string",
            "description": "Date of the most recent violation of this type found on record",
            "example": "07/09/1996"
          },
          "majorCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Number of violations of this type",
            "example": 1
          },
          "majorLatest": {
            "type": "string",
            "description": "Date of the most recent violation of this type found on record",
            "example": "07/09/1996"
          },
          "accidentCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Number of violations of this type",
            "example": 1
          },
          "accidentLatest": {
            "type": "string",
            "description": "Date of the most recent violation of this type found on record",
            "example": "07/09/1996"
          },
          "duiCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Number of violations of this type",
            "example": 1
          },
          "duiLatest": {
            "type": "string",
            "description": "Date of the most recent violation of this type found on record",
            "example": "07/09/1996"
          },
          "ratingFactor": {
            "$ref": "#/components/schemas/RatingFactor",
            "description": "Rating factor for this driver, based on the incidents found. Note that the rating factor does not include\nthe opportunity discounts.\n"
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "RatingFactor": {
        "type": "object",
        "properties": {
          "preferred": {
            "type": "number",
            "format": "double"
          },
          "standard": {
            "type": "number",
            "format": "double"
          },
          "nonStandard": {
            "type": "number",
            "format": "double"
          },
          "fullSpectrum": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "A mailing or street address.",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Street address for a location, may also include secondary (e.g. apartment) information. This field is required for an address block to be valid.",
            "example": 18595,
            "minLength": 1
          },
          "addressLine2": {
            "type": "string",
            "description": "This field will be appended to addressLine1",
            "writeOnly": true
          },
          "city": {
            "type": "string",
            "description": "Name of the city in which the address is located. A city or a ZIP Code must be present for an address block to be valid.",
            "example": "Highlands Ranch"
          },
          "state": {
            "type": "string",
            "description": "Standard two-character state abbreviation. A state abbreviation is required for an address block to be valid",
            "example": "CO",
            "minLength": 1
          },
          "zipCode": {
            "type": "string",
            "description": "Five-digit ZIP Code for the input address. A city or a ZIP Code must be present for an address block to be valid.",
            "example": 80126
          },
          "addressType": {
            "type": "string",
            "description": "Calculated type for the returned address. ",
            "enum": [
              "General Delivery",
              "High-rise",
              "PO Box",
              "Rural route/Highway contract",
              "Street Address",
              "Address type indeterminable",
              "Address incomplete",
              "Not Available",
              "Overseas Military Address"
            ],
            "readOnly": true
          }
        }
      },
      "DriverRecordPerson": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of person.",
            "example": "Marcus",
            "minLength": 1
          },
          "middleName": {
            "type": "string",
            "description": "The middle name or initial of person.",
            "example": "P"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of person.",
            "example": "Smith",
            "minLength": 1
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of person for service response.\nEither licenseNumber or dateOfBirth is required.\nSupports the following formats:\n* **M/D/YYYY**\n* **or MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD*** (ISO DATE)\n\n**2 digit year is not supported.**\n",
            "example": "11/07/1997",
            "pattern": "^\\s*(\\d{4}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])|\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])|(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]\\d{4}|(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\\d{4}){1}\\s*$"
          },
          "licenseNumber": {
            "type": "string",
            "description": "The driver's license number. Either licenseNumber or dateOfBirth is required.",
            "example": "A12345678"
          },
          "licenseState": {
            "type": "string",
            "description": "The state where the driver's license was issued. If not present, then the state in the address is used.",
            "example": "IA"
          }
        },
        "required": [
          "dateOfBirth"
        ]
      },
      "DriverRecordRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/DriverRecordPerson",
            "description": "The person of interest, to perform a driver record search for."
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The address on the license of the person of interest; required if the driver's license is not supplied."
          }
        },
        "required": [
          "person"
        ]
      },
      "AutoPrefillResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Status of search and if requested (responseType=C) indication about registered vehicles search. One of:\n* **Success** - Matched both the standard data and the registered vehicle lookup.\n* **Success - Restricted State** - Found a match in the standard data, but the vehicle lookup data is limited\n                                   because the requested information comes from a restricted state.\n                                   Restricted states are: **CA**, **HI**, **NH**, **NY**, **OK**, **PA**, **VA**.\n* **Success - No VIN** - Matched the standard data, but found no registered vehicles in the vehicle lookup.\n* **VIN Return Only** - Found registered vehicles in the vehicle lookup but did not match the standard data.\n* **Not Found** - Found no match in both standard data and the registered vehicle lookup.\n",
            "enum": [
              "Success",
              "Success - Restricted State",
              "Success - No VIN",
              "VIN Return Only",
              "Not Found",
              "Not Found - Restricted State"
            ]
          },
          "matchDescription": {
            "type": "string",
            "description": "The match strategy that provided the returned information.",
            "enum": [
              "Default match logic",
              "First and last name switched",
              "Changed last name",
              "Household match",
              "Multiple matches found",
              "Not found",
              "Artificial match",
              "Household artificial match"
            ],
            "example": "Default match logic"
          },
          "addressDescription": {
            "type": "string",
            "description": "Whether the address was verified or not.",
            "enum": [
              "Address verified",
              "City, state and ZIP verified, but street address not found",
              "More than one possible address found",
              "Street address verified but unit is missing/wrong",
              "Address verification failed",
              "Address verification not attempted",
              "Artificial address matched"
            ],
            "example": "Address verified"
          },
          "primary": {
            "$ref": "#/components/schemas/Primary",
            "description": "Data about the Primary Named Insured (PNI) and the household. See PNI for details."
          },
          "drivers": {
            "type": "array",
            "description": "An array of the drivers associated with this household.",
            "items": {
              "$ref": "#/components/schemas/Driver"
            }
          },
          "vehicles": {
            "type": "array",
            "description": "An array of vehicles associated with this household.",
            "items": {
              "$ref": "#/components/schemas/Vehicle"
            }
          },
          "vehiclesEnhanced": {
            "type": "array",
            "description": "An array of vehicle information including VIN and registration.",
            "items": {
              "$ref": "#/components/schemas/EnhancedVehicle"
            }
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Driver": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The driver's first name."
          },
          "middleName": {
            "type": "string",
            "description": "The driver's middle name"
          },
          "lastName": {
            "type": "string",
            "description": "The driver's family name or surname."
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "The driver's date of birth in MM/DD/YYYY format.",
            "example": "05/05/1996"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "description": "The calculated age of the driver based on the birthdate."
          },
          "gender": {
            "type": "string",
            "description": "The reported gender of the driver, one of the following:\n* **Male**\n* **Female**\n* **Non-binary**\n* **Not Available**\n* **Unknown**\n",
            "enum": [
              "Male",
              "Female",
              "Non-binary",
              "Not Available",
              "Unknown"
            ]
          },
          "maritalStatus": {
            "type": "string",
            "description": "Marital status of the driver, one of the following:\n* **Married**\n* **Single**\n* **Unknown**\n",
            "enum": [
              "Married",
              "Single",
              "Unknown"
            ]
          },
          "memberCode": {
            "type": "string",
            "description": "Member code, one of the following:\n* **Primary Household Member**\n* **Secondary Household Member**\n* **Other Household Members**\n",
            "enum": [
              "Primary Household Member",
              "Secondary Household Member",
              "Other Household Members"
            ]
          },
          "verificationDate": {
            "type": "string",
            "format": "date",
            "description": "The date of the last verification of this driver, in MM/DD/YYYY format.",
            "example": "09/19/2023"
          }
        }
      },
      "EnhancedVehicle": {
        "type": "object",
        "properties": {
          "vin": {
            "type": "string",
            "description": "The Vehicle Identification Number (VIN), a combination of 17 letters and numbers that uniquely identifies the make, model, and year of the car."
          },
          "make": {
            "type": "string",
            "description": "The make of the vehicle."
          },
          "model": {
            "type": "string",
            "description": "The model name of the vehicle."
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "description": "The model year of the vehicle."
          },
          "color": {
            "type": "string",
            "description": "The vehicle's paint color, as defined by the manufacturer."
          },
          "trim": {
            "type": "string",
            "description": "The vehicle's name-based trim style, as defined by the manufacturer.",
            "example": "Hybrid"
          },
          "registeredState": {
            "type": "string",
            "description": "The state where the vehicle is registered."
          },
          "expirationDate": {
            "type": "string",
            "description": "The date that the current vehicle registration ends, in YYYY-MM-DD format."
          },
          "plateType": {
            "type": "string",
            "description": "The state-specific vehicle license plate type.",
            "example": "permanent"
          },
          "leaseIndicator": {
            "type": "boolean",
            "description": "True if the vehicle is currently leased."
          },
          "brandedTitleIndicator": {
            "type": "boolean",
            "description": "True if the vehicle has previously been identified as a total loss."
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "The vehicle price paid by the owner in USD."
          },
          "manufacturerBasePrice": {
            "type": "number",
            "format": "double",
            "description": "The manufacturer's suggested vehicle base price in USD, based on the options, features, and other vehicle characteristics."
          },
          "driveSystem": {
            "type": "string",
            "description": "The vehicle's drive system type.",
            "example": "two-wheel drive"
          },
          "registeredOwners": {
            "type": "array",
            "description": "An array of registered owners.",
            "items": {
              "$ref": "#/components/schemas/RegisteredOwner"
            }
          },
          "vinChangeIndicator": {
            "type": "string",
            "description": "Returns an indicator to show whether the vehicle has a previous/different VIN. One of:\n* **C** - VIN Change\n* **S** - No VIN Change\n",
            "enum": [
              "C",
              "S"
            ]
          },
          "bodyStyle": {
            "type": "string",
            "description": "The body style that refers to the shape and model of a manufacturer's vehicle.",
            "example": "coupe"
          },
          "transactionDate": {
            "type": "string",
            "description": "The vehicle purchase date."
          },
          "plateNumber": {
            "type": "string",
            "deprecated": true,
            "description": "The vehicle's license plate number. To protect PII, this will always be blank."
          },
          "brandedTitleCode": {
            "type": "string",
            "description": "For branded titles, this field indicates the type of branded title, based on the state of registration."
          },
          "addressType": {
            "type": "string",
            "description": "The type of location for the address. One of:\n* **General Delivery** - A mail service for those without a permanent address, often used as a temporary mailing address.\n* **High-rise** - An address located in a multi-unit building, such as an apartment building.\n* **PO Box** - A post office box.\n* **Rural Route/Highway contract** - A mail delivery route in a area away from any large towns or cities.\n* **Street Address** - A street address.\n* **Address type indeterminable** - Unable to determine address type.\n* **Address incomplete** - Address is incomplete.\n* **Not Available** - Address type is not available.\n* **Overseas Military Address** - Address is in a overseas U.S. military base.\n",
            "enum": [
              "General Delivery",
              "High-rise",
              "PO Box",
              "Rural route/Highway contract",
              "Street Address",
              "Address type indeterminable",
              "Address incomplete",
              "Not Available",
              "Overseas Military Address"
            ]
          },
          "addressLine1": {
            "type": "string",
            "description": "The standard street and unit address elements."
          },
          "city": {
            "type": "string",
            "description": "The city for this address."
          },
          "state": {
            "type": "string",
            "description": "The two-character state abbreviation for this address."
          },
          "zipCode": {
            "type": "string",
            "description": "The five-digit postal code for this address."
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "description": "The gross vehicle weight rating (GVWR) or gross vehicle mass (GVM), the maximum operating weight of a vehicle, as specified by the manufacturer."
          },
          "type": {
            "type": "string",
            "description": "Type of vehicle according to VIN database",
            "enum": [
              "Motorcycle",
              "Passenger Car",
              "Truck",
              "Bus",
              "Trailer",
              "Multipurpose Passenger Vehicle (MPV)",
              "Low Speed Vehicle (LSV)",
              "Incomplete Vehicle",
              "Off Road Vehicle"
            ],
            "example": "Passenger Car"
          },
          "confidence": {
            "type": "integer",
            "format": "int32",
            "description": "A value from 1 - 100 that indicates the confidence that the vehicle is still present, based on the last time this vehicle was observed with this household. Vehicles determined from motor vehicle records have a confidence of 100.",
            "example": 86,
            "maximum": 100,
            "minimum": 1
          }
        }
      },
      "Primary": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "description": "Gender of individual.",
            "enum": [
              "Male",
              "Female",
              "Non-binary",
              "Unknown"
            ]
          },
          "maritalStatus": {
            "type": "string",
            "description": "Marital status of individual.",
            "enum": [
              "Married",
              "Single",
              "Unknown"
            ]
          },
          "memberCode": {
            "type": "string",
            "description": "The membership code for the household individual.",
            "enum": [
              "Primary Household Member",
              "Secondary Household Member",
              "Other Household Members"
            ]
          },
          "parsedAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The address for this record. See address for details."
          },
          "homeOwnerStatus": {
            "type": "string",
            "description": "The home ownership status of the individual at this address.",
            "enum": [
              "Definite Renter",
              "Probable Renter",
              "Definite Owner",
              "Probable Owner",
              "Unknown"
            ]
          },
          "lengthOfResidence": {
            "type": "string",
            "description": "The length of time at the current residence.",
            "enum": [
              "0-6 mos",
              "7-12 mos.",
              "1-2 yrs",
              "3-5 yrs",
              "6-10 yrs",
              "11-15 yrs",
              "16-20 yrs",
              "20+ yrs"
            ],
            "example": "6-10 yrs"
          },
          "numberOfGenerations": {
            "type": "integer",
            "format": "int32",
            "description": "The number of distinct generations present in the household."
          },
          "presenceOf16Or17YearOlds": {
            "type": "boolean",
            "description": "True if the household includes 16 or 17 year olds."
          },
          "babyBoomer": {
            "type": "boolean",
            "description": "True if at least one person in the household was born between 1944 and 1964."
          },
          "dualIncomeNoKids": {
            "type": "boolean",
            "description": "True if the household is made up of dual-income earners without children."
          },
          "millennial": {
            "type": "boolean",
            "description": "True if the household includes at least one person born between 1980 and 1994."
          },
          "vehicleHouseholdNum": {
            "type": "integer",
            "format": "int32",
            "description": "The probable number of vehicles in the household."
          }
        }
      },
      "RegisteredOwner": {
        "type": "object",
        "properties": {
          "surname": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "businessName": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "ownerType": {
            "type": "string"
          }
        }
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "integer",
            "format": "int32",
            "description": "A value in the range of 0 through 100, representing the likelihood that this vehicle remains associated with this household.",
            "example": 42
          },
          "description": {
            "type": "string",
            "description": "The year, make, and model of a car in a single descriptive string.",
            "example": 2016
          },
          "year": {
            "type": "string",
            "description": "The model year of the vehicle.",
            "example": 1993
          },
          "make": {
            "type": "string",
            "description": "The make of the vehicle.",
            "example": "Jeep"
          },
          "model": {
            "type": "string",
            "description": "The model of the vehicle.",
            "example": "Cherokee"
          },
          "type": {
            "type": "string",
            "description": "The type of the vehicle, based on state registration."
          },
          "fuelType": {
            "type": "string",
            "description": "The type of fuel used by the vehicle.",
            "example": "Electric"
          },
          "mileage": {
            "type": "string",
            "description": "The estimated range of odometer mileage for the vehicle.",
            "example": "Electric"
          },
          "marketValue": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AutoPrefillRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Input address for the search."
          },
          "otherAddresses": {
            "type": "array",
            "description": "Optional address(es) to be used in addition to input address for the search.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "responseType": {
            "type": "string",
            "default": "M",
            "description": "Defines if VIN data is returned. One of:\n* **M**: Return only the base data. This is the default.\n* **C**: Return both the base data and the enhanced vehicle information. To access this response type, this service feature must be activated for your account.\",\n* **MC**: Return both the base data and the enhanced vehicle information for motorcycles. To access this response type, this service feature must be activated for your account.\",\n",
            "enum": [
              "M",
              "C",
              "MC"
            ]
          }
        },
        "required": [
          "address",
          "person"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Kyle",
            "minLength": 1
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial of the person."
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Murdock",
            "minLength": 1
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the person.\nInput allows the following formats:\n* **M/D/YYYY**\n* **MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD** (ISO DATE)\n\nA two digit year is not supported.",
            "example": "05/20/1970",
            "pattern": "^\\s*(\\d{4}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])|\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])|(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]\\d{4}|(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\\d{4}){1}\\s*$"
          }
        }
      },
      "VinDecoderResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Status of decoding.",
            "enum": [
              "Success",
              "Failure"
            ]
          },
          "matchDescription": {
            "type": "string",
            "description": "A description of the match logic used to find this VIN.",
            "example": "VIN decoded clean. Check Digit (9th position) is correct"
          },
          "make": {
            "type": "string",
            "description": "The make of the vehicle.",
            "example": "OLDSMOBILE"
          },
          "model": {
            "type": "string",
            "description": "The model of the vehicle.",
            "example": "Alero"
          },
          "modelYear": {
            "type": "string",
            "description": "The model year of the vehicle.",
            "example": 1999
          },
          "trim": {
            "type": "string",
            "description": "The vehicle's name-based trim style as defined by the manufacturer.",
            "example": "GLS"
          },
          "vehicleType": {
            "type": "string",
            "enum": [
              "Motorcycle",
              "Passenger Car",
              "Truck",
              "Bus",
              "Trailer",
              "Multipurpose Passenger Vehicle (MPV)",
              "Low Speed Vehicle (LSV)",
              "Incomplete Vehicle",
              "Off Road Vehicle"
            ],
            "example": "Passenger Car"
          },
          "bodyClass": {
            "type": "string",
            "description": "The body class of the vehicle.",
            "example": "Sedan/Saloon"
          },
          "vinDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "A set of string values providing additional details about the vehicle.\nThe names in this object are reported by the manufacturer and will change depending on\nthe year, make, and model of the vehicle."
            },
            "description": "A set of string values providing additional details about the vehicle.\nThe names in this object are reported by the manufacturer and will change depending on\nthe year, make, and model of the vehicle."
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "DriversLicenseSearchResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of the driver's license search. One of the following values is returned:\n* **Success**: A driver's license was found.\n* **Success - Developer Data**: A driver's license was found for Developer Data.\n* **Not Found**: No license was found.\n",
            "enum": [
              "Success",
              "Success - Developer Data",
              "Not Found"
            ],
            "example": "Success"
          },
          "licenseState": {
            "type": "string",
            "description": "The state where the driver's license was issued."
          },
          "licenseNumber": {
            "type": "string",
            "description": "The driver's license number."
          },
          "maskedLicenseNumber": {
            "type": "string",
            "description": "The masked driver's license number, where only the last four characters are visible and the rest of the characters are obfuscated."
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "DriversLicenseSearchPerson": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the person.",
            "example": "Marcus"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the person.",
            "example": "Smith"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name or initial of the person.",
            "example": "P"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the person. Required if licenseNumber is not provided.\n\nSupports the following formats:\n* **M/D/YYYY**\n* **or MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD*** (ISO DATE)\n\n**A 2 digit year is not supported.**\n",
            "example": "11/07/1997",
            "pattern": "^\\s*(\\d{4}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])|\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])|(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]\\d{4}|(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\\d{4}){1}\\s*$"
          }
        },
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName"
        ]
      },
      "DriversLicenseSearchRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/DriversLicenseSearchPerson",
            "description": "The person of interest to perform a license search for."
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The home address of the person of interest."
          }
        },
        "required": [
          "address",
          "person"
        ]
      },
      "CommercialScoringResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "score": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "decile": {
            "type": "integer",
            "format": "int32"
          },
          "model": {
            "type": "string"
          },
          "prediction": {
            "$ref": "#/components/schemas/Prediction"
          },
          "matchDescription": {
            "type": "string",
            "default": "Default match logic",
            "description": "How the search matched to the individual or household.",
            "enum": [
              "Default match logic",
              "First and last name switched",
              "Changed last name",
              "Household match",
              "Multiple matches found",
              "Not Found",
              "Artificial match",
              "Household artificial match"
            ]
          },
          "trainingData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Prediction": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CommercialScoringRequest": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "description": "Business name(s) which can include alternative names (legal, trade, DBA) or person's first and last name.",
            "example": [
              "Cherry on Top Cupcake",
              "Cherry on Top Bakery",
              "Cherry Cupcake Midtown",
              "Cherry Cupcakes"
            ],
            "items": {
              "type": "string",
              "minLength": 1
            },
            "minItems": 1
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Address for the business location or just the state",
            "example": {
              "addressLine1": "32301 Juergensen ST NW",
              "city": "Washington",
              "state": "DC",
              "zipCode": "20007"
            }
          },
          "otherAddresses": {
            "type": "array",
            "description": "Optional address(es) to be used in addition to input address for the search.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "otherFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "address",
          "names"
        ]
      },
      "BusinessResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "<a name=\"smb-status\"></a>\nThe final status of the search. Definitions of possible returns are as follows:\n\n* **Success** A match was found in at least one of the searched data sources. Data is returned based on the\n                matched dataset(s).\n* **Not Found** No match was found in any of the searched data sources. The input is returned without any\n                appended data.\n* **Multiple Matches Found** No match was found in the reference data for the business at the provided address.\n                However, multiple records in the input state with the input name were found. The service is\n                unable to determine which (if any) is the correct record. The input address and name are\n                returned along with a list of the possible match candidates that were found.\n* **Multiple Matches Found - Parent Company Identified** Similar to _Multiple Matches Found_, in this case,\n                multiple matches to the business name were found, and all of the matches had the same parent\n                company. This indicates that the requested record is likely a new location of the parent company\n                (either a previous location that has moved, or a new outlet). Data is returned based on the\n                parent data with some of the location data inferred.\n",
            "enum": [
              "Success",
              "Not Found",
              "Multiple Matches Found",
              "Multiple Matches Found - Parent Company Identified"
            ]
          },
          "matchDescription": {
            "type": "string",
            "default": "Default match logic",
            "description": "<a name=\"smb-match-logic\"></a>\nThe description of the match logic used to find the business. Definitions of possible returns are as\nfollows:\n\n* **Default Match Logic** A match was found in the business reference data using both the address and the\n        business name.\n* **Default match logic to Individual** A match was found in the consumer reference data using both the\n        address and the input business name.\n* **Close name match but address unconfirmed** A match was found within the Secretary of State data. This\n        data source can only be searched using business name and state, so the input address is returned.\n        Additionally, This data source only supports a few data fields, so the return will have a smaller\n        proportion of filled values.\n* **Close name match within state** A statewide search in the commercial reference data returned exactly one\n        record with the same name as the input business. Data is returned for the business at this location.\n* **Not Found** None of the searches were able to find a match.\n",
            "enum": [
              "Default match logic",
              "Close name match",
              "Close name match but address unconfirmed",
              "Close name match but address changed",
              "Close name match within state",
              "Not Found"
            ]
          },
          "addressDescription": {
            "type": "string",
            "description": "<a name=\"smb-address-description\"></a>\nThe description of the address standardization and verification outcome. Definitions of possible returns are as\nfollows:\n\n* **Address verified** The input address was successfully validated and formatted to USPS standards.\n* **City, state and ZIP verified, but street address not found** The input city, state, and ZIP code were valid\n        but the street address could not be verified.\n* **More than one possible address found** There were multiple possibilities for the input address of equal\n    likelihood of being correct. This is an unusual outcome.\n* **Street address verified but the unit is missing/wrong** Only the street address portion of the input address\n    could be verified. This also indicates that the street address is a multi-unit building, and either the\n    unit information is missing or the entered values did not match USPS records for the building.\n* **Address verification failed** The input address could not be resolved.\n* **Artificial address matched** The input address matched to a record from the developer dataset.\n",
            "enum": [
              "Address verified",
              "City, state and ZIP verified, but street address not found",
              "More than one possible address found",
              "Street address verified but unit is missing/wrong",
              "Address verification failed",
              "Address verification not attempted",
              "Artificial address matched"
            ],
            "example": "Address verified"
          },
          "name": {
            "type": "string",
            "description": "The business name."
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of this location."
          },
          "phone": {
            "type": "string",
            "description": "The telephone number for the company at this location."
          },
          "country": {
            "type": "string",
            "description": "The country name of this location."
          },
          "headquarters": {
            "type": "boolean",
            "description": "True if this location is the headquarters for this company or if this is the only location for this business."
          },
          "employees": {
            "type": "string",
            "description": "The approximate number of employees for this location."
          },
          "estimatedEmployees": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated number of employees for this location."
          },
          "estimatedPayroll": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated total payroll for this location."
          },
          "revenue": {
            "type": "string",
            "description": "The approximate revenue for this location."
          },
          "estimatedRevenue": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated revenue for this location."
          },
          "operatingHours": {
            "type": "string",
            "deprecated": true,
            "description": "The operating hours for this location. This field is no longer available and will always be blank."
          },
          "areaSquareMeters": {
            "type": "number",
            "format": "double",
            "deprecated": true,
            "description": "The approximate area in square meters of this location. This field is no longer available and will always be null."
          },
          "parent": {
            "$ref": "#/components/schemas/Company",
            "description": "The parent company of this location or further information if only one location is known."
          },
          "matchCandidates": {
            "type": "array",
            "description": "When the search returns multiple records and the parent can not be identified, this is populated with business candidates.",
            "items": {
              "$ref": "#/components/schemas/MatchCandidate"
            }
          },
          "knownLocations": {
            "type": "array",
            "description": "When the parent company is identified and multiple business locations are found, this is populated with the locations for the given state.",
            "items": {
              "$ref": "#/components/schemas/MatchCandidate"
            }
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "linkedInUrl": {
            "type": "string",
            "description": "The URL for the business' LinkedIn page."
          },
          "domain": {
            "type": "string",
            "description": "The domain used in the email addresses and URL's for the company."
          },
          "website": {
            "type": "string",
            "description": "The URL for company website."
          },
          "alternateDomains": {
            "type": "array",
            "description": "Other domains used by the company",
            "items": {
              "type": "string"
            }
          },
          "alternateNames": {
            "type": "array",
            "description": "Other names used by the company.",
            "items": {
              "type": "string"
            }
          },
          "numberOfContacts": {
            "type": "integer",
            "format": "int32",
            "description": "The number of known contacts across all locations for this company."
          },
          "primaryIndustry": {
            "type": "string",
            "description": "A description of the primary industry for the company."
          },
          "primaryNAICSCode": {
            "type": "string",
            "description": "The primary North American Industry Classification System (NAICS) code for the company",
            "example": 721110,
            "pattern": "[0-9]{6}"
          },
          "otherNAICSCodes": {
            "type": "array",
            "items": {
              "description": "A Secondary or Tertiary North American Industry Classification System (NAICS) code(s) for this company.",
              "example": 721110,
              "pattern": "[0-9]{6}"
            }
          },
          "primarySICCode": {
            "type": "string",
            "description": "The primary Standard Industrial Classification (SIC) code for this company.",
            "example": 2052,
            "pattern": "[0-9]{4}"
          },
          "otherSICCodes": {
            "type": "array",
            "items": {
              "description": "A secondary or tertiary Standard Industrial Classification (SIC) code(s) for this company.",
              "example": 2052,
              "pattern": "[0-9]{4}"
            }
          },
          "employees": {
            "type": "string",
            "description": "An estimated range of the number of employees across all locations for this company.",
            "enum": [
              "Unknown",
              "",
              "1-20",
              "21-100",
              "101-500",
              "501-1000",
              "1001-5000",
              "5001+"
            ]
          },
          "estimatedEmployees": {
            "type": "integer",
            "format": "int64",
            "description": "An estimated number of employees across all locations for this company."
          },
          "revenue": {
            "type": "string",
            "description": "An estimated range of the revenue across all locations for this company.",
            "enum": [
              "Less than $1 Million",
              "$1 - 9.99 Million",
              "$10 - 49.99 Million",
              "$50 - 99.99 Million",
              "$100 - 999.99 Million",
              "$1+ Billion",
              "Unknown",
              ""
            ]
          },
          "estimatedRevenue": {
            "type": "integer",
            "format": "int64",
            "description": "An estimated revenue across all locations for this company."
          },
          "yearEstablished": {
            "type": "string",
            "description": "The four digit year that this company was established."
          },
          "entityType": {
            "type": "string",
            "description": "The type of entity this company represents.",
            "enum": [
              "Professional Corporation",
              "LLP",
              "LTD",
              "LLC",
              "Partnership",
              "Government",
              "Cooperative",
              "Incorporated",
              "Sole Proprietorship"
            ]
          },
          "normalizedIndustry": {
            "type": "string",
            "description": "A normalized value for the primary industry of this company."
          },
          "numberOfLocations": {
            "type": "integer",
            "format": "int32",
            "description": "The number of locations for this company."
          },
          "estimatedPayroll": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated payroll for this location"
          }
        }
      },
      "MatchCandidate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The business name."
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of this location."
          },
          "phone": {
            "type": "string",
            "description": "The telephone number for the company at this location."
          },
          "country": {
            "type": "string",
            "description": "The country name of this location."
          },
          "headquarters": {
            "type": "boolean",
            "description": "True if this location is the headquarters for this company or if this is the only location for this business."
          },
          "employees": {
            "type": "string",
            "description": "The approximate number of employees for this location."
          },
          "estimatedEmployees": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated number of employees for this location."
          },
          "estimatedPayroll": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated total payroll for this location."
          },
          "revenue": {
            "type": "string",
            "description": "The approximate revenue for this location."
          },
          "estimatedRevenue": {
            "type": "integer",
            "format": "int64",
            "description": "The estimated revenue for this location."
          },
          "operatingHours": {
            "type": "string",
            "deprecated": true,
            "description": "The operating hours for this location. This field is no longer available and will always be blank."
          },
          "areaSquareMeters": {
            "type": "number",
            "format": "double",
            "deprecated": true,
            "description": "The approximate area in square meters of this location. This field is no longer available and will always be null."
          },
          "parent": {
            "$ref": "#/components/schemas/Company",
            "description": "The parent company of this location or further information if only one location is known."
          }
        }
      },
      "BusinessRequest": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "description": "Business name(s) which can include alternative names (legal, trade, DBA) or person's first and last name.",
            "example": [
              "Cherry on Top Cupcake",
              "Cherry on Top Bakery",
              "Cherry Cupcake Midtown",
              "Cherry Cupcakes"
            ],
            "items": {
              "type": "string",
              "minLength": 1
            },
            "minItems": 1
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Address for the business location or just the state",
            "example": {
              "addressLine1": "32301 Juergensen ST NW",
              "city": "Washington",
              "state": "DC",
              "zipCode": "20007"
            }
          },
          "otherAddresses": {
            "type": "array",
            "description": "Optional address(es) to be used in addition to input address for the search.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "required": [
          "address",
          "names"
        ]
      },
      "CreditResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "matchDescription": {
            "type": "string",
            "default": "Default match logic",
            "description": "<a name=\"smb-match-logic\"></a>\nThe description of the match logic used to find the business. Definitions of possible returns are as\nfollows:\n* **Default Match Logic** A match was found in the business reference data using both the address and the\n        business name.\n* **Close name match within state** A statewide search in the commercial reference data returned exactly one\n        record with the same name as the input business. Data is returned for the business at this location.\n* **Not Found** None of the searches were able to find a match.\n",
            "enum": [
              "Default match logic",
              "Close name match",
              "Close name match but address changed",
              "Close name match within state",
              "Not Found"
            ]
          },
          "addressDescription": {
            "type": "string",
            "description": "<a name=\"smb-address-description\"></a>\nThe description of the address standardization and verification outcome. Definitions of possible returns are as\nfollows:\n\n* **Address verified** The input address was successfully validated and formatted to USPS standards.\n* **City, state and ZIP verified, but street address not found** The input city, state, and ZIP code were valid\n        but the street address could not be verified.\n* **More than one possible address found** There were multiple possibilities for the input address of equal\n    likelihood of being correct. This is an unusual outcome.\n* **Street address verified but the unit is missing/wrong** Only the street address portion of the input address\n    could be verified. This also indicates that the street address is a multi-unit building, and either the\n    unit information is missing or the entered values did not match USPS records for the building.\n* **Address verification failed** The input address could not be resolved.\n* **Artificial address matched** The input address matched to a record from the developer dataset.\n",
            "enum": [
              "Address verified",
              "City, state and ZIP verified, but street address not found",
              "More than one possible address found",
              "Street address verified but unit is missing/wrong",
              "Address verification failed",
              "Address verification not attempted",
              "Artificial address matched"
            ],
            "example": "Address verified"
          },
          "name": {
            "type": "string",
            "description": "The business name."
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of this location."
          },
          "primaryNAICSCode": {
            "type": "string",
            "description": "The primary North American Industry Classification System (NAICS) code for the company",
            "example": 721110,
            "pattern": "[0-9]{6}"
          },
          "otherNAICSCodes": {
            "type": "array",
            "items": {
              "description": "A Secondary or Tertiary North American Industry Classification System (NAICS) code(s) for the company.",
              "example": 721110,
              "pattern": "[0-9]{6}"
            }
          },
          "failRate": {
            "type": "integer",
            "format": "int32",
            "description": "A score estimating the likelihood of the business failing (due to formal or informal bankruptcy) in the next year,\nreturned as a value in the range of 1 through 9, with a 9 indicating the highest risk. A 0 indicates that the\ncompany has filed for bankruptcy.\n"
          },
          "failLevel": {
            "type": "integer",
            "format": "int32",
            "description": "A score estimating the likelihood of the business failing (due to formal or informal bankruptcy) in the next year,\nreturned as a 1, 2, or 3, where a 1 equates to the lowest risk, a 2 indicates marginal risk and a 3 indicates\nhigh risk. A 0 indicates that the company has filed for bankruptcy."
          },
          "failReasons": {
            "type": "array",
            "description": "A list of reasons supporting the business failure risk scores.",
            "items": {
              "type": "string"
            }
          },
          "creditScore": {
            "type": "integer",
            "format": "int32",
            "description": "A score estimating the likelihood of the business becoming severely delinquent (90 days or more past due) or charge-off\nwithin the next year. The score ranges from 101 to 660, with a 660 indicating the lowest risk. A 0 indicates\nthat the business has filed for bankruptcy."
          },
          "creditClass": {
            "type": "integer",
            "format": "int32",
            "description": "A score estimating the likelihood of the business becoming severely delinquent (90 days or more past due) or\ncharge-off within the next year, returned as a value in the range of 1 through 5, with a 5 indicating the\nhighest risk. A 0 indicates that the business has filed for bankruptcy."
          },
          "creditPercentile": {
            "type": "integer",
            "format": "int32",
            "description": "The percentile of the estimated business's risk of becoming severely delinquent (91 or more days past due)\nrelative to the population of businesses in the Commercial database. Returns a value in the range of 1 through\n100, a 1 indicating that the business is among the top 1% of highest risk businesses for becoming severely\ndelinquent, and a 100 indicating that the business is in 1% of businesses at the lowest risk.\nA 997 is returned when no record was found, a 998 indicates bankruptcy,\nand a 999 indicates that no score was able to be calculated."
          },
          "creditReasons": {
            "type": "array",
            "description": "A list of reason codes for the estimated credit scores.",
            "items": {
              "type": "string"
            }
          },
          "bankruptcy": {
            "type": "string",
            "description": "A string indicating if the company has a current or historical bankruptcy on file. This field returns 'N'\nif no bankruptcy is found, and 'Y' if a bankruptcy has been found."
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Children": {
        "type": "object",
        "properties": {
          "totalChildren": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household."
          },
          "children0to2": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household between the ages of zero and two."
          },
          "children3to5": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household between the ages of three and five."
          },
          "children6to10": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household between the ages of six and ten."
          },
          "children11to15": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household between the ages of 11 and 15."
          },
          "children16to17": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household between the ages of 16 and 17."
          },
          "childrenUnknownAge": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of children present in the household minus the total number of children of known ages."
          }
        }
      },
      "EquityInfo": {
        "type": "object",
        "properties": {
          "salePrice": {
            "type": "integer",
            "format": "int64",
            "description": "The sale price of the home at the time of purchase."
          },
          "marketValue": {
            "type": "integer",
            "format": "int64",
            "description": "The current estimated market value of the home.",
            "example": 4502010
          },
          "assessedValue": {
            "type": "integer",
            "format": "int64",
            "description": "The assessed value of the home."
          },
          "currentLoanToValue": {
            "type": "string",
            "description": "The ratio of the outstanding loan amount to the current estimated home value."
          },
          "equity": {
            "type": "integer",
            "format": "int64",
            "description": "The amount of equity basis in the home."
          },
          "saleDate": {
            "type": "string",
            "format": "date",
            "description": "The home's selling date in MM/15/YYY format. _Note: this date will always be the 15th of the month_."
          }
        }
      },
      "FinancialInfo": {
        "type": "object",
        "properties": {
          "income": {
            "type": "string",
            "description": "The estimated income of the household."
          },
          "netWorth": {
            "type": "string",
            "description": "An estimated net worth range."
          },
          "wealthResources": {
            "type": "string",
            "description": "A range for the estimated value of resources contributing ot net worth.",
            "enum": [
              "Less than $25,000",
              "$25,000 - $49,999",
              "$50,000 - $74,999",
              "$75,000 - $99,999",
              "$100,000 - $249,999",
              "$250,000 - $499,999",
              "$500,000 - $749,999",
              "$750,000 - $999,999",
              "$1,000,000 - $1,999,999",
              "$2,000,000 or more"
            ]
          },
          "investmentResources": {
            "type": "string",
            "description": "A range for the estimated value of investment resources for the household.",
            "enum": [
              "No Investment",
              "Less than $4,999",
              "$5,000 - $14,999",
              "$15,000 - $24,999",
              "$25,000 - $49,999",
              "$50,000 - $74,999",
              "$75,000 - $99,999",
              "$100,000 - $149,999",
              "$150,000 - $199,999",
              "$200,000 - $249,999",
              "$250,000 - $499,999",
              "$500,000 or more"
            ]
          },
          "liquidResources": {
            "type": "string",
            "description": "A range of the estimated value of liquid assets for the household.",
            "enum": [
              "Less than $500",
              "$500 - $2,499",
              "$2,500 - $4,999",
              "$5,000 - $7,499",
              "$7,500 - $9,999",
              "$10,000 - $14,999",
              "$15,000 - $19,999",
              "$20,000 - $24,999",
              "$25,000 - $29,999",
              "$30,000 - $39,999",
              "$40,000 - $49,999",
              "$50,000 - $74,999",
              "$75,000 - $99,999",
              "$100,000 or more"
            ]
          },
          "shortTermLiability": {
            "type": "string",
            "description": "A range of the estimated value of short-term liabilities for the household.",
            "enum": [
              "0",
              "$1 - $2,499",
              "$2,500 - $4,999",
              "$5,000 - $9,999",
              "$10,000 - $14,999",
              "$15,000 - $19,999",
              "$20,000 - $29,999",
              "$30,000 - $49,999",
              "$50,000 or more"
            ]
          },
          "mortgageData": {
            "$ref": "#/components/schemas/MortgageInfo",
            "description": "Detailed information on the household mortgage."
          },
          "equityInfo": {
            "$ref": "#/components/schemas/EquityInfo",
            "description": "Detailed information on the equity in the home at the location of interest."
          },
          "investments": {
            "type": "array",
            "description": "A list of investments applicable to the household. Possible values include:\n* Burial Insurance\n* Insurance\n* Investments\n* Juvenile Life Insurance\n* Life Insurance\n* Medicare Coverage\n* Mutual Funds\n* Stocks or Bonds\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HouseholdInfo": {
        "type": "object",
        "properties": {
          "numberOfGenerations": {
            "type": "integer",
            "format": "int32",
            "description": "The number of generations living in the household."
          },
          "babyBoomer": {
            "type": "boolean",
            "description": "True if the household contains at least one person born between 1944 and 1964."
          },
          "dualIncomeNoKids": {
            "type": "boolean",
            "description": "True if the household made up of dual-income earners without children."
          },
          "genX": {
            "type": "boolean",
            "description": "True if a member of gen X is present in the household."
          },
          "millennial": {
            "type": "boolean",
            "description": "True if the household contains at least one person born between 1980 and 1994."
          },
          "numberOfAdults": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of non-minor people in the household."
          },
          "presenceChildren": {
            "type": "boolean",
            "description": "True if minors are present in the household."
          },
          "children": {
            "$ref": "#/components/schemas/Children"
          },
          "hobbies": {
            "type": "array",
            "description": "A list of hobbies associated with the household.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HouseholdMember": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Kyle",
            "minLength": 1
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial of the person."
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Murdock",
            "minLength": 1
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the person.\nInput allows the following formats:\n* **M/D/YYYY**\n* **MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD** (ISO DATE)\n\nA two digit year is not supported.",
            "example": "05/20/1970",
            "pattern": "^\\s*(\\d{4}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])|\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])|(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]\\d{4}|(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\\d{4}){1}\\s*$"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "description": "The age of the person found or provided."
          },
          "gender": {
            "type": "string",
            "description": "One of:\n* **Male**\n* **Female**\n* **Non-binary**\n* **Unknown**\n"
          },
          "maritalStatus": {
            "type": "string",
            "description": "The marital status of the person.",
            "enum": [
              "Married",
              "Single",
              "Unknown"
            ]
          },
          "memberCode": {
            "type": "string",
            "description": "The member code of the household member.",
            "enum": [
              "Primary Household Member",
              "Secondary Household Member",
              "Other Household Member"
            ]
          }
        }
      },
      "LifePrefillResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "matchDescription": {
            "type": "string",
            "default": "Default match logic",
            "description": "How the search matched to the individual or household.",
            "enum": [
              "Default match logic",
              "First and last name switched",
              "Changed last name",
              "Household match",
              "Multiple matches found",
              "Not Found",
              "Artificial match",
              "Household artificial match"
            ]
          },
          "addressDescription": {
            "type": "string",
            "description": "Whether the address was verified or not.",
            "enum": [
              "Address verified",
              "City, state and ZIP verified, but street address not found",
              "More than one possible address found",
              "Street address verified but unit is missing/wrong",
              "Address verification failed",
              "Address verification not attempted",
              "Artificial address matched"
            ],
            "example": "Address verified"
          },
          "primary": {
            "$ref": "#/components/schemas/PrimaryNamedInsured"
          },
          "householdInfo": {
            "$ref": "#/components/schemas/HouseholdInfo"
          },
          "financialInfo": {
            "$ref": "#/components/schemas/FinancialInfo"
          },
          "householdMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HouseholdMember"
            }
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "MortgageInfo": {
        "type": "object",
        "properties": {
          "firstMortgageAmount": {
            "type": "integer",
            "format": "int64",
            "description": "The primary mortgage amount."
          },
          "secondMortgageAmount": {
            "type": "integer",
            "format": "int64",
            "description": "The second mortgage amount, if any."
          },
          "originalMortgageAmount": {
            "type": "integer",
            "format": "int64",
            "description": "The original mortgage amount at the time of purchase."
          },
          "homeEquityLoan": {
            "type": "integer",
            "format": "int64",
            "description": "The amount of the home equity loan."
          },
          "interestRate": {
            "type": "string",
            "description": "The interest rate for the current mortgage."
          },
          "interestRateType": {
            "type": "string",
            "description": "The type of interest for the current mortgage",
            "enum": [
              "Fixed Rate Loan",
              "Graduated Payment Loan",
              "Variable Rate Loan",
              "Unable to Assign/Missing"
            ]
          },
          "loanType": {
            "type": "string",
            "default": "Unknown",
            "description": "The loan type of the first mortgage. One of:\n* **Stand Alone First**\n* **Stand Alone Second**\n* **ARM** - Adjustable Rate Mortgage as of August, 2009.\n* **Amount keyed is an Aggregate amount**\n* **USDA**\n* **Closed-end Mortgage**\n* **Non Purchase Money Mortgage**\n* **SBA Participation Trust Deed**\n* **Assumption**\n* **Building or Construction Loan**\n* **Cash**\n* **2nd Mortgage made to cover Down Payment**\n* **Credit Line (Revolving)**\n* **FHA**\n* **Fannie Mae/Freddie Mac** - Phased out because Fannie Mae does not originate loans directly to borrowers or investors. Most \"new conventional\" loans meet their general underwriting guidelines.\n* **Balloon**\n* **Farmers Home Administration**\n* **Negative Amortization**\n* **Loan Amount $1-9 billion** - Only first 9-digits of Loan Amount entered due to field length limitations. Need to multiply Loan Amount Field by 10 for the actual amount.\n* **Land Contract (Argmt. Of Sale)**\n* **Modification** - Originally designated to capture Hula Mae loans in Hawaii. As with Fannie Mae/Freddie Mac, Hula Mae does not originate loans directly to borrowers. This code now designates Mortgage Modifications which make a change to the Interest Rate Loan Balance (except credit lines),Type Financing, or other Rate Rider terms. Effective as of December 2008.\n* **New Conventional**\n* **Commercial**\n* **Purchase Money Mortgage**\n* **Undefined / Multiple Amounts**\n* **Stand Alone Refi** - A refinance of the original loan.\n* **Seller take-back**\n* **Loan Amount $10-99 billion** - only first 9-digits of Loan Amount entered due to field length limitations. Need to multiply Loan Amount Field by 100 for the actual amount.\n* **Unknown**\n* **VA**\n* **Future Advance Clause / Open End Mortgage**\n* **Trade**\n* **State Veterans**\n* **Reverse Mortgage** - Home Equity Conversion Mortgage\n"
          },
          "loanDate": {
            "type": "string",
            "format": "date",
            "description": "The date of loan origination."
          },
          "refiIndicator": {
            "type": "boolean",
            "description": "True if the current mortgage is the result of a refinance."
          }
        }
      },
      "PrimaryNamedInsured": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Kyle",
            "minLength": 1
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial of the person."
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Murdock",
            "minLength": 1
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the person.\nInput allows the following formats:\n* **M/D/YYYY**\n* **MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD** (ISO DATE)\n\nA two digit year is not supported.",
            "example": "05/20/1970",
            "pattern": "^\\s*(\\d{4}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])|\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])|(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]\\d{4}|(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\\d{4}){1}\\s*$"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "description": "The age of the person found or provided."
          },
          "gender": {
            "type": "string",
            "description": "One of:\n* **Male**\n* **Female**\n* **Non-binary**\n* **Unknown**\n"
          },
          "maritalStatus": {
            "type": "string",
            "description": "The marital status of the person.",
            "enum": [
              "Married",
              "Single",
              "Unknown"
            ]
          },
          "memberCode": {
            "type": "string",
            "description": "The member code of the household member.",
            "enum": [
              "Primary Household Member",
              "Secondary Household Member",
              "Other Household Member"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "homeOwnerStatus": {
            "type": "string",
            "description": "The home ownership status of the individual at the associated address.",
            "enum": [
              "Definite Renter",
              "Probable Renter",
              "Definite Owner",
              "Probable Owner",
              "Unknown"
            ]
          },
          "lengthOfResidence": {
            "type": "string",
            "description": "The length of time the individual has lived at their current residence.",
            "enum": [
              "0-6 mos",
              "7-12 mos.",
              "1-2 yrs",
              "3-5 yrs",
              "6-10 yrs",
              "11-15 yrs",
              "16-20 yrs",
              "20+ yrs"
            ]
          },
          "occupation": {
            "type": "string",
            "description": "The individual's occupation."
          }
        }
      },
      "LifePrefillRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Input address for the search."
          },
          "otherAddresses": {
            "type": "array",
            "description": "Optional address(es) to be used in addition to input address for the search.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "required": [
          "address",
          "person"
        ]
      },
      "AddressValidation": {
        "type": "object",
        "properties": {
          "standardized": {
            "type": "boolean",
            "description": "True if the postal address of the contact is standardized."
          },
          "singleDeliveryPoint": {
            "type": "boolean",
            "description": "True if the delivery point was successfully validated."
          },
          "residential": {
            "type": "boolean",
            "description": "True if the address is classified as a residence."
          },
          "addressFound": {
            "type": "boolean",
            "description": "True if the address was found in the reference data."
          },
          "householdFound": {
            "type": "boolean",
            "description": "True if the last name was found at the provided address in the reference data."
          },
          "personAtAddress": {
            "type": "boolean",
            "description": "True if the person was found at the provided address in reference data."
          }
        }
      },
      "EmailValidation": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "True if the email address contains all the required elements, i.e. prefix, @, and valid domain as suffix."
          }
        }
      },
      "IpValidation": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "True if the INet4 address and range (i.e. not restricted) was successfully validated."
          },
          "notKnownProxy": {
            "type": "boolean",
            "description": "True if the IP Address was not found in the IP2Location Lite Proxy database."
          }
        }
      },
      "PersonValidation": {
        "type": "object",
        "properties": {
          "recognizedFirstName": {
            "type": "boolean",
            "description": "True if the first name was found in the reference data."
          },
          "recognizedLastName": {
            "type": "boolean",
            "description": "True if the last name was found in the reference data."
          },
          "personFound": {
            "type": "boolean",
            "description": "True if the target person (with first and last name) was found in the reference data."
          },
          "dateOfBirthVerified": {
            "type": "boolean",
            "description": "True if the person with the given date of birth found in the reference data."
          }
        }
      },
      "PhoneValidation": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "True if the provided phone number was successfully validated."
          },
          "mobileOrLandline": {
            "type": "boolean",
            "description": "True if the phone number is a mobile or a landline number."
          }
        }
      },
      "ProfileResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "TruProfile service status",
            "enum": [
              "Success",
              "Success - Developer Data"
            ],
            "example": "Success"
          },
          "address": {
            "$ref": "#/components/schemas/AddressValidation"
          },
          "person": {
            "$ref": "#/components/schemas/PersonValidation"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneValidation"
          },
          "email": {
            "$ref": "#/components/schemas/EmailValidation"
          },
          "ipAddress": {
            "$ref": "#/components/schemas/IpValidation"
          },
          "score": {
            "$ref": "#/components/schemas/ProfileScore"
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ProfileScore": {
        "type": "object",
        "properties": {
          "score": {
            "type": "string",
            "description": "The **Fenris Profile+** score. Gives the categorical likelihood that the person can be contacted.",
            "enum": [
              "poor",
              "fair",
              "good",
              "very good",
              "excellent"
            ]
          },
          "value": {
            "type": "integer",
            "format": "int32",
            "description": "The **Fenris Profile+** score as a numeric value, ranging between 0 and 1000",
            "maximum": 1000,
            "minimum": 0
          },
          "decile": {
            "type": "integer",
            "format": "int32",
            "description": "The decile of the **Fenris Profile+** score within the population of the training data.",
            "maximum": 10,
            "minimum": 0
          },
          "modelVersion": {
            "type": "string",
            "description": "The version of the model used to compute the **Fenris Profile+** score."
          }
        }
      },
      "ProfilePerson": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the contact.",
            "example": "Kyle"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact.",
            "example": "Murdock"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "The contact's date of birth. Supports the following formats:\n* **M/D/YYYY**\n* **MM/DD/YYYY**\n* **M-D-YYYY**\n* **MM-DD-YYYY**\n* **YYYYMMDD** (BASIC ISO DATE)\n* **YYYY-MM-DD** (ISO DATE)\n\na two digit year is not supported.\n",
            "example": "05/20/1970"
          }
        }
      },
      "ProfileRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/ProfilePerson"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "description": "The contact email address. Supported formats include:\n* example@domain.com\n",
            "example": "hello@fenrisd.com"
          },
          "phone": {
            "type": "string",
            "description": "The contact phone number. Supported formats include:\n* 123-456-7890\n* +12345678901\n* 1-123-456-7890\n* 1234567890\n* (123)456-7890\n",
            "example": "123-123-4567"
          },
          "ipAddress": {
            "type": "string",
            "description": "The contact IP address. The typical formats include:\n* 192.168.0.1\n* 223.255.255.255\n",
            "example": "1.2.3.4"
          },
          "lineOfBusiness": {
            "type": "string",
            "description": "The line of business to score the lead for.\nThis is an optional parameter used when a customer has multiple models trained.\n",
            "example": "auto"
          }
        }
      },
      "EchoResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "default": "SUCCESS",
            "description": "Input was returned successfully."
          },
          "message": {
            "type": "string",
            "description": "The string message returned by the echo service."
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "EchoRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A string message to send to the echo service.",
            "example": "I think you're great!"
          }
        }
      },
      "LeadInsightResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "score": {
            "type": "string"
          },
          "decile": {
            "type": "integer",
            "format": "int32"
          },
          "model": {
            "type": "string"
          },
          "prediction": {
            "$ref": "#/components/schemas/Prediction"
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "LifeLeadInsightRequest": {
        "type": "object",
        "properties": {
          "thirdPartyLeadCertificationId": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "source": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "ageInYears": {
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "type": "string"
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "currentInsuranceProvider": {
            "type": "string"
          },
          "married": {
            "type": "string"
          },
          "occupation": {
            "type": "string"
          },
          "homeowner": {
            "type": "string"
          },
          "desiredCoverageLevel": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "familyHistory": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          },
          "majorCondition": {
            "type": "string"
          },
          "preExistingCondition": {
            "type": "string"
          },
          "tcpa": {
            "type": "string"
          },
          "tobaccoUse": {
            "type": "string"
          }
        }
      },
      "HomeLeadInsightRequest": {
        "type": "object",
        "properties": {
          "thirdPartyLeadCertificationId": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "source": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "ageInYears": {
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "type": "string"
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "age": {
            "type": "string"
          },
          "currentlyInsured": {
            "type": "string"
          },
          "currentInsuranceCompany": {
            "type": "string"
          },
          "propertyType": {
            "type": "string"
          },
          "occupancy": {
            "type": "string"
          },
          "foundation": {
            "type": "string"
          },
          "homeSecurity": {
            "type": "string"
          },
          "yearBuilt": {
            "type": "string"
          },
          "stories": {
            "type": "string"
          },
          "bedrooms": {
            "type": "string"
          },
          "bathrooms": {
            "type": "string"
          },
          "squareFootage": {
            "type": "string"
          },
          "roofType": {
            "type": "string"
          }
        }
      },
      "HealthLeadInsightRequest": {
        "type": "object",
        "properties": {
          "thirdPartyLeadCertificationId": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "source": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "ageInYears": {
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "type": "string"
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tobaccoUse": {
            "type": "string"
          },
          "preExistingConditions": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "tcpa": {
            "type": "string"
          },
          "additionalInsured": {
            "type": "string"
          },
          "coverageTime": {
            "type": "string"
          },
          "entranceUrl": {
            "type": "string"
          },
          "currentInsurancePlan": {
            "type": "string"
          },
          "householdIncome": {
            "type": "string"
          },
          "householdSize": {
            "type": "string"
          },
          "over65": {
            "type": "string"
          },
          "subsidyStatus": {
            "type": "string"
          }
        }
      },
      "CommercialLeadInsightRequest": {
        "type": "object",
        "properties": {
          "thirdPartyLeadCertificationId": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "source": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "ageInYears": {
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "type": "string"
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AutoLeadInsightRequest": {
        "type": "object",
        "properties": {
          "thirdPartyLeadCertificationId": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "source": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "ageInYears": {
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "type": "string"
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vehicleYear": {
            "type": "integer",
            "format": "int32"
          },
          "ageVehicle": {
            "type": "integer",
            "format": "int32"
          },
          "secondVehicleYear": {
            "type": "integer",
            "format": "int32"
          },
          "ageSecondVehicle": {
            "type": "integer",
            "format": "int32"
          },
          "ticketsOrClaimsLast3Years": {
            "type": "string"
          },
          "dui": {
            "type": "string"
          },
          "currentInsuranceProvider": {
            "type": "string"
          },
          "desiredCoverageLevel": {
            "type": "string"
          },
          "vehiclePrimaryUse": {
            "type": "string"
          },
          "annualMileage": {
            "type": "string"
          },
          "vehicleOwnership": {
            "type": "string"
          },
          "continuousCoverage": {
            "type": "string"
          },
          "activeLicense": {
            "type": "string"
          },
          "everFiledSR22": {
            "type": "string"
          },
          "homeowner": {
            "type": "string"
          },
          "married": {
            "type": "string"
          },
          "educationLevel": {
            "type": "string"
          },
          "creditScore": {
            "type": "string"
          }
        }
      },
      "ProspectScoringResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request, used for auditing and support.",
            "example": "1420f134-26c6-41ce-b187-d03f767c7f25"
          },
          "submissionId": {
            "type": "string",
            "description": "Returns the value from request header or if the value is not set in the header, then the unique identifier for the request."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of search: Usually, Success or Not Found",
            "example": "Success"
          },
          "matchDescription": {
            "type": "string",
            "default": "Default match logic",
            "description": "How the search matched to the individual or household.",
            "enum": [
              "Default match logic",
              "First and last name switched",
              "Changed last name",
              "Household match",
              "Multiple matches found",
              "Not Found",
              "Artificial match",
              "Household artificial match"
            ]
          },
          "score": {
            "type": "string",
            "description": "Quality of input with respect to target.",
            "enum": [
              "Excellent",
              "Very Good",
              "Good",
              "Fair",
              "Poor",
              "Not Found"
            ]
          },
          "decile": {
            "type": "integer",
            "format": "int32",
            "description": "Decile of response (1-10) based on likelihood of input compared to target",
            "maximum": 10,
            "minimum": 1
          },
          "model": {
            "type": "string",
            "description": "Model used to compute response. Returns \"Model Failed\" if an error occurs in processing."
          },
          "trainingData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "instanceStatus": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ProspectScoringRequest": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Input address for the search."
          },
          "otherAddresses": {
            "type": "array",
            "description": "Optional address(es) to be used in addition to input address for the search.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "otherParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "address",
          "person"
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Property Insurance",
      "tags": [
        "Property Details",
        "Property Replacement Cost",
        "Property Hazards and Perils"
      ]
    },
    {
      "name": "Fenris Digital Analytics API",
      "tags": [
        "Submit an outcome"
      ]
    },
    {
      "name": "Fenris Auto Insurance API Suite",
      "tags": [
        "Auto Prefill",
        "Driver Record",
        "VIN Decoder",
        "Drivers License"
      ]
    },
    {
      "name": "Fenris APIs for Predictive Insights",
      "tags": [
        "Score a Commercial Applicant",
        "Score an Anonymous Lead (Ping)",
        "Score a Consumer Applicant"
      ]
    },
    {
      "name": "Fenris Commercial Insurance API Suite",
      "tags": [
        "Commercial Lines Prefill",
        "Commercial Lines Financial Information"
      ]
    },
    {
      "name": "Fenris Digital Customer 360 API",
      "tags": [
        "Customer 360",
        "Fenris Profile+"
      ]
    },
    {
      "name": "Fenris Digital Echo API",
      "tags": [
        "Echo a Message"
      ]
    }
  ]
}
